[Tests]
  design = 'RepeatableRayStudyBase.md'
  issues = '#16028 #16848'
  [test]
    requirement = 'The RepeatableRayStudyBase shall support the'
    [checkpoint]
      type = 'RunApp'
      input = 'recover.i'
      cli_args = 'Outputs/checkpoint=true Executioner/num_steps=1'
      recover = false
      detail = 'outputting of checkpoint files and'
    []
    [recover]
      type = 'CSVDiff'
      input = 'recover.i'
      csvdiff = 'recover_out.csv'
      cli_args = '--recover'
      prereq = 'test/checkpoint'
      delete_output_before_running = false
      recover = false
      detail = 'shall be capable of restarting from the output data.'
    []
  []

  [replicated_no_claim]
    requirement = 'The RepeatableRayStudyBase shall report a useful warning when rays are to be replicated but claiming is disabled.'
    type = 'RunException'
    input = 'errors.i'
    cli_args = 'UserObjects/study/type=RepeatableRayStudyDefineNoClaimTest'
    expect_err = '_define_rays_replicated is being set to false.'
  []

  [non_unique_id_error]
    requirement = 'The RepeatableRayStudyBase shall return a useful error when a ray is added with a non-unique ID.'
    type = 'RunException'
    input = 'errors.i'
    cli_args = 'UserObjects/study/create_non_unique_id_rays=true'
    expect_err = 'Multiple Rays exist with ID 0 on processor'
  []

  [replicated_errors]
    requirement = 'The RepeatableRayStudyBase shall return a useful error with replicated ray functionality when'
    [additional]
      type = 'RunException'
      input = 'errors.i'
      cli_args = 'UserObjects/study/create_additional_ray_pid=0'
      min_parallel = 2
      max_parallel = 2
      expect_err = 'The size of _rays on rank 1 does not match the size of rays on rank 0.'
      detail = 'additional rays are created in a non-replicated manner on a subset of processors,'
    []
    [non_replicated_id]
      type = 'RunException'
      input = 'errors.i'
      cli_args = 'UserObjects/study/create_non_replicated_id_ray_pid=0'
      min_parallel = 2
      max_parallel = 2
      expect_err = 'A Ray was found on rank 1 with an ID that does not exist on rank 0.'
      detail = 'a ray exists with a non-replicated ID on a processor,'
    []
    [non_replicated]
      type = 'RunException'
      input = 'errors.i'
      cli_args = 'UserObjects/study/create_non_replicated_ray_pid=0'
      min_parallel = 2
      max_parallel = 2
      expect_err = 'A Ray was found on rank 1 that does not exist on rank 0.'
      detail = 'a non-replicated ray exists on a processor,'
    []
    [starting_elem_set]
      type = 'RunException'
      input = 'errors.i'
      cli_args = 'UserObjects/study/define_ray_with_starting_elem=true'
      expect_err = 'A Ray was found in _rays after defineRays\(\) that has a starting element or incoming side set.'
      detail = 'and a ray is created with starting element information when it should not.'
    []
  []

  [define_errors]
    requirement = 'The RepeatableRayStudyBase shall return a useful error after defining rays when'

    [no_rays]
      type = 'RunException'
      input = 'errors.i'
      cli_args = 'UserObjects/study/define_no_rays=true'
      expect_err = 'No Rays were moved to _rays in defineRays\(\)'

      detail = 'no rays were defined or'
    []
    [null_ray]
      type = 'RunException'
      input = 'errors.i'
      cli_args = 'UserObjects/study/define_nullptr_ray=true'
      expect_err = 'A nullptr Ray was found in _rays after defineRays\(\).'

      detail = 'a null ray was defined.'
    []
  []
[]
