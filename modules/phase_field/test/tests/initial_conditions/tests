[Tests]
  issues = '#6858 #5816 #7358 #8721 #12000 #6655 #9174 #17731'
  design = 'PolycrystalICs.md'

  [RampIC]
    type = Exodiff
    input = 'RampIC.i'
    exodiff = 'RampIC_out.e'

    requirement = 'The system shall support a ramp or linear initial condition in one dimension.'
  []

  [CrossIC]
    type = Exodiff
    input = 'CrossIC.i'
    exodiff = 'CrossIC_out.e'
    scale_refine = 1

    requirement = 'The system shall support the creation of a smooth cross initial condition.'
  []

  [ellipsoids]
    requirement = 'The system shall support ellipsoidal phase-field initial conditions:'

    [BimodalInverseSuperellipsoidsIC]
      type = Exodiff
      input = 'BimodalInverseSuperellipsoidsIC.i'
      exodiff = 'BimodalInverseSuperellipsoidsIC_out.e'
      scale_refine = 1
      # Uses exodus oversampling
      recover = false

      detail = 'bimodal inverse superellipsoidal structures,'
    []

    [BimodalSuperellipsoidsIC]
      type = Exodiff
      input = 'BimodalSuperellipsoidsIC.i'
      exodiff = 'BimodalSuperellipsoidsIC_out.e'
      scale_refine = 1
      # Uses exodus oversampling
      recover = false

      detail = 'bimodal superellipsoidal structures,'
    []

    [SmoothSuperellipsoidIC]
      type = Exodiff
      input = 'SmoothSuperellipsoidIC.i'
      exodiff = 'SmoothSuperellipsoidIC_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'
      # Uses exodus oversampling
      recover = false

      detail = 'smooth superellipsoidal structures,'
    []

    [SpecifiedSmoothSuperellipsoidIC]
      type = Exodiff
      input = 'SpecifiedSmoothSuperellipsoidIC.i'
      exodiff = 'SpecifiedSmoothSuperellipsoidIC_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'
      # Uses exodus oversampling
      recover = false

      detail = 'smooth superellipsoidal structures specified from a file,'
    []

    [SmoothSuperellipsoidIC_3D]
      type = Exodiff
      input = 'SmoothSuperellipsoidIC_3D.i'
      exodiff = 'SmoothSuperellipsoidIC_3D_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'

      detail = 'smooth superellipsoidal structures in 3D,'
    []

    [MultiSmoothSuperellipsoidIC_2D]
      type = Exodiff
      input = 'MultiSmoothSuperellipsoidIC_2D.i'
      exodiff = 'MultiSmoothSuperellipsoidIC_2D_out.e'

      detail = 'multiple smooth superellipsoidal structures in 2D, and'
    []

    [MultiSmoothSuperellipsoidIC_3D]
      type = Exodiff
      input = 'MultiSmoothSuperellipsoidIC_3D.i'
      exodiff = 'MultiSmoothSuperellipsoidIC_3D_out.e'

      detail = 'multiple smooth superellipsoidal structures in 3D.'
    []
  []

  [polycrystal]
    requirement = 'The system shall support polycrystal phase-field initial conditions:'

    [PolycrystalVoronoiIC_periodic]
      type = 'Exodiff'
      input = 'PolycrystalVoronoiIC_periodic.i'
      exodiff = 'PolycrystalVoronoiIC_periodic_out.e'
      cli_args = 'UserObjects/voronoi/use_kdtree=false'

      detail = 'polycrystal structure with diffused interface and periodic BC,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalVoronoiIC_periodic_kdtree]
      type = 'Exodiff'
      input = 'PolycrystalVoronoiIC_periodic.i'
      exodiff = 'PolycrystalVoronoiIC_periodic_out.e'

      detail = 'polycrystal structure with diffused interface and periodic BC using KDTree,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalVoronoiVoidIC_moregrains]
      type = 'Exodiff'
      input = 'PolycrystalVoronoiVoidIC_moregrains.i'
      exodiff = 'PolycrystalVoronoiVoidIC_moregrains_out.e'

      detail = 'large polycrystal structure with voids,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalVoronoiVoidIC_notperiodic]
      type = 'Exodiff'
      input = 'PolycrystalVoronoiVoidIC_notperiodic.i'
      exodiff = 'PolycrystalVoronoiVoidIC_notperiodic_out.e'

      detail = 'polycrystal structure with voids,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalVoronoiVoidIC_periodic]
      type = 'Exodiff'
      input = 'PolycrystalVoronoiVoidIC_periodic.i'
      exodiff = 'PolycrystalVoronoiVoidIC_periodic_out.e'

      detail = 'polycrystal structure with voids on a periodic domain,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalVoronoiVoidIC_periodic_fromfile]
      type = 'Exodiff'
      input = 'PolycrystalVoronoiVoidIC_periodic_fromfile.i'
      exodiff = 'PolycrystalVoronoiVoidIC_periodic_fromfile_out.e'
      capabilities = 'method!=dbg'

      detail = 'polycrystal structure with voids with centroids specified from a file,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalVoronoi_FromFile]
      type = Exodiff
      input = 'PolycrystalVoronoi_fromfile.i'
      exodiff = 'PolycrystalVoronoi_fromfile_out.e'

      detail = 'polycrystal structure with centroids specified from a file,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalCircles_FromFile]
      type = Exodiff
      input = 'polycrystalcircles_fromfile.i'
      exodiff = 'polycrystalcircles_fromfile_out.e'
      restep = false # Not actually doing any timesteps

      detail = 'polycrystal circles specified from a file,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalCircles_FromFileClipped]
      type = Exodiff
      input = 'polycrystalcircles_clipped.i'
      exodiff = 'polycrystalcircles_clipped_out.e'
      restep = false # Not actually doing any timesteps

      detail = 'polycrystal circles specified from a file that may not appear in the final domain,'
      # 0-step transient does not recover
      recover = false
    []

    [PolycrystalCircles_FromVector]
      type = Exodiff
      input = 'polycrystalcircles_fromvector.i'
      exodiff = 'polycrystalcircles_fromvector_out.e'
      restep = false # Not actually doing any timesteps

      detail = 'polycrystal circles specified from an input vector,'
      # 0-step transient does not recover
      recover = false
    []

    [HexPolycrystalIC]
      type = Exodiff
      input = HexPolycrystalIC.i
      exodiff = HexPolycrystalIC_out.e
      # Testing optimal hex coloring with a backtracking algorithm
      capabilities = 'method!=dbg'

      detail = 'hexagonal structure in 2D,'
    []

    [HexPolycrystalIC_3D]
      type = Exodiff
      input = HexPolycrystalIC_3D_columnar.i
      exodiff = HexPolycrystalIC_3D_columnar_out.e
      # Testing optimal hex coloring with a backtracking algorithm
      capabilities = 'method!=dbg'

      detail = 'hexagonal structure in 3D, and'
      # 0-step transient does not recover
      recover = false
    []

    [TricrystalTripleJunctionIC]
      type = Exodiff
      input = 'TricrystalTripleJunctionIC.i'
      exodiff = 'TricrystalTripleJunctionIC_out.e'

      detail = 'smooth interface in a triple junction.'
    []

  []

  [GB_adaptivity]
    requirement = 'The system shall support initial adaptivity based on GB locations:'
    issues = '#9668'

    [polycrystal_BndsCalcIC]
      type = 'Exodiff'
      input = 'polycrystal_BndsCalcIC.i'
      exodiff = 'polycrystal_BndsCalcIC_out.e polycrystal_BndsCalcIC_out.e-s002'

      detail = 'polycrystal structure with IC specifying the GB locations '
    []

  []


  [circles]
    requirement = "The system shall support phase-field initial conditions consisting of circle "
                  "patterns:"

    [SmoothCircleIC]
      type = Exodiff
      input = 'SmoothCircleIC.i'
      exodiff = 'SmoothCircleIC_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'
      # Uses exodus oversampling
      recover = false

      detail = 'smooth interface circles,'
    []

    [SmoothCircleIC_3D]
      type = Exodiff
      input = 'SmoothCircleIC_3D.i'
      exodiff = 'SmoothCircleIC_3D_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'

      detail = 'smooth interface spheres,'
    []

    [SmoothCirclesFromFile]
      type = Exodiff
      input = 'circles_from_file_ic.i'
      exodiff = 'circles_from_file_ic_out.e'
      restep = false # Not actually doing any timesteps

      detail = 'smooth interface circles specified from a file, and'
      # 0-step transient does not recover
      recover = false
    []

    [RndSmoothCircleIC]
      type = Exodiff
      input = 'RndSmoothCircleIC.i'
      exodiff = 'RndSmoothCircleIC_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'
      max_parallel = 1
      max_threads = 1

      detail = 'smooth interface circles with random noise.'
    []
  []

  [close_pack]
    requirement = "The system shall support phase-field initial conditions consisting of close pack "
                  "particle patterns:"

    [ClosePackIC]
      # Test close pack ic generator (2D)
      type = Exodiff
      input = ClosePackIC.i
      exodiff = ClosePackIC_out.e
      installation_type = in_tree
      # steady solve
      recover = false

      detail = 'in 2D, and'
    []

    [ClosePackIC_3D]
      # Test close pack ic generator (3D)
      type = Exodiff
      input = ClosePackIC_3D.i
      exodiff = ClosePackIC_3D_out.e
      capabilities = 'method!=dbg' # This test is too slow in debug
      valgrind = HEAVY

      detail = 'in 3D.'
    []
  []

  [boxes]
    requirement = "The system shall support phase-field initial conditions consiting of box "
                  "patterns:"

    [BoundingBoxIC]
      type = Exodiff
      input = 'BoundingBoxIC.i'
      exodiff = 'BoundingBoxIC_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'

      detail = 'bounding boxes,'
    []

    [RndBoundingBoxIC]
      type = Exodiff
      input = 'RndBoundingBoxIC.i'
      exodiff = 'RndBoundingBoxIC_out.e'
      scale_refine = 1
      valgrind = 'HEAVY'
      max_parallel = 1
      max_threads = 1
      recover = false # See #5207

      detail = 'bounding boxes with random noise,'
    []

    [MultiBoundingBoxIC1D]
      type = Exodiff
      input = MultiBoundingBoxIC1D.i
      exodiff = MultiBoundingBoxIC1D_out.e

      detail = 'multiple bounding boxes in 1D,'
    []

    [MultiBoundingBoxIC2D]
      type = Exodiff
      input = MultiBoundingBoxIC2D.i
      exodiff = MultiBoundingBoxIC2D_out.e

      detail = 'multiple bounding boxes in 2D, and'
    []

    [MultiBoundingBoxIC3D]
      type = Exodiff
      input = MultiBoundingBoxIC3D.i
      exodiff = MultiBoundingBoxIC3D_out.e

      detail = 'multiple bounding boxes in 3D.'
    []

    [IsolatedBoundingBoxIC_2D]
      type = Exodiff
      input = 'IsolatedBoundingBoxIC_2D.i'
      exodiff = 'IsolatedBoundingBoxIC_2D_out.e'

      detail = 'Diffused interface can be assigned for isolated bounding boxes in 2D,'
    []

    [IsolatedBoundingBoxIC_3D]
      type = Exodiff
      input = 'IsolatedBoundingBoxIC_3D.i'
      exodiff = 'IsolatedBoundingBoxIC_3D_out.e'

      detail = '3D,'
    []

    [NestedBoundingBoxIC_2D]
      type = Exodiff
      input = 'NestedBoundingBoxIC_2D.i'
      exodiff = 'NestedBoundingBoxIC_2D_out.e'

      detail = 'nested bounding boxes in 2D, and'
    []

    [NestedBoundingBoxIC_3D]
      type = Exodiff
      input = 'NestedBoundingBoxIC_3D.i'
      exodiff = 'NestedBoundingBoxIC_3D_out.e'

      detail = '3D.'
    []

    [IsolatedBoundingBoxIC_2D_Overlapping]
      type = RunException
      input = 'IsolatedBoundingBoxIC_2D_Overlapping.i'
      expect_err = 'Partially overlapping boxes are not allowed. Note that this includes the overlapping diffused interfaces. For nested boxes, use NestedBoundingBoxIC.C'

      detail = 'Using IsolatedBoundingBoxIC to create overlapping boxes will throw an error.'
    []
  []

  [BlockRestriction]
    type = Exodiff
    input = 'BlockRestriction.i'
    exodiff = 'BlockRestriction_out.e'
    requirement = 'The system shall be able to block-restrict crystal initial conditions.'
    issues = '#19193'
    design = 'BicrystalBoundingBoxICAction.md BicrystalCircleGrainICAction.md PolycrystalColoringICAction.md PolycrystalRandomICAction.md PolycrystalVoronoiVoidICAction.md Tricrystal2CircleGrainsICAction.md'
    recover = false
  []
[]
