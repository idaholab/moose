[Tests]
  issues = '#18022'
  design = 'syntax/Contact/index.md MechanicalContactConstraint.md ContactPressureAux.md'
  [multiple_pairs]
    type = Exodiff
    input = 'multiple_pairs.i'
    exodiff = 'multiple_pairs_out.e'
    abs_zero = 1.0e-8
    rel_err = 1.0e-5
    cli_args = "Postprocessors/active=''"
    requirement = 'The system shall set up node-face interactions between multiple surface pairs '
                  'using a contact action syntax.'
  []
  [multiple_pairs_cleanup]
    type = Exodiff
    input = 'multiple_pairs.i'
    exodiff = 'multiple_pairs_cleanup_out.e'
    abs_zero = 1.0e-8
    rel_err = 1.0e-5
    cli_args = "Postprocessors/active='' Contact/action_name/primary='20 20 101 20' "
               "Contact/action_name/secondary='10 101 20 101' "
               "Outputs/file_base=multiple_pairs_cleanup_out"
    requirement = 'The system shall set up node-face interactions between multiple surface pairs '
                  'using a contact action syntax and remove repeated contact pairs.'
  []
  [multiple_pairs_mortar]
    type = Exodiff
    input = 'multiple_pairs_mortar.i'
    exodiff = 'multiple_pairs_mortar_out.e'
    custom_cmp = multiple_pairs_mortar.cmp
    cli_args = "Postprocessors/active=''"
    map = False
    partial = True
    requirement = 'The system shall set up mortar interactions between multiple surface pairs using '
                  'a contact action syntax with distinct input blocks.'
  []
  [multiple_pairs_mortar_friction]
    type = Exodiff
    input = 'multiple_pairs_mortar_friction.i'
    exodiff = 'multiple_pairs_mortar_friction_out.e'
    custom_cmp = multiple_pairs_mortar_friction.cmp
    cli_args = "Postprocessors/active=''"
    map = False
    partial = True
    requirement = 'The system shall set up frictional mortar interactions between multiple surface '
                  'pairs using a contact action syntax with distinct input blocks.'
  []
  [three_hexagons_coarse]
    type = 'Exodiff'
    input = 'three_hexagons_coarse.i'
    exodiff = 'three_hexagons_coarse_out.e'
    requirement = 'The system shall assign and accumulate a single contact pressure auxiliary '
                  'variable for all contact pairs supplied to a single contact action object.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
  []
  [three_hexagons_coarse_automatic_pair_reference]
    type = 'Exodiff'
    issues = '#24122'
    input = 'three_hexagons_coarse.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_reference_out.e'
    cli_args = "Postprocessors/active='' Contact/contact_pressure/secondary='102 102 201' "
               "Contact/contact_pressure/primary='201 301 301' Outputs/hide=penetration "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_reference_out"
    requirement = 'The system shall assign and accumulate a single contact pressure auxiliary '
                  'variable for all contact pairs supplied to a single contact action object with a '
                  'different combination of primary-secondary pairs.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
  []
  [three_hexagons_coarse_automatic_pair]
    type = 'Exodiff'
    issues = '#24122'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method='CENTROID' Outputs/hide=penetration "
               "Postprocessors/active=''"
    requirement = 'The system shall be able to, if the user provides a reference distance, assign '
                  'primary-secondary contact pairs automatically.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    mesh_mode = 'replicated'
  []
  [three_hexagons_coarse_automatic_pair_node_proximity]
    type = 'Exodiff'
    issues = '#24609'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_node_proximity_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method=NODE "
               "Contact/contact_pressure/automatic_pairing_distance=0.002001 "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_node_proximity_out "
               "Outputs/hide=penetration"
    requirement = 'The system shall be able to, if the user provides a reference distance, assign '
                  'primary-secondary contact pairs automatically using proximity between nodes that '
                  'belong to arbitrary boundaries.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    mesh_mode = 'replicated'
  []
  [three_hexagons_coarse_automatic_pair_node_proximity_small_distance]
    type = 'Exodiff'
    issues = '#24609'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_node_proximity_small_distance_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method=NODE "
               "Contact/contact_pressure/automatic_pairing_distance=0.0013 "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_node_proximity_small_distance_"
               "out Outputs/hide=penetration"
    requirement = 'The system shall be able to, if the user provides a too-small reference distance, '
                  'avoid assigning primary-secondary contact pairs using proximity between nodes.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    mesh_mode = 'replicated'
  []
  [three_hexagons_coarse_automatic_pair_node_proximity_large_distance]
    type = 'Exodiff'
    issues = '#24609'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_node_proximity_large_distance_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method=NODE "
               "Contact/contact_pressure/automatic_pairing_distance=4.0 "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_node_proximity_large_distance_"
               "out Outputs/hide=penetration"
    requirement = 'The system shall be able to, if the user provides a very large reference '
                  'distance, assign primary-secondary contact pairs automatically using proximity '
                  'between nodes that belong to arbitrary boundaries.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    mesh_mode = 'replicated'
  []

  # These tests are duplicated to have both recover and distributed testing
  # Automatic pairing method requires a serial mesh and the checkpoint is distributed
  [three_hexagons_coarse_automatic_pair_with_distributed]
    type = 'Exodiff'
    issues = '#24122'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method='CENTROID' Outputs/hide=penetration "
               "Postprocessors/active=''"
    requirement = 'The system shall be able to, if the user provides a reference distance, assign '
                  'primary-secondary contact pairs automatically when using a distributed mesh.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    recover = 'false'
    mesh_mode = 'distributed'
    prereq = 'three_hexagons_coarse_automatic_pair'
  []
  [three_hexagons_coarse_automatic_pair_node_proximity_with_distributed]
    type = 'Exodiff'
    issues = '#24609'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_node_proximity_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method=NODE "
               "Contact/contact_pressure/automatic_pairing_distance=0.002001 "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_node_proximity_out "
               "Outputs/hide=penetration"
    requirement = 'The system shall be able to, if the user provides a reference distance, assign '
                  'primary-secondary contact pairs automatically using proximity between nodes that '
                  'belong to arbitrary boundaries when using a distributed mesh.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    recover = 'false'
    mesh_mode = 'distributed'
    prereq = 'three_hexagons_coarse_automatic_pair_node_proximity'
  []
  [three_hexagons_coarse_automatic_pair_node_proximity_small_distance_with_distributed]
    type = 'Exodiff'
    issues = '#24609'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_node_proximity_small_distance_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method=NODE "
               "Contact/contact_pressure/automatic_pairing_distance=0.0013 "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_node_proximity_small_distance_"
               "out Outputs/hide=penetration"
    requirement = 'The system shall be able to, if the user provides a too-small reference distance, '
                  'avoid assigning primary-secondary contact pairs using proximity between nodes when using a distributed mesh.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    recover = 'false'
    mesh_mode = 'distributed'
    prereq = 'three_hexagons_coarse_automatic_pair_node_proximity_small_distance'
  []
  [three_hexagons_coarse_automatic_pair_node_proximity_large_distance_with_distributed]
    type = 'Exodiff'
    issues = '#24609'
    input = 'three_hexagons_coarse_automatic_pair.i'
    exodiff = 'three_hexagons_coarse_automatic_pair_node_proximity_large_distance_out.e'
    cli_args = "Contact/contact_pressure/automatic_pairing_boundaries='102 201 301' "
               "Contact/contact_pressure/automatic_pairing_method=NODE "
               "Contact/contact_pressure/automatic_pairing_distance=4.0 "
               "Outputs/file_base=three_hexagons_coarse_automatic_pair_node_proximity_large_distance_"
               "out Outputs/hide=penetration"
    requirement = 'The system shall be able to, if the user provides a very large reference '
                  'distance, assign primary-secondary contact pairs automatically using proximity '
                  'between nodes that belong to arbitrary boundaries when using a distributed mesh.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    recover = 'false'
    mesh_mode = 'distributed'
    prereq = 'three_hexagons_coarse_automatic_pair_node_proximity_large_distance'
  []
  [three_hexagons_coarse_automatic_pair_error]
    type = 'RunException'
    issues = '#24122'
    input = 'three_hexagons_coarse_automatic_pair.i'
    expect_err = "'primary' and 'secondary' surfaces or a list of boundaries"
    requirement = 'The system shall generate an error if insufficient information to automatically '
                  'define contact surface pairs is provided.'
    allow_warnings = true
    # Automatic pairing method requires a serial mesh and the checkpoint is distributed
    mesh_mode = 'replicated'
  []
  [three_hexagons_coarse_various_actions]
    type = 'Exodiff'
    input = 'three_hexagons_coarse_various_actions.i'
    exodiff = 'three_hexagons_coarse_various_actions_out.e'
    requirement = 'The system shall assign and accumulate a single contact pressure auxiliary '
                  'variable for all contact pairs supplied to a distinct contact action object.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
  []
  [split_sidesets]
    type = 'Exodiff'
    input = 'split_sidesets.i'
    exodiff = 'split_sidesets_out.e'
    requirement = 'The system shall compute mechanical contact with multiple pairs, which are '
                  'defined with separate contact sidesets.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
  []
  [continuous_sidesets]
    type = 'Exodiff'
    input = 'continuous_sidesets.i'
    exodiff = 'continuous_sidesets_out.e'
    requirement = 'The system shall compute mechanical contact allowing a secondary surface to '
                  'enforce constraints with multiple primary surfaces.'
    abs_zero = 1.0e-4
    rel_err = 1.0e-4
    allow_warnings = true
  []
[]
