[Tests]
  design = 'constraints/ComputeDynamicFrictionalForceLMMechanicalContact.md '
           'auxkernels/MortarPressureComponentAux.md'
  issues = '#19671 #21461'
  [block-dynamics-aux-vel]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-vel_out.e'
    input = 'block-dynamics-aux-vel.i'
    rel_err = 5.0e-4
    abs_zero = 1.0e-5
    min_parallel = 1
    max_parallel = 4
    capabilities = 'ad_size>=50'
    requirement = 'The contact module shall be able to compute nodal weighted gap distance velocity values via a '
                  'mortar auxiliary kernel.'
    # ComputeDynamicWeightedGapLMMechanicalContact does not support recover
    recover = false
  []
  [block-dynamics-aux-wear]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-wear_out.e'
    input = 'block-dynamics-aux-wear.i'
    rel_err = 5.0e-4
    abs_zero = 1.0e-5
    min_parallel = 1
    max_parallel = 4
    capabilities = 'ad_size>=50 & method!=dbg'
    valgrind = 'none'
    restep = false # Issue #31054
    requirement = 'The contact module shall be able to compute nodal wear depth values in accordance with Archard '
                  'equation via a mortar auxiliary kernel.'
    # ComputeDynamicWeightedGapLMMechanicalContact does not support recover
    recover = false
  []
  [block-dynamics-aux-wear-vel]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-wear-vel_out.e'
    input = 'block-dynamics-aux-wear-vel.i'
    rel_err = 1.0e-3
    abs_zero = 5.0e-3
    min_parallel = 1
    max_parallel = 4
    capabilities = 'ad_size>=50 & method=opt'
    heavy = true
    valgrind = 'none'
    requirement = 'The contact module shall be able to compute nodal wear depth values in accordance with Archard '
                  'equation and the mortar gap velocity via mortar auxiliary kernels in the same '
                  'input file.'
  []
  [frictional-mortar-3d-status]
    type = 'Exodiff'
    exodiff = 'frictional-mortar-3d-status_out.e'
    input = 'frictional-mortar-3d-status.i'
    rel_err = 1.0e-3
    abs_zero = 1.0e-4
    capabilities = 'ad_size>=100'
    cli_args = 'AuxKernels/frictional_state/tangent_two=mortar_tangential_3d_lm'
    requirement = 'Contact module shall compute nodal frictional status of mortar surfaces for a '
                  'simple problem in which nodes are in stick and slip states.'
  []
  [frictional-mortar-3d-status-error]
    type = RunException
    input = 'frictional-mortar-3d-status.i'
    expect_err = 'tangent_two: MortarFrictionalStateAux auxiliary kernel requires a second tangent '
                 'Lagrange multiplier for three-dimensional problems'
    min_parallel = 1
    max_parallel = 2
    capabilities = 'ad_size>=100'
    requirement = 'The contact module shall be able to generate an informative error if the nodal frictional status '
                  'auxiliary kernel is not provided a second frictional Lagrange multiplier for a '
                  'three-dimensional problem.'
  []
  [block-dynamics-aux-fretting-wear-test-quick]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-fretting-wear-test-quick_out.e'
    input = 'block-dynamics-aux-fretting-wear-test.i'
    rel_err = 1.0e-3
    abs_zero = 1.0e-4
    min_parallel = 1
    max_parallel = 4
    capabilities = 'ad_size>=50'
    cli_args = 'Executioner/end_time=0.2 '
               'Outputs/file_base=block-dynamics-aux-fretting-wear-test-quick_out'
    requirement = 'The contact module shall be able to compute nodal wear depth values in accordance with Archard '
                  'equation and the mortar gap velocity via mortar auxiliary kernels while including '
                  'these computations in the definition of mortar normal contact constraints in an '
                  'asymmetric problem for a short simulation.'
    # ComputeDynamicFrictionalForceLMMechanicalContact does not support recover
    recover = false
  []
  [block-dynamics-aux-fretting-wear-test-quick-multiple-projections]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-fretting-wear-test-quick-multiple-projections_out.e'
    input = 'block-dynamics-aux-fretting-wear-test.i'
    rel_err = 1.0e-3
    abs_zero = 2.0e-4
    capabilities = 'ad_size>=50'
    map = False
    partial = True
    cli_args = 'Mesh/file=long-bottom-block-1elem-blocks-multiple-projections.e '
               'Executioner/end_time=0.2 '
               'Outputs/file_base=block-dynamics-aux-fretting-wear-test-quick-multiple-projections_out'
    requirement = 'The contact module shall be able to compute nodal wear depth values in accordance with Archard '
                  'equation and the mortar gap velocity via mortar auxiliary kernels while including '
                  'these computations in the definition of mortar normal contact constraints in an '
                  'asymmetric problem for a short simulation where secondary elements/nodes may '
                  'project in an oblique manner and where sidesets only span the possible contact '
                  'patch area. '
    # ComputeDynamicFrictionalForceLMMechanicalContact does not support recover
    recover = false
  []
  [block-dynamics-aux-fretting-wear-test-quick-multiple-projections-lowerd]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-fretting-wear-test-quick-multiple-projections-lowerd_out.e'
    input = 'block-dynamics-aux-fretting-wear-test.i'
    rel_err = 1.0e-3
    abs_zero = 1.0e-4
    min_parallel = 1
    max_parallel = 4
    capabilities = 'ad_size>=50'
    map = False
    partial = True
    cli_args = 'Mesh/file=long-bottom-block-1elem-blocks-multiple-projections-lowerd.e '
               'Executioner/end_time=0.2 Constraints/weighted_gap_lm/correct_edge_dropping=true '
               'Constraints/weighted_gap_lm/debug_mesh=true '
               'UserObjects/weighted_vel_uo/correct_edge_dropping=false UserObjects/weighted_vel_uo/debug_mesh=true '
               'Constraints/normal_x/correct_edge_dropping=true Constraints/normal_x/debug_mesh=true '
               'Constraints/normal_y/correct_edge_dropping=true Constraints/normal_y/debug_mesh=true '
               'Constraints/tangential_x/correct_edge_dropping=true '
               'Constraints/tangential_x/debug_mesh=true '
               'Constraints/tangential_y/correct_edge_dropping=true '
               'Constraints/tangential_y/debug_mesh=true '
               'AuxKernels/gap_vel/correct_edge_dropping=true AuxKernels/gap_vel/debug_mesh=true '
               'AuxKernels/worn_depth/correct_edge_dropping=true '
               'AuxKernels/worn_depth/debug_mesh=true '
               'Outputs/file_base=block-dynamics-aux-fretting-wear-test-quick-multiple-projections-lo'
               'werd_out'
    requirement = 'The contact module shall be able to compute nodal wear depth values in accordance with Archard '
                  'equation and the mortar gap velocity via mortar auxiliary kernels while including '
                  'these computations in the definition of mortar normal contact constraints in an '
                  'asymmetric problem for a short simulation where secondary elements/nodes may '
                  'project in an oblique manner due to wrap-around lower-dimensional domains and '
                  'sidesets. This test checks for the ability to discard oblique segments with a '
                  'default minimum projection angle and the fact that wrapping around the lowerd '
                  'mesh modifies contact geometry (normals, e.g.) and this has an impact on the '
                  'contact force direction at the geometry discontinuity.'
    # ComputeDynamicFrictionalForceLMMechanicalContact does not support recover
    recover = false
  []
  [block-dynamics-aux-fretting-wear-test-action-quick]
    type = 'Exodiff'
    exodiff = 'block-dynamics-aux-fretting-wear-test-action-quick_out.e'
    input = 'block-dynamics-aux-fretting-wear-test-action.i'
    rel_err = 1.0e-3
    abs_zero = 5.0e-4
    min_parallel = 1
    max_parallel = 4
    capabilities = 'ad_size>=50'
    map = False
    partial = True
    cli_args = 'Executioner/end_time=0.15 '
               'Outputs/file_base=block-dynamics-aux-fretting-wear-test-action-quick_out'
    requirement = 'The contact module shall be able to compute nodal wear depth values in accordance with Archard '
                  'equation and the mortar gap velocity via mortar auxiliary kernels while including '
                  'these computations in the definition of mortar normal contact constraints in an '
                  'asymmetric problem for a short simulation using the contact action.'
    # ComputeDynamicFrictionalForceLMMechanicalContact created by action does not support recover
    recover = false
  []
  [block-dynamics-aux-fretting-wear-test-projection_angle]
    type = 'Exodiff'
    exodiff = 'mortar_segment_mesh.e'
    input = 'block-dynamics-aux-fretting-wear-test-projection_angle.i'
    rel_err = 1.0e-3
    abs_zero = 1.0e-4
    max_parallel = 1
    capabilities = 'ad_size>=50'
    map = False
    partial = True
    # Only mesh output, no transient steps taken
    recover = false
    restep = false
    requirement = 'The system shall allow for a user controllable input such that the mortar segment '
                  'mesh does not contain segments built from oblique projections. Therefore, the '
                  'system shall generate many segments from oblique projections if a very small '
                  'minimum projection angle is chosen. '
  []
  [pressure-aux-frictionless]
    type = CSVDiff
    input = 'pressure-aux-frictionless.i'
    csvdiff = 'pressure-aux-frictionless_out_normal_lm_0011.csv'
    abs_zero = 1.0e-4
    capabilities = 'ad_size>=50'
    mesh_mode = 'REPLICATED'
    requirement = 'The system shall produce the correct normal contact pressure '
                  'value for frictionless mortar contact when using an auxiliary kernel.'
  []
  [pressure-aux-frictionless-3d]
    type = CSVDiff
    input = 'pressure-aux-frictionless-3d.i'
    csvdiff = 'pressure-aux-frictionless-3d_out_normal_lm_0003.csv'
    abs_zero = 1.0e-4
    capabilities = 'ad_size>=150'
    mesh_mode = 'REPLICATED'
    requirement = 'The system shall be able to  produce the correct normal contact pressure '
                  'value in 3D for frictionless mortar contact when using an auxiliary kernel.'
  []
  [pressure-aux-friction]
    type = CSVDiff
    input = 'pressure-aux-friction.i'
    csvdiff = 'pressure-aux-friction_out_tangent_lm_0011.csv'
    abs_zero = 1.0e-4
    capabilities = 'ad_size>=50'
    mesh_mode = 'REPLICATED'
    requirement = 'The system shall be able to produce the correct tangential contact pressure '
                  'value for frictional mortar contact when using an auxiliary kernel.'
  []
  [pressure-aux-friction-3d]
    type = CSVDiff
    input = 'pressure-aux-friction-3d.i'
    csvdiff = 'pressure-aux-friction-3d_out_tangent2_lm_0003.csv'
    abs_zero = 1.0e-4
    capabilities = 'ad_size>=150'
    mesh_mode = 'REPLICATED'
    requirement = 'The system shall be able to produce the correct tangential contact pressure '
                  'value in 3D for frictional mortar contact when using an auxiliary kernel.'
  []
[]
