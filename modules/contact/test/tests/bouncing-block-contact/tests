# An explanation and results for the full runs of these inputs files are given in the contact documentation

[Tests]
  design = 'Constraints/index.md'
  issues = '#13080 #14454'
  [reduced_active_set]
    requirement = 'The system shall be able to solve frictionless mechanical contact using a reduced '
                  'active nonlinear function set scheme (RANFS) in conjunction with a node-face '
                  'geometric discretization. The RANFS scheme shall be'
    [ranfs-project-svd]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-project-svd.e'
      absent_out = '[1-9]+[0-9]* of 16 singular values'
      expect_out = '0 of 16 singular values'
      detail = 'nonsingular both with bounds projection and'
      cli_args = 'Outputs/file_base=ranfs-project-svd -pc_type svd -pc_svd_monitor'
    []
    [ranfs-dont-project-svd]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-dont-project-svd.e'
      detail = 'without bounds projection and be'
      cli_args = 'Outputs/file_base=ranfs-dont-project-svd Executioner/line_search=none -pc_type svd '
                 '-pc_svd_monitor'
      restep = false # Restep will output more timesteps with output on nonlinear
    []
    [ranfs-project-amg]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-project-amg.e'
      detail = 'solvable with amg both with bounds projection'
      cli_args = 'Outputs/file_base=ranfs-project-amg'
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
    []
    [ranfs-dont-project-amg]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-dont-project-amg.e'
      detail = 'and without bounds projection.'
      cli_args = 'Outputs/file_base=ranfs-dont-project-amg Executioner/line_search=none'
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
    []
    [ranfs-jacobian]
      type = 'PetscJacobianTester'
      input = 'frictionless-nodal-reduced-active-set.i'
      difference_tol = 1e-7
      cli_args = "Outputs/active='' Executioner/line_search=none"
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
      detail = "The system's RANFS scheme shall have a perfect Jacobian for mechanical contact that "
               "only has one non-zero normal component"
    []
    [full-bouncing-block]
      type = 'Exodiff'
      input = 'bouncing-block-ranfs.i'
      exodiff = 'bouncing-block-ranfs_exo.e'
      detail = 'The system shall be able to detect when a secondary node is ping-ponging back and '
               'forth between different primary faces and consequently tie the locations of the '
               'secondary and corresponding primary node using Lagrange Multipliers corresponding to '
               'equality constraints, e.g. more RANFS'
      cli_args = "Postprocessors/active=''"
      custom_cmp = 'bouncing-block-ranfs.cmp'
      heavy = true
    []
    [bouncing-block]
      type = 'Exodiff'
      input = 'bouncing-block-ranfs.i'
      exodiff = 'bouncing-block-coarse.e'
      abs_zero = 1e-9
      detail = 'The system shall be able to solve a smaller model of the full ping-ponging problem'
      cli_args = "Postprocessors/active='' Mesh/file=long-bottom-block-no-lower-d-coarse.e "
                 "Executioner/end_time=100 Outputs/file_base=bouncing-block-coarse"
    []
  []
  [tied_node]
    requirement = 'Using a RANFS scheme with Lagrange multipliers corresponding to equality '
                  'constraints the system shall be able to '
    [physics]
      type = 'Exodiff'
      input = tied-nodes.i
      exodiff = 'tied-nodes_exo.e'
      absent_out = '[1-9]+[0-9]* of 16 singular values'
      expect_out = '0 of 16 singular values'
      detail = 'tie nodes together and'
      allow_test_objects = True
      cli_args = '-pc_type svd -pc_svd_monitor'
    []
    [jac]
      type = 'PetscJacobianTester'
      input = tied-nodes.i
      cli_args = "Outputs/active=''"
      detail = 'have a perfect Jacobian'
      allow_test_objects = True
    []
  []
  [weighted_gap]
    requirement = 'The system shall support a variationally consistent weighted gap implementation '
                  'of the zero-penetration contact constraint'
    issues = '#16961'
    [equal_order]
      type = 'Exodiff'
      input = frictionless-weighted-gap.i
      exodiff = 'frictionless-weighted-gap_out.e'
      detail = 'using equal, first order bases for displacements and the lagrange multiplier'
      cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 "
                 "Postprocessors/active=''"
    []
    [mixed_order]
      type = 'Exodiff'
      input = frictionless-weighted-gap-mixed-basis.i
      exodiff = 'frictionless-weighted-gap-mixed-basis_out.e'
      detail = 'using a second order basis for displacements and a first order basis for the '
               'lagrange multiplier'
      cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 "
                 "Postprocessors/active=''"
      capabilities = 'ad_size>=73'
      restep = false # Issue #31054
    []
    [equal_order_edge_dropping]
      type = 'Exodiff'
      input = frictionless-weighted-gap.i
      exodiff = 'frictionless-weighted-gap-edge-dropping_out.e'
      detail = 'using equal, first order bases for displacements and the lagrange multiplier with '
               'correct edge dropping'
      cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e "
                 "Constraints/weighted_gap_lm/correct_edge_dropping=true Executioner/end_time=50 "
                 "Outputs/exodus=true Outputs/file_base=frictionless-weighted-gap-edge-dropping_out "
                 "Postprocessors/active=''"
    []
    [penalty]
      type = 'Exodiff'
      input = frictionless-penalty-weighted-gap.i
      exodiff = 'frictionless-penalty-weighted-gap_out.e'
      restep = false # Test is prescribed to abort on failed timestep
      detail = 'using a first order basis for displacements and penalty multiplication times the '
               'negative gap distance to form the contact force.'
      cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 "
                 "Postprocessors/active=''"
    []
    [penalty_action]
      type = 'Exodiff'
      input = frictionless-penalty-weighted-gap-action.i
      exodiff = 'frictionless-penalty-weighted-gap-action_out.e'
      detail = 'using a first order basis for displacements and penalty multiplication times the '
               'negative gap distance to form the contact force via the contact action.'
      map = true
      restep = false # Test is prescribed to abort on failed timestep
      cli_args = "Mesh/mesh_file/file=long-bottom-block-1elem-blocks-coarse.e "
                 "Executioner/end_time=50 Postprocessors/active=''"
      custom_cmp = 'frictionless-penalty-weighted-gap-action.cmp'
    []
  []
  [very_parallel_penalty]
    requirement = 'The system shall be able to communicate semilocal weighted gaps back to any '
                  'process that contributed to computing said weighted gaps.'
    issues = '#21329'
    type = 'Exodiff'
    input = frictionless-penalty-weighted-gap.i
    exodiff = 'parallel-frictionless-penalty-weighted-gap_out.e'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 "
               "Postprocessors/active='' "
               "Outputs/file_base=parallel-frictionless-penalty-weighted-gap_out"
    min_parallel = 13
    restep = false # Test is prescribed to abort on failed timestep
  []
  [very_parallel_frictional_penalty]
    requirement = 'The system shall be able to communicate semilocal weighted gaps and velocities '
                  'back to any process that contributed to computing said weighted quantities. We '
                  'check against the serial numerical results.'
    issues = '#21329'
    type = 'Exodiff'
    input = frictional-penalty-weighted-vel.i
    # this test does not converge, see #30642
    should_crash = true
    exodiff = 'parallel-frictional-penalty-weighted-vel_out.e'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 "
               "Postprocessors/active='' "
               "Outputs/file_base=parallel-frictional-penalty-weighted-vel_out"
    min_parallel = 13
    restep = false # Test is prescribed to abort on failed timestep
  []
  [weighted_vel_pdass]
    requirement = 'The system shall support a variationally consistent mortar frictional constraints '
                  'with dual bases'
    issues = '#17495'

    [verbose]
      type = 'Exodiff'
      input = frictional-nodal-min-normal-lm-mortar-pdass-tangential-lm-mortar-disp.i
      exodiff = 'frictional-nodal-min-normal-lm-mortar-pdass-tangential-lm-mortar-disp_out.e'
      detail = 'using verbose input file'
      cli_args = "Postprocessors/active=''"
      abs_zero = 5e-9
    []
    [action]
      type = 'Exodiff'
      input = frictional-nodal-min-normal-lm-mortar-pdass-tangential-lm-mortar-action.i
      exodiff = 'frictional-nodal-min-normal-lm-mortar-pdass-tangential-lm-mortar-action_out.e'
      detail = 'using the contact action'
      cli_args = "Postprocessors/active=''"
      custom_cmp = 'frictional-nodal-min-normal-lm-mortar-pdass-tangential-lm-mortar-action.cmp'
    []
  []
  [split_secondary]
    type = 'Exodiff'
    input = 'variational-frictional.i'
    exodiff = 'variational-frictional_out.e'
    cli_args = 'Outputs/hide=procid'
    requirement = 'The system shall be able to solve a frictional, variationally consistent, mortar '
                  'mechanical contact problem in which the secondary side of the contact interface '
                  'is split between processes when run in parallel.'
    capabilities = 'method!=dbg'
    valgrind = 'heavy'
  []
  [split_secondary_action]
    type = 'Exodiff'
    input = 'variational-frictional-action.i'
    exodiff = 'variational-frictional-action_exodus.e'
    cli_args = 'Outputs/hide=procid'
    requirement = 'The system shall be able to solve a frictional, variationally consistent, mortar '
                  'mechanical contact problem in which the secondary side of the contact interface '
                  'is split between processes when run in parallel while using the contact action to '
                  'build the set of constraints, user objects, and application of generalized '
                  'forces.'
    capabilities = 'method!=dbg'
    custom_cmp = 'variational-frictional.cmp'
    valgrind = 'heavy'
  []
  [mixed_inactive_nodes]
    type = 'Exodiff'
    input = 'mixed-weighted-gap-swapped.i'
    exodiff = 'mixed-weighted-gap-swapped_out.e'
    requirement = 'The system shall not attempt to zero Lagrange multipliers that do not exist on '
                  'inactive nodes.'
    valgrind = 'heavy'
    capabilities = 'ad_size>=100 & method!=dbg'
  []
[]
