[Tests]
  issues = '#16809 #19472'
  design = 'navier_stokes/wcnsfv.md'
  [transient]
    type = 'Exodiff'
    input = 2d-transient.i
    exodiff = 2d-transient_out.e
    capabilities = 'method!=dbg'
    cli_args = "AuxVariables/inactive='mixing_length'"
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation.'
    abs_zero = 1e-9
    recover = false # see #19126
    valgrind = HEAVY
  []
  [transient-action]
    type = 'Exodiff'
    input = 2d-transient-action.i
    exodiff = 2d-transient-action_out.e
    capabilities = 'method!=dbg'
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation using the NSFV action syntax.'
    abs_zero = 1e-9
    recover = false # see #19126
    valgrind = HEAVY
  []
  [transient-physics]
    type = 'Exodiff'
    input = 2d-transient-physics.i
    exodiff = 2d-transient-physics_out.e
    capabilities = 'method!=dbg'
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation using the WCNSFV Physics syntax.'
    abs_zero = 1e-9
    recover = false # see #19126
    valgrind = HEAVY
  []
  [turbulence]
    type = 'Exodiff'
    input = 2d-transient.i
    exodiff = 2d-turbulent.e
    cli_args = "FVKernels/inactive='' AuxKernels/inactive='' Outputs/file_base='2d-turbulent'"
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation and a mixing length turbulence model.'
    mesh_mode = REPLICATED
    abs_zero = 1e-9
    recover = false # see #19126
    valgrind = HEAVY
    # You can draw out the stencil. For Rhie-Chow we interpolate element 'a' coefficients
    # to a face. Each element 'a' coefficient will be dependent on face computations of rho
    # and the eddy viscosity. For rho that means we need one layer of neighbor dofs from
    # pressure and temperature. For the eddy viscosity we require face gradient of velocity.
    # That means we need one layer of neighbor cell gradients, which in turn means we need
    # *two* layers of neighbor dofs from velocity. When you calculate it all out, you see
    # that we require 52 entries in our sparsity pattern for a face 'a' coefficient (which
    # is used in computation of the Rhie-Chow velocity required for the advection kernels)
    # Unfortunately I need to further bump this by one because I have a bug in my metaphysicl
    # debugging assertions (which I'm fixing)
    capabilities = 'method!=dbg & ad_size>=53'
  []
  [turbulence-action]
    type = 'Exodiff'
    input = 2d-transient-action.i
    exodiff = 2d-turbulent-action.e
    cli_args = "Modules/NavierStokesFV/turbulence_handling='mixing-length' "
               "Modules/NavierStokesFV/mixing_length_delta='0.5' "
               "Modules/NavierStokesFV/mixing_length_walls='top' "
               "Modules/NavierStokesFV/mixing_length_aux_execute_on='initial' "
               "Modules/NavierStokesFV/mixing_length_two_term_bc_expansion=true "
               "Outputs/file_base='2d-turbulent-action'"
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation and a mixing length turbulence model using the NSFV action syntax.'
    mesh_mode = REPLICATED
    abs_zero = 1e-9
    recover = false # see #19126
    valgrind = HEAVY
    # You can draw out the stencil. For Rhie-Chow we interpolate element 'a' coefficients
    # to a face. Each element 'a' coefficient will be dependent on face computations of rho
    # and the eddy viscosity. For rho that means we need one layer of neighbor dofs from
    # pressure and temperature. For the eddy viscosity we require face gradient of velocity.
    # That means we need one layer of neighbor cell gradients, which in turn means we need
    # *two* layers of neighbor dofs from velocity. When you calculate it all out, you see
    # that we require 52 entries in our sparsity pattern for a face 'a' coefficient (which
    # is used in computation of the Rhie-Chow velocity required for the advection kernels)
    # Unfortunately I need to further bump this by one because I have a bug in my metaphysicl
    # debugging assertions (which I'm fixing)
    capabilities = 'method!=dbg & ad_size>=53'
  []
  [transient-jac]
    type = 'PetscJacobianTester'
    input = 2d-transient.i
    run_sim = True
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation and show a perfect Jacobian.'
    difference_tol = 1e-7
    cli_args = 'Mesh/gen/nx=2 Mesh/gen/ny=2 Executioner/num_steps=1'
  []
  [turbulence-jac]
    type = 'PetscJacobianTester'
    input = 2d-transient.i
    run_sim = True
    difference_tol = 1e-7
    cli_args = "Mesh/gen/nx=2 Mesh/gen/ny=2 Executioner/num_steps=1 FVKernels/inactive='' "
               "AuxKernels/inactive='' Outputs/file_base='2d-turbulent'"
    requirement = 'The system shall be able to solve for a transient 2D channel case with a weakly compressible formulation and a mixing length turbulence model and show a perfect Jacobian.'
    mesh_mode = REPLICATED
    # You can draw out the stencil. For Rhie-Chow we interpolate element 'a' coefficients
    # to a face. Each element 'a' coefficient will be dependent on face computations of rho
    # and the eddy viscosity. For rho that means we need one layer of neighbor dofs from
    # pressure and temperature. For the eddy viscosity we require face gradient of velocity.
    # That means we need one layer of neighbor cell gradients, which in turn means we need
    # *two* layers of neighbor dofs from velocity. When you calculate it all out, you see
    # that we require 52 entries in our sparsity pattern for a face 'a' coefficient (which
    # is used in computation of the Rhie-Chow velocity required for the advection kernels)
    # Unfortunately I need to further bump this by one because I have a bug in my metaphysicl
    # debugging assertions (which I'm fixing)
    capabilities = 'ad_size>=53'
  []
[]
