[Tests]
  issues = '#22995'
  design = 'ParameterMeshOptimization.md ParameterMeshFunction.md'
  [mesh_source]
    requirement = 'The system shall be able to perform inverse optimization on a source that is represented by a mesh by '
    [mesh]
      type = CheckFiles
      input = parameter_mesh.i
      cli_args = '--mesh-only'
      check_files = parameter_mesh_in.e
      recover = False
      detail = 'creating the source mesh;'
    []
    [constant]
      type = Exodiff
      input = main.i
      cli_args = 'OptimizationReporter/parameter_families=MONOMIAL OptimizationReporter/parameter_orders=CONSTANT
                  forward:Functions/src_func/family=MONOMIAL forward:Functions/src_func/order=CONSTANT
                  forward:AuxVariables/source/family=MONOMIAL forward:AuxVariables/source/order=CONSTANT
                  adjoint:Functions/src_func/family=MONOMIAL adjoint:Functions/src_func/order=CONSTANT
                  Outputs/file_base=main_constant_out'
      exodiff = main_constant_out_forward0.e
      prereq = 'mesh_source/mesh'
      max_threads = 1 # Optimize executioner does not support multiple threads
      detail = 'performing the inverse optimization with a piece-wise source;'
    []
    [linear]
      type = Exodiff
      input = main.i
      exodiff = main_out_forward0.e
      prereq = 'mesh_source/mesh'
      max_threads = 1 # Optimize executioner does not support multiple threads
      detail = 'performing the inverse optimization with a linearly varying source;'
    []
    [second]
      type = Exodiff
      input = main.i
      cli_args = 'OptimizationReporter/parameter_orders=SECOND
                  forward:Functions/src_func/order=SECOND
                  adjoint:Functions/src_func/order=SECOND
                  Outputs/file_base=main_second_out'
      exodiff = main_second_out_forward0.e
      prereq = 'mesh_source/mesh'
      max_threads = 1 # Optimize executioner does not support multiple threads
      detail = 'performing the inverse optimization with a quadratically varying source;'
    []
    [bounded]
      type = Exodiff
      input = main.i
      cli_args = 'OptimizationReporter/upper_bounds=100 OptimizationReporter/lower_bounds=0
                  Executioner/tao_solver=taoblmvm -tao_ls_type unit
                  Outputs/file_base=main_bounded_out'
      exodiff = main_bounded_out_forward0.e
      max_threads = 1 # Optimize executioner does not support multiple threads
      prereq = 'mesh_source/mesh'
      detail = 'performing the inverse optimization with bounds;'
    []
    [auto_adjoint]
      type = Exodiff
      input = main_auto_adjoint.i
      exodiff = main_auto_adjoint_out_forward0.e
      prereq = 'mesh_source/mesh'
      max_threads = 1 # Optimize executioner does not support multiple threads
      detail = 'performing the inverse optimization with an automatically computed adjoint;'
    []
    [restartMesh]
      type = CheckFiles
      input = parameter_mesh_restart.i
      prereq = 'mesh_source/linear'
      check_files = parameter_mesh_restart_out.e
      recover = False
      detail = 'creating a mesh with initial conditions;'
    []
    [linearRestart]
      type = CSVDiff
      input = main_linearRestart.i
      csvdiff = main_linearRestart_out_optInfo_0001.csv
      abs_zero = 1e-4
      prereq = 'mesh_source/restartMesh'
      max_threads = 1 # Optimize executioner does not support multiple threads
      detail = 'performing the inverse optimization with exact solution initial conditions that will make it converge in a single step;'
    []
  []

  [mismatch_errors]
    requirement = 'The system shall throw an error when performing inverse optimization on mesh-based parameters if there is a mismatch between the number of parameters and the number of'
    [meshes]
      type = RunException
      input = main.i
      cli_args = 'OptimizationReporter/parameter_meshes=\'parameter_mesh_in.e parameter_mesh_in.e\''
      max_threads = 1 # Optimize executioner does not support multiple threads
      expect_err = 'There must be a mesh associated with each group of parameters\.'
      detail = 'meshes;'
    []
    [family]
      type = RunException
      input = main.i
      cli_args = 'OptimizationReporter/parameter_families=\'LAGRANGE LAGRANGE\''
      max_threads = 1 # Optimize executioner does not support multiple threads
      expect_err = 'There must be a family associated with each group of parameters\.'
      detail = 'finite-element families;'
    []
    [order]
      type = RunException
      input = main.i
      cli_args = 'OptimizationReporter/parameter_orders=\'FIRST FIRST\''
      max_threads = 1 # Optimize executioner does not support multiple threads
      expect_err = 'There must be an order associated with each group of parameters\.'
      detail = 'finite-element orders;'
    []
    [initial_condition]
      type = RunException
      input = main.i
      cli_args = 'OptimizationReporter/initial_condition=\'0; 0\''
      max_threads = 1 # Optimize executioner does not support multiple threads
      expect_err = 'There must be a vector of initial_condition per parameter group\.'
      detail = 'initial conditions;'
    []
  []

  [interpolation_errors]
    requirement = 'The system shall throw an error when performing inverse optimization on mesh-based parameters if the parameter function spaces do not match the space defined in the'
    [forward]
      type = RunException
      input = main.i
      cli_args = 'forward:Functions/src_func/order=SECOND'
      expect_err = 'Size of parameter vector \(\d+\) does not match number of degrees of freedom in mesh \(\d+\)\.'
      max_threads = 1 # Optimize executioner does not support multiple threads
      prereq = 'mesh_source/mesh'
      detail = 'forward problem;'
    []
    [adjoint]
      type = RunException
      input = main.i
      cli_args = 'adjoint:Functions/src_func/order=SECOND'
      expect_err = 'The gradient for parameter \w+ has changed, expected \d+ versus \d+\.'
      max_threads = 1 # Optimize executioner does not support multiple threads
      prereq = 'mesh_source/mesh'
      detail = 'adjoint problem;'
    []
  []
[]
