[Tests]
  design = 'brayton_cycle.md'
  issues = '#20196'

  [open]
    requirement = 'The system shall be able to model an open Brayton cycle'
    type = CSVDiff
    input = 'open_brayton_cycle.i'
    csvdiff = 'open_brayton_cycle.csv'
    abs_zero = 1e-10
    rel_err = 1e-5
    max_parallel = 1
    restep = false # Test is prescribed to abort on failed timestep
    cli_args = 'motor_ramp_up_duration=1 motor_ramp_down_duration=1 post_motor_time=1'
  []

  [closed]
    requirement = 'The system shall be able to model a closed Brayton cycle'
    type = CSVDiff
    input = 'closed_brayton_cycle.i'
    csvdiff = 'closed_brayton_cycle.csv'
    abs_zero = 1e-10
    rel_err = 1e-5
    max_parallel = 1
    max_threads = 1 # fails first time step after round-off error change
    restep = false # Test is prescribed to abort on failed timestep
    cli_args = 'Executioner/abort_on_solve_fail=true Components/shaft/scaling_factor_omega=1e-1 motor_ramp_up_duration=1 motor_ramp_down_duration=1 post_motor_time=1'
    # We change the shaft variable scaling factor to prevent failing a time step
  []

  [closed_full]
    requirement = 'The system shall be able to model a closed Brayton cycle for over 300s'
    type = CSVDiff
    input = 'closed_brayton_cycle.i'
    cli_args = 'Outputs/csv/file_base=brayton_closed Executioner/dt=1'
    csvdiff = 'brayton_closed.csv'
    abs_zero = 1e-10
    rel_err = 1e-5
    max_parallel = 1
    heavy = true
    method = 'opt'
  []

  [recuperated]
    type = RunApp
    input = 'recuperated_brayton_cycle.i'
    check_input = true
    max_parallel = 1
    recover = false
    requirement = 'The system shall be able to model an open recuperated Brayton cycle'
  []
[]
