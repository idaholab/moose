[Tests]
  design = 'meshgenerators/CoreMeshGenerator.md'
  issues = '#19949 #25396'
  [square]
    requirement = 'The system shall generate a full 3D square core mesh with 3 pin types and 2 assembly types'
    type = 'Exodiff'
    input = 'core_square.i'
    cli_args = "Outputs/file_base=core_in"
    exodiff = 'core_in.e'
    recover = false
  []
  [square_rid_as_block_name]
    requirement = 'The system shall generate a 3D core mesh with 3 pin types and 2 assembly types, with separate block names for each region ID in the mesh'
    type = 'Exodiff'
    input = 'core_square.i'
    cli_args = "Mesh/rmp/region_id_as_block_name=true
                Outputs/file_base=core_rid_as_block_name"
    exodiff = 'core_rid_as_block_name.e'
    recover = false
  []
  [square_metadata]
    requirement = 'The system shall print out reactor-related metadata to console output for a full 3D square core mesh with 3 pin types and 2 assembly types'
    type = 'RunApp'
    input = 'core_square.i'
    cli_args = "Mesh/cmg/show_rgmb_metadata=true"
    expect_out = 'Global metadata.+mesh_dimensions: 3.+mesh_geometry: Square.+axial_mesh_sizes: 1.+axial_mesh_intervals: 1.+Core-level metadata.+cmg.+assembly_names: amg2, amg1.+assembly_lattice:.+1, 0.+0, 1.+Assembly-level metadata.+amg2.+assembly_type: 2.+pin_names: pin3, pin1, pin2.+pin_lattice:.+0, 1.+1, 2.+Assembly-level metadata.+amg1.+assembly_type: 1.+pin_names: pin2.+pin_lattice:.+0, 0.+0, 0.+Pin-level metadata.+pin3.+pin_type: 3.+background_region_id: 4.+Pin-level metadata.+pin1.+pin_type: 1.+background_region_id: 2.+Pin-level metadata.+pin2.+pin_type: 2.+background_region_id: 2'
  []
  [square_metadata_jsondiff]
    requirement = 'The system shall output reactor-related metadata for a full 3D square core mesh in mesh generation mode'
    type = 'JSONDiff'
    input = 'core_square.i'
    cli_args = 'Reporters/metadata/type=MeshMetaDataReporter
                Outputs/json_out/type=JSON
                Outputs/json_out/execute_on=FINAL
                Outputs/json_out/execute_system_information_on=none
                Outputs/json_out/file_base=core_square_datadriven_out'
    jsondiff = 'core_square_datadriven_out.json'
    # Ignoring data that is only generated when the mesh is actually constructed, to compare with data-driven
    ignored_regex_items = '.*/.*/.*_meta|flat_side_up|control_drum_angles|control_drum_positions|quad_center_block_id|pin_block_name_map|pin_region_id_map|position_file_name|peripheral_modifier_compatible|pattern_size|.*_trimmability|name_id_map|bypass_meshgen|interface_boundary_ids|interface_boundaries|flexible_assembly_stitching'
    recover = false
    allow_test_objects = true
  []
  [square_metadata_bypass_meshgen]
    requirement = 'The system shall output reactor-related metadata for a full 3D square core mesh in data driven mode with another mesh generator as the data driven generator'
    type = 'JSONDiff'
    input = 'core_square_datadriven.i'
    cli_args = 'Mesh/inactive=transform'
    jsondiff = 'core_square_datadriven_out.json'
    allow_test_objects = true
    recover = false
  []
  [square_metadata_bypass_meshgen_append_generator]
    requirement = 'The system shall output reactor-related metadata for a full 3D square core mesh in data driven mode with an additional mesh generator appended to the data driven generator'
    type = 'JSONDiff'
    input = 'core_square_datadriven.i'
    jsondiff = 'core_square_datadriven_out.json'
    allow_test_objects = true
    recover = false
  []
  [bypass_meshgen_err]
    requirement = 'The system shall throw an error in data driven mode with an RGMB mesh as the data driven generator'
    type = 'RunException'
    input = 'core_square_datadriven.i'
    cli_args = "Mesh/data_driven_generator=cmg"
    expect_err = 'A mesh was not generated by this generator'
    allow_test_objects = true
  []
  [core_shared_assembly_ids]
    requirement = 'The system shall throw an error if a core is composed of different assemblies with a shared assembly type id'
    type = 'RunException'
    input = 'core_square.i'
    cli_args = "Mesh/amg2/assembly_type=1"
    expect_err = 'Constituent assemblies have shared assembly_type ids but different names.'
  []
  [core_shared_pin_ids]
    requirement = 'The system shall throw an error if a core is composed of different pins with a shared pin type id'
    type = 'RunException'
    input = 'core_square.i'
    cli_args = "Mesh/pin2/pin_type=1
                Mesh/amg2/inputs='pin3 pin1'
                Mesh/amg2/pattern='0 1; 1 0'"
    expect_err = 'Constituent pins within assemblies have shared pin_type ids but different names.'
  []
  [square_mixed_background_duct]
    requirement = 'The system shall generate a full 3D square core mesh with an assembly that has a background and duct region and another with no duct/background region'
    type = 'Exodiff'
    input = 'core_square.i'
    cli_args = "Mesh/pin1/pitch=1.0
                Mesh/pin1/duct_halfpitch='0.38'
                Mesh/pin3/pitch=1.0
                Mesh/amg2/inputs='pin3 pin1'
                Mesh/amg2/pattern='0 1; 1 0'
                Mesh/amg2/background_region_id='6'
                Mesh/amg2/background_intervals=1
                Mesh/amg2/duct_region_ids='7'
                Mesh/amg2/duct_halfpitch='1.2'
                Mesh/amg2/duct_intervals=1
                Mesh/inactive='translate'
                Outputs/file_base=core_square_mixed_background_duct"
    exodiff = 'core_square_mixed_background_duct.e'
    recover = false
  []
  [empty]
    requirement = 'The system shall generate a 3D square core mesh with empty lattice positions'
    type = 'Exodiff'
    input = 'core_square.i'
    cli_args = "Mesh/cmg/pattern='2 1; 1 0'
                Outputs/file_base=core_empty_in"
    exodiff = 'core_empty_in.e'
    recover = false
  []
  [empty_first_pos]
    requirement = 'The system shall generate a 3D square core mesh with empty lattice positions defined as the first input name'
    type = 'Exodiff'
    input = 'core_square.i'
    cli_args = "Mesh/cmg/inputs='empty amg1 amg2'
                Mesh/cmg/pattern='0 1; 1 2'
                Outputs/file_base=core_empty_in"
    exodiff = 'core_empty_in.e'
    recover = false
  []
  [err_all_empty]
    requirement = 'The system shall throw an error if all input assembly names are defined as dummy assemblies'
    type = 'RunException'
    input = 'core_square.i'
    cli_args = "Mesh/cmg/inputs='empty'
                Mesh/cmg/pattern='0 0; 0 0'"
    expect_err = 'At least one non-dummy assembly must be defined'
    recover = false
  []
  [hex]
    requirement = 'The system shall generate a 3D hexagonal core mesh with empty lattice positions and explicit block name specification'
    type = 'Exodiff'
    input = 'core_hex.i'
    cli_args = "Outputs/file_base=core_hex_in"
    exodiff = 'core_hex_in.e'
    recover = false
  []
  [hex_metadata]
    requirement = 'The system shall print out reactor-related metadata to console output for a 3D hexagonal core mesh with empty lattice positions and explicit block name specification'
    type = 'RunApp'
    input = 'core_hex.i'
    cli_args = "Mesh/cmg/show_rgmb_metadata=true
                Outputs/file_base=core_hex_in"
    expect_out = 'Global metadata.+mesh_dimensions: 3.+mesh_geometry: Hex.+axial_mesh_sizes: 1, 1.+axial_mesh_intervals: 1, 1.+Core-level metadata.+cmg.+assembly_names: amg1, amg2.+assembly_lattice:.+-1, 1.+1, 0, -1.+-1, 1.+Assembly-level metadata.+amg1.+assembly_type: 1.+pin_names: pin2.+pin_lattice:.+0, 0.+0, 0, 0.+0, 0.+Assembly-level metadata.+amg2.+assembly_type: 2.+pin_names: pin1, pin3.+pin_lattice:.+0, 0.+0, 1, 0.+0, 0.+Pin-level metadata.+pin2.+pin_type: 2.+background_region_id: 21, 121.+Pin-level metadata.+pin1.+pin_type: 1.+background_region_id: 12, 112.+Pin-level metadata.+pin3.+pin_type: 3.+background_region_id: 32, 132'
  []
  [hex_metadata_jsondiff]
    requirement = 'The system shall output reactor-related metadata for a full 3D hexagonal core mesh in mesh generation mode'
    type = 'JSONDiff'
    input = 'core_hex.i'
    cli_args = 'Reporters/metadata/type=MeshMetaDataReporter
                Outputs/json_out/type=JSON
                Outputs/json_out/execute_on=FINAL
                Outputs/json_out/execute_system_information_on=none
                Outputs/json_out/file_base=core_hex_datadriven_out'
    jsondiff = 'core_hex_datadriven_out.json'
    # Ignoring data that is only generated when the mesh is actually constructed, to compare with data-driven
    ignored_regex_items = '.*/.*/.*_meta|flat_side_up|control_drum_angles|control_drum_positions|quad_center_block_id|pin_block_name_map|pin_region_id_map|position_file_name|peripheral_modifier_compatible|pattern_size|.*_trimmability|name_id_map|bypass_meshgen|interface_boundary_ids|interface_boundaries|flexible_assembly_stitching'
    recover = false
    allow_test_objects = true
  []
  [hex_metadata_bypass_meshgen]
    requirement = 'The system shall output reactor-related metadata for a full 3D hexagonal core mesh in data driven mode and default to the data-driven generator mesh generator as the final generator'
    type = 'JSONDiff'
    input = 'core_hex_datadriven.i'
    jsondiff = 'core_hex_datadriven_out.json'
    allow_test_objects = true
    recover = false
  []
  [single_assembly_square_core]
    requirement = 'The system shall generate a full 3D square core mesh with 2 single assembly types'
    type = 'Exodiff'
    input = 'core_single_assembly.i'
    cli_args = "Mesh/inactive='rotate90'
                Mesh/rmp/geom='Square'
                Mesh/pin1/homogenized=false
                Mesh/pin1/num_sectors=2
                Mesh/pin1/region_ids='1 2 5'
                Mesh/pin1/ring_radii='0.2'
                Mesh/pin1/duct_halfpitch='0.68'
                Mesh/pin1/mesh_intervals='1 1 1'
                Mesh/pin2/homogenized=false
                Mesh/pin2/num_sectors=2
                Mesh/pin2/mesh_intervals='2'
                Mesh/pin2/quad_center_elements=true
                Mesh/cmg/pattern='1 0; 0 1'
                Mesh/translate/input=cmg
                Outputs/file_base=core_single_assembly_square"
    exodiff = 'core_single_assembly_square.e'
    recover = false
  []
  [single_assembly_hex_core_empty]
    requirement = 'The system shall generate a full 3D hexagonal core mesh with 2 single assembly types'
    type = 'Exodiff'
    input = 'core_single_assembly.i'
    cli_args = "Mesh/inactive='translate'
                Outputs/file_base=core_single_assembly_hex_empty"
    exodiff = 'core_single_assembly_hex_empty.e'
    recover = false
  []
  [duct_het_hex_core_empty]
    requirement = 'The system shall generate a full 3D hexagonal core mesh with 2 duct heterogeneous assembly types'
    type = 'Exodiff'
    input = 'core_single_assembly.i'
    cli_args = "Mesh/inactive='translate'
                Mesh/pin1/homogenized=false
                Mesh/pin1/region_ids='1 2'
                Mesh/pin1/num_sectors='2'
                Mesh/pin1/mesh_intervals='1 1'
                Mesh/pin1/duct_halfpitch='0.5'
                Mesh/pin2/homogenized=false
                Mesh/pin2/quad_center_elements=false
                Mesh/pin2/region_ids='3 4'
                Mesh/pin2/num_sectors='2'
                Mesh/pin2/mesh_intervals='1 1'
                Mesh/pin2/duct_halfpitch='0.6'
                Outputs/file_base=core_duct_het_hex_core_empty"
    exodiff = 'core_duct_het_hex_core_empty.e'
    recover = false
  []
  [hex_metadata_transfer]
    requirement = 'The system shall generate a 2D hexagonal core mesh that transfers metadata correctly across RGMB mesh generators'
    type = 'Exodiff'
    input = 'core_hex_2d.i'
    cli_args = "Outputs/file_base=core_metadata_transfer"
    exodiff = 'core_metadata_transfer.e'
    recover = false
  []
  [hex_metadata_transfer_mesh_only]
    requirement = 'The system shall generate a 2D hexagonal core mesh that transfers metadata correctly across RGMB mesh generators in mesh only with extra element ids that have been defined with default values for certain id names'
    type = 'Exodiff'
    input = 'core_hex_2d.i'
    cli_args = "--mesh-only core_metadata_transfer.e"
    exodiff = 'core_metadata_transfer.e'
    recover = false
  []
  [hex_metadata_2d]
    requirement = 'The system shall print out reactor-related metadata to console output for a 2D hexagonal core mesh'
    type = 'RunApp'
    input = 'core_hex_2d.i'
    cli_args = "Mesh/cmg/show_rgmb_metadata=true"
    expect_out = 'Global metadata.+mesh_dimensions: 2.+mesh_geometry: Hex.+Core-level metadata.+cmg.+peripheral_ring_radius: 7.+peripheral_ring_region_id: 5.+assembly_names: amg1.+assembly_lattice:.+0, 0.+0, 0, 0.+0, 0.+Assembly-level metadata.+amg1.+assembly_type: 1.+pin_names: pin1.+pin_lattice:.+0, 0.+0, 0, 0.+0, 0.+Pin-level metadata.+pin1.+pin_type: 1.+background_region_id: 2'
  []
  [hex_metadata_2d_jsondiff]
    requirement = 'The system shall output reactor-related metadata for a 2D hexagonal core mesh in mesh generation mode'
    type = 'JSONDiff'
    input = 'core_hex_2d.i'
    cli_args = 'Reporters/metadata/type=MeshMetaDataReporter
                Outputs/json_out/type=JSON
                Outputs/json_out/execute_on=FINAL
                Outputs/json_out/execute_system_information_on=none
                Outputs/json_out/file_base=core_hex_2d_datadriven_out'
    jsondiff = 'core_hex_2d_datadriven_out.json'
    # Ignoring data that is only generated when the mesh is actually constructed, to compare with data-driven
    ignored_regex_items = '.*/.*/.*_meta|flat_side_up|control_drum_angles|control_drum_positions|quad_center_block_id|pin_block_name_map|pin_region_id_map|position_file_name|peripheral_modifier_compatible|pattern_size|.*_trimmability|name_id_map|bypass_meshgen|interface_boundary_ids|interface_boundaries|flexible_assembly_stitching'
    recover = false
    allow_test_objects = true
  []
  [hex_metadata_2d_bypass_meshgen]
    requirement = 'The system shall output reactor-related metadata to for a 2D hexagonal core mesh in data driven mode and default to the data-driven generator mesh generator as the final generator'
    type = 'JSONDiff'
    input = 'core_hex_2d_datadriven.i'
    jsondiff = 'core_hex_2d_datadriven_out.json'
    allow_test_objects = true
    recover = false
  []
  [hex_metadata_extra_assemblies]
    requirement = 'The system shall print out reactor-related metadata to console output for a 3D hexagonal core mesh with extra assemblies not part of core lattice'
    type = 'RunApp'
    input = 'core_hex_extra_assemblies.i'
    expect_out = 'Global metadata.+mesh_dimensions: 3.+mesh_geometry: Hex.+axial_mesh_sizes: 1, 1.+axial_mesh_intervals: 1, 1.+Core-level metadata.+cmg.+assembly_names: amg1, amg2, amg3.+assembly_lattice:.+-1, 1.+1, 0, -1.+-1, 1.+Assembly-level metadata.+amg1.+assembly_type: 1.+pin_names: pin2.+pin_lattice:.+0, 0.+0, 0, 0.+0, 0.+Assembly-level metadata.+amg2.+assembly_type: 2.+pin_names: pin1, pin3.+pin_lattice:.+0, 0.+0, 1, 0.+0, 0.+Assembly-level metadata.+amg3.+assembly_type: 3.+pin_names: pin1, pin3.+pin_lattice:.+0, 0.+0, 1, 0.+0, 0.+Pin-level metadata.+pin2.+pin_type: 2.+background_region_id: 21, 121.+Pin-level metadata.+pin1.+pin_type: 1.+background_region_id: 12, 112.+Pin-level metadata.+pin3.+pin_type: 3.+background_region_id: 32, 132'
  []
  [ptmg_periphery]
    requirement = 'The system shall generate a 2D hex core mesh with a reactor periphery meshed using a triangular mesh.'
    type = 'CSVDiff'
    input = 'core_periphery_ptmg_vol.i'
    csvdiff = 'core_periphery_ptmg_in.csv'
    recover = false
  []
  [periphery_rid_as_block_name_err]
    requirement = 'The system shall throw an error when generating a core mesh with a manually defined periphery block name and being set to automatically define block names based on region IDs'
    type = 'RunException'
    input = 'core_periphery_ptmg_vol.i'
    cli_args = "Mesh/rmp/region_id_as_block_name=true"
    expect_err = 'periphery_block_name should not be specified in CoreMeshGenerator'
  []
  [prmg_periphery]
    requirement = 'The system shall generate a 2D hex core mesh with a reactor periphery meshed using a quadrilateral element ring pattern.'
    type = 'Exodiff'
    input = 'core_periphery_prmg.i'
    cli_args = '--mesh-only'
    exodiff = 'core_periphery_prmg_in.e'
    recover = false
  []
  [depletion_id_pin]
    requirement = 'The system shall generate a 3D hexagonal core mesh with pin-wise depletion IDs'
    type = 'Exodiff'
    input = 'core_hex.i'
    cli_args = "Mesh/cmg/generate_depletion_id=true
                Mesh/cmg/depletion_id_type=pin
                Mesh/cmg/extrude=false
                Outputs/file_base=core_hex_depl_pin_in
                Outputs/out/extra_element_ids_to_output=depletion_id"
    exodiff = 'core_hex_depl_pin_in.e'
    recover = false
  []
  [depletion_id_pin_type]
    requirement = 'The system shall generate a 3D hexagonal core mesh with pin type-wise depletion IDs'
    type = 'Exodiff'
    input = 'core_hex.i'
    cli_args = "Mesh/cmg/generate_depletion_id=true
                Mesh/cmg/depletion_id_type=pin_type
                Mesh/cmg/extrude=false
                Outputs/file_base=core_hex_depl_pin_type_in
                Outputs/out/extra_element_ids_to_output=depletion_id"
    exodiff = 'core_hex_depl_pin_type_in.e'
    recover = false
  []
  [flexible_stitching_hex]
    requirement = 'The system shall generate a 3D hexagonal core mesh with flexible assembly patterning that avoids hanging nodes at assembly interfaces'
    type = 'CSVDiff'
    input = 'core_flexible_assembly_stitching_hex.i'
    csvdiff = 'core_flexible_assembly_stitching_hex_out.csv'
    recover = false
    mesh_mode = REPLICATED
  []
  [flexible_stitching_cart]
    requirement = 'The system shall generate a 3D Cartesian core mesh with flexible assembly patterning that avoids hanging nodes at assembly interfaces'
    type = 'CSVDiff'
    input = 'core_flexible_assembly_stitching_cart.i'
    csvdiff = 'core_flexible_assembly_stitching_cart_out.csv'
    recover = false
    mesh_mode = REPLICATED
  []
  [flexible_stitching_modify_num_sectors]
    requirement = 'The system shall generate a 3D core mesh with the number of sectors at the assembly boundary being set by the user'
    type = 'CSVDiff'
    input = 'core_flexible_assembly_stitching_hex.i'
    cli_args = "Mesh/rmp/num_sectors_at_flexible_boundary=3"
    csvdiff = 'core_flexible_assembly_stitching_hex_out.csv'
    recover = false
    mesh_mode = REPLICATED
  []
[]
