//* This file is part of the MOOSE framework
//* https://www.mooseframework.org
//*
//* All rights reserved, see COPYRIGHT for full restrictions
//* https://github.com/idaholab/moose/blob/master/COPYRIGHT
//*
//* Licensed under LGPL 2.1, please see LICENSE for details
//* https://www.gnu.org/licenses/lgpl-2.1.html

#pragma once
#include "PolygonMeshGeneratorBase.h"

/**
 * This FlexiblePatternGenerator object is designed to generate a complex mesh with a background
 * region with dispersed unit meshes in it and distributed based on a series of flexible patterns.
 */
class FlexiblePatternGenerator : public PolygonMeshGeneratorBase
{
public:
  static InputParameters validParams();

  FlexiblePatternGenerator(const InputParameters & parameters);

  std::unique_ptr<MeshBase> generate() override;

protected:
  /// Names of input meshes that are used as unit meshes in patterning
  const std::vector<MeshGeneratorName> & _input_names;
  /// Type of boundary mesh to be used for the background region
  const enum class BdryType { HEXAGON, CARTESIAN, CIRCLE, CUSTOM } _boundary_type;
  /// Name of the input mesh that defines the external boundary of the background region
  MeshGeneratorName _boundary_mesh_name;
  /// Number of sectors on each side of the hexagonal or cartesian background region or on the circular boundary of the CIRCLE boundary mesh
  const unsigned int _boundary_sectors;
  /// Pitch size of the hexagonal or cartesian background region; or diameter of the circular region
  const Real _boundary_size;
  /// Positions of all the unit meshes after patterning
  std::vector<std::pair<Point, unsigned int>> _positions;

  /// Hexagonal patterns
  const std::vector<std::vector<std::vector<unsigned int>>> _hex_patterns;
  /// List of pitches of the hexagonal patterns
  const std::vector<Real> _hex_pitches;
  /// List of origins of the hexagonal patterns
  const std::vector<Point> _hex_origins;
  /// List of rotation angles of the hexagonal patterns
  const std::vector<Real> _hex_rotations;

  /// Rectangular patterns
  const std::vector<std::vector<std::vector<unsigned int>>> _rect_patterns;
  /// List of pitches of the rectangular patterns in x direction
  const std::vector<Real> _rect_pitches_x;
  /// List of pitches of the rectangular patterns in y direction
  const std::vector<Real> _rect_pitches_y;
  /// List of origins of the rectangular patterns
  const std::vector<Point> _rect_origins;
  /// List of rotation angles of the rectangular patterns
  const std::vector<Real> _rect_rotations;

  /// Circular patterns
  const std::vector<std::vector<unsigned int>> _circ_patterns;
  /// List of radii of the circular patterns
  const std::vector<Real> _circ_radii;
  /// List of origins of the circular patterns
  const std::vector<Point> _circ_origins;
  /// List of rotation angles of the circular patterns
  const std::vector<Real> _circ_rotations;

  // Custom subdomain id for the background region
  const subdomain_id_type _background_subdomain_id;
  // Custom subdomain name for the background region
  const SubdomainName _background_subdomain_name;
  // Whether to delete the default external boundary (10000 as defined by
  // PolygonMeshGeneratorBase::INTRINSIC_SIDESET_ID::OUTER_SIDESET_ID) from the inputs
  const bool _delete_default_external_boundary_from_inputs;

  /// Boundary ID of the external boundary
  const boundary_id_type _external_boundary_id;
  /// Boundary Name of the external boundary
  const std::string _external_boundary_name;

  /// The final mesh that is generated by the subgenerators;
  /// This mesh is generated by the subgenerators with only element and boundary IDs changed.
  std::unique_ptr<MeshBase> * _build_mesh;
};
