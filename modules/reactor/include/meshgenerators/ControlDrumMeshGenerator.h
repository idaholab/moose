//* This file is part of the MOOSE framework
//* https://www.mooseframework.org
//*
//* All rights reserved, see COPYRIGHT for full restrictions
//* https://github.com/idaholab/moose/blob/master/COPYRIGHT
//*
//* Licensed under LGPL 2.1, please see LICENSE for details
//* https://www.gnu.org/licenses/lgpl-2.1.html

#pragma once

#include "ReactorGeometryMeshBuilderBase.h"

/**
 * Mesh generator for defining a reactor control drum that can be used in a Cartesian or hexagonal lattice with the
 * option to be 2-D or 3-D.
 */
class ControlDrumMeshGenerator : public ReactorGeometryMeshBuilderBase
{
public:
  static InputParameters validParams();

  ControlDrumMeshGenerator(const InputParameters & parameters);

  std::unique_ptr<MeshBase> generate() override;

protected:
  ///Define metadata associated with ControlDrumMeshGenerator
  void generateMetadata();

  ///Get drum index from radial index of mesh element, drum index is used to retrieve region ID and block names for each element
  unsigned int getDrumIdxFromRadialIdx(const unsigned int radial_idx, const Real elem_x, const Real elem_y);

  ///The type of geometry that is being described (Square or Hex, declared in the ReactorMeshParams object)
  std::string _geom_type;

  ///The number of dimensions the mesh is ultimately going to have (2 or 3, declared in the ReactorMeshParams object)
  int _mesh_dimensions;

  ///The id number for the type of the assembly
  const subdomain_id_type _assembly_type;

  ///The inner radius of drum region
  const Real _drum_inner_radius;

  ///The outer radius of drum region
  const Real _drum_outer_radius;

  ///Whether this mesh should be extruded to 3-D, making it the final structure in the reactor mesh
  const bool _extrude;

  ///2-D vector (axial outer indexing, radial inner indexing) used to set "region_id" extra-element integer of the control drum mesh elements
  std::vector<std::vector<subdomain_id_type>> _region_ids;

  ///Whether block names have been provided by user
  bool _has_block_names;

  ///2-D vector (axial outer indexing, radial inner indexing) used to set block names of pin mesh elements
  std::vector<std::vector<std::string>> _block_names;

  ///Starting angle of drum pad region
  Real _pad_start_angle;

  ///Ending angle of drum pad region
  Real _pad_end_angle;

  ///Whether pad start and end angles are provided by user
  bool _has_pad_region;

  /// The final mesh that is generated by the subgenerators;
  /// This mesh is generated by the subgenerators with only element and boundary IDs changed.
  std::unique_ptr<MeshBase> * _build_mesh;
};
