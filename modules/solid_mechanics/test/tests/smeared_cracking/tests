[Tests]
  design = 'source/materials/ComputeSmearedCrackingStress.md'
  issues = '#6815 #9227'
  [cracking]
    type = Exodiff
    input = cracking.i
    allow_warnings = true #Ignore warning about missing cracked_elasticity_type
    exodiff = cracking_out.e
    custom_cmp = cracking.cmp
    requirement = 'The MOOSE SolidMechanics module shall simulate cracking on a specimen under tension in cartesian coordinates.'
  []
  [cracking_rz]
    type = Exodiff
    input = cracking_rz.i
    exodiff = cracking_rz_out.e
    custom_cmp = cracking_rz.cmp
    requirement = 'The MOOSE SolidMechanics module shall simulate cracking on a specimen under tension in rz coordinates.'
  []
  [cracking_function]
    type = Exodiff
    input = cracking_function.i
    exodiff = cracking_function_out.e
    custom_cmp = cracking_function.cmp
    requirement = 'The MOOSE SolidMechanics module shall simulate cracking while the cracking strength is prescribed by an elemental AuxVariable.'
    capabilities = 'method!=dbg'
  []
  [exponential]
    type = Exodiff
    input = cracking_exponential.i
    exodiff = cracking_exponential_out.e
    custom_cmp = cracking_exponential.cmp
    use_old_floor = true
    requirement = 'The MOOSE SolidMechanics module shall simulate exponential stress release.'
    capabilities = 'method!=dbg'
  []
  [rz_exponential]
    type = Exodiff
    input = cracking_rz_exponential.i
    exodiff = cracking_rz_exponential_out.e
    custom_cmp = cracking_rz_exp.cmp
    exodiff_opts = '-steps 0:1200:1'
    requirement = 'The MOOSE SolidMechanics module shall simulate exponential stress relase while using the rz coordinate system.'
    capabilities = 'method!=dbg'
  []
  [power]
    type = Exodiff
    input = cracking_power.i
    exodiff = cracking_power_out.e
    requirement = 'The MOOSE SolidMechanics module shall demonstrate softening using the power law for smeared cracking.'
  []
  [multiple_softening]
    type = Exodiff
    input = cracking_multiple_softening.i
    exodiff = cracking_multiple_softening_out.e
    requirement = 'The MOOSE SolidMechanics module shall demonstrate the prescribed softening laws in three directions, power law (x), exponential (y), and abrupt (z).'
    capabilities = 'method!=dbg'
  []
  [xyz]
    type = Exodiff
    input = cracking_xyz.i
    exodiff = cracking_xyz_out.e
    use_old_floor = true
    custom_cmp = cracking_xyz.cmp
    requirement = 'The MOOSE SolidMechanics module shall simulate smeared cracking in the x y and z directions.'
    capabilities = 'method!=dbg'
  []
  [plane_stress]
    type = Exodiff
    input = cracking_plane_stress.i
    exodiff = cracking_plane_stress_out.e
    use_old_floor = true
    custom_cmp = cracking_pln_str.cmp
    requirement = 'The MOOSE SolidMechanics module shall simulate smeared cracking under plane stress conditions.'
  []
  [cracking_rotation]
    type = Exodiff
    input = cracking_rotation.i
    exodiff = cracking_rotation_out.e
    use_old_floor = true
    custom_cmp = cracking_rotation.cmp
    max_parallel = 1
    requirement = 'The MOOSE SolidMechanics module shall demonstrate that the smeared cracking model correctly handles finite rotation of cracked elements.'
    capabilities = 'method!=dbg'
  []
  [cracking_rotation_pres_dir_x]
    type = Exodiff
    input = cracking_rotation.i
    exodiff = cracking_rotation_out.e
    use_old_floor = true
    custom_cmp = cracking_rotation.cmp
    #Prescribe the first crack to be in x (which doesn't crack), and reorder crack_flags to match original case
    cli_args = 'Materials/cracking_stress/prescribed_crack_directions=x AuxKernels/crack_flags3/component=1 AuxKernels/crack_flags2/component=2'
    max_parallel = 1
    prereq = cracking_rotation
    requirement = 'The MOOSE SolidMechanics module shall demonstrate the finite rotation of cracked elements where the crack is prescribed in x.'
  []
  [cracking_rotation_pres_dir_z]
    type = Exodiff
    input = cracking_rotation.i
    exodiff = cracking_rotation_out.e
    use_old_floor = true
    custom_cmp = cracking_rotation.cmp
    #Prescribe the first crack to be in z (which doesn't crack), and reorder crack_flags to match original case
    cli_args = 'Materials/cracking_stress/prescribed_crack_directions=z AuxKernels/crack_flags3/component=1 AuxKernels/crack_flags2/component=2'
    max_parallel = 1
    prereq = cracking_rotation_pres_dir_x
    requirement = 'The MOOSE SolidMechanics module shall demonstrate the finite rotation of cracked elements where the crack is prescribed in z.'
  []
  [cracking_rotation_pres_dir_xz]
    type = Exodiff
    input = cracking_rotation.i
    exodiff = cracking_rotation_out.e
    use_old_floor = true
    custom_cmp = cracking_rotation.cmp
    #Prescribe the first two cracks to be in x and z (which dosn't crack), and reorder crack_flags to match original case
    cli_args = "Materials/cracking_stress/prescribed_crack_directions='x z' "
               "AuxKernels/crack_flags3/component=0 AuxKernels/crack_flags2/component=1 "
               "AuxKernels/crack_flags1/component=2"
    max_parallel = 1
    prereq = cracking_rotation_pres_dir_z
    requirement = 'The MOOSE SolidMechanics module shall demonstrate the finite rotation of cracked elements where two cracks are prescribed in x and z.'
  []
  [cracking_err_diagonal]
    prereq = cracking
    type = RunException
    input = cracking.i
    expect_err = "Defaulting to the legacy option of 'DIAGONAL', but the 'FULL' option is preferred"
    requirement = "The ComputeSmearedCrackingStress model shall generate a warning if "
                  "'cracked_elasticity_type' is not specified"
  []
  [cracking_err_softening]
    prereq = cracking_err_diagonal
    allow_warnings = true #Ignore warning about missing cracked_elasticity_type
    type = RunException
    input = cracking.i
    cli_args = "Materials/elastic_stress/softening_models='abrupt_softening abrupt_softening'"
    expect_err = "Either 1 or 3 softening models must be specified"
    requirement = "The ComputeSmearedCrackingStress model shall generate an error if an invalid "
                  "number of softening models is specified"
  []
[]
