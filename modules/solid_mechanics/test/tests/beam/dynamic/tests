[Tests]
  design = "C0TimoshenkoBeam.md"
  issues = "#10313"
  [./dyn_euler]
    type = 'Exodiff'
    input = 'dyn_euler_small.i'
    exodiff = 'dyn_euler_small_out.e'
    verification = 'beam_vandv.md'
    requirement = "The mechanics system shall correctly predict the natural frequencies"
                  " of an Euler-Bernoulli beam modeled using beam elements with"
                  " consistent mass/inertia."
  [../]
  [./dyn_timoshenko]
    type = 'Exodiff'
    input = 'dyn_timoshenko_small.i'
    exodiff = 'dyn_timoshenko_small_out.e'
    verification = 'beam_vandv.md'
    requirement = "The mechanics system shall correctly predict the natural frequencies"
                  " of a Timoshenko beam modeled using beam elements with consistent"
                  " mass/inertia."
  [../]
  [./dyn_euler_rayleigh_hht]
    type = 'Exodiff'
    input = 'dyn_euler_small_rayleigh_hht.i'
    exodiff = 'dyn_euler_small_rayleigh_hht_out.e'
    requirement = "The mechanics system shall correctly predict the natural frequencies"
                  " of an Euler-Bernoulli beam modeled using beam elements in the"
                  " presence of Rayleigh damping and numerical damping introduced"
                  " by Hilber-Hughes-Taylor (HHT) time integration."
    rel_err = 2e-5
  [../]
  [./dyn_euler_rayleigh_hht_ti]
    type = 'Exodiff'
    input = 'dyn_euler_small_rayleigh_hht_ti.i'
    exodiff = 'dyn_euler_small_rayleigh_hht_out.e'
    rel_err = 2.1e-5

    allow_warnings = True
    requirement = "The mechanics system shall correctly predict the natural frequencies"
                  " of an Euler-Bernoulli beam modeled using beam elements in the"
                  " presence of Rayleigh damping and numerical damping introduced"
                  " by Hilber-Hughes-Taylor (HHT) time integration when using the"
                  " velocity and acceleration computed using the Newmark-Beta time integrator."
    issues = "#12185"
    prereq = 'dyn_euler_rayleigh_hht_action'
  [../]
  [./dyn_euler_added_mass]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass.i'
    exodiff = 'dyn_euler_small_added_mass_out.e'
    superlu = true
    requirement = "The mechanics system shall correctly predict the natural frequencies"
                  " of a massless Euler-Bernoulli beam modeled using beam elements"
                  " with a nodal masses placed at the ends."
    verification = 'beam_vandv.md'
    petsc_version = '>=3.8'
  [../]
  [./dyn_euler_added_mass_file]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_file.i'
    cli_args = "NodalKernels/x_inertial/nodal_mass_file=nodal_mass.csv"
    exodiff = 'dyn_euler_small_added_mass_out.e'
    prereq = 'dyn_euler_added_mass'
    superlu = true
    requirement = "The mechanics system shall correctly predict the natural frequencies"
                  " of a massless Euler-Bernoulli beam modeled using beam elements"
                  " with added nodal masses when the location and values of the"
                  " masses are provided using a csv file."
  [../]
  [./dyn_euler_added_mass_gravity]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_gravity.i'
    cli_args = "NodalKernels/force_y2/mass=0.01899772"
    exodiff = 'dyn_euler_small_added_mass_out.e'
    prereq = 'dyn_euler_added_mass_file'
    superlu = true
    requirement = "The mechanics system shall correctly model the response of a beam"
                  " modeled using beam elements when gravitational force"
                  " (proportional to nodal mass) is applied to the beam."
  [../]
  [./dyn_euler_added_mass_gravity_2]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_gravity.i'
    cli_args = "NodalKernels/force_y2/nodal_mass_file=nodal_mass.csv"
    exodiff = 'dyn_euler_small_added_mass_out.e'
    prereq = 'dyn_euler_added_mass_gravity'
    superlu = true
    requirement = "The mechanics system shall correctly model the response of a beam"
                  " modeled using beam elements under gravitational force when"
                  " the nodal mass distribution is provided using a csv file."
  [../]
  [./add_dynamic_variables_action]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_dyn_variable_action.i'
    exodiff = 'dyn_euler_small_added_mass_out.e'
    prereq = 'dyn_euler_added_mass_gravity_2'
    superlu = true
    requirement = "The LineElementAction shall create the translational and rotational"
                  " velocities and accelerations required for a dynamic simulation"
                  " using beam elements."
    design = "C0TimoshenkoBeam.md LineElement/QuasiStatic/index.md"
  [../]
  [./dyn_euler_added_mass_inertia_damping]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_inertia_damping.i'
    exodiff = 'dyn_euler_small_added_mass_inertia_damping_out.e'
    superlu = true
    requirement = "The mechanics system shall correctly model the response of a beam"
                  " modeled using beam elements in the presence of nodal mass,"
                  " nodal inertia and Rayleigh damping."
    verification = 'beam_vandv.md'
    petsc_version = '>=3.8'
  [../]
  [./dyn_euler_added_mass_inertia_damping_ti]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_inertia_damping_ti.i'
    exodiff = 'dyn_euler_small_added_mass_inertia_damping_out.e'
    superlu = true
    requirement = "The mechanics system shall correctly model the response of a beam"
                  " modeled using beam elements in the presence of nodal mass,"
                  " nodal inertia and Rayleigh damping when using the velocity and"
                  " accelerations computed by the Newmark-Beta time integrator."
    issues = "#12185"
    prereq = "dyn_euler_added_mass_inertia_damping_action"
    # PR #26848. Clang 16 Apple Si is not compatible.
    machine = X86_64
  [../]
  [./dyn_euler_rayleigh_hht_action]
    type = 'Exodiff'
    input = 'dyn_euler_small_rayleigh_hht_action.i'
    exodiff = 'dyn_euler_small_rayleigh_hht_out.e'
    prereq = 'dyn_euler_rayleigh_hht'
    requirement = "The LineElementAction shall correctly create the input blocks"
                  " required for a dynamic beam simulation using beam elements and"
                  " a consistent mass/inertia matrix in the presence of Rayleigh"
                  " damping and numerical damping in the form of Hilber-Hughes-Taylor (HHT) time integration."
    design = "C0TimoshenkoBeam.md LineElement/QuasiStatic/index.md"
    rel_err = 2e-5
  [../]
  [./dyn_euler_added_mass_inertia_damping_action]
    type = 'Exodiff'
    input = 'dyn_euler_small_added_mass_inertia_damping_action.i'
    exodiff = 'dyn_euler_small_added_mass_inertia_damping_out.e'
    prereq = 'dyn_euler_added_mass_inertia_damping'
    superlu = true
    requirement = "The LineElmentAction shall correctly create the input blocks"
                  " required for a dynamic beam simulation using beam elements and nodal mass/inertia"
                  " matrix in the presence of Rayleigh damping and numerical damping"
                  " in the form of Hilber-Hughes-Taylor (HHT) time integration."
    design = "C0TimoshenkoBeam.md LineElement/QuasiStatic/index.md"
  [../]
  [./dyn_euler_added_mass2]
    type = 'CSVDiff'
    input = 'dyn_euler_small_added_mass2.i'
    csvdiff = 'dyn_euler_small_added_mass2_out.csv'

    requirement = "The mechanics system shall correctly predict the natural frequency"
                  " of a cantilever beam modeled using beam elements with a mass at the free end."
  [../]
  [./error_1]
    type = 'RunException'
    input = 'dyn_euler_small.i'
    cli_args = "Kernels/inertial_force_x/rotations='rot_x rot_y' Outputs/csv=false Outputs/exodus=false"
    expect_err = "InertialForceBeam: The number of variables supplied in 'displacements' and 'rotations' must match."

    requirement = "The InertialForceBeam class shall produce an error if the number of"
                  " variables provided for rotations differs from that provided for displacements."
  [../]
  [./error_2]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_inertia_damping.i'
    cli_args = "NodalKernels/rot_x_inertial/rotational_velocities='rot_vel_x rot_vel_y' Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalRotationalInertia: rotational_velocities and rotational_accelerations should be same size as rotations."
    superlu = true
    requirement = "The NodalRotatioanlInertia class shall produce an error if"
                  " the number of rotational velocities and accelerations provided"
                  " as input differ from the number of rotations."
  [../]
  [./error_3]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_inertia_damping.i'
    cli_args = "NodalKernels/rot_x_inertial/Ixx=1 NodalKernels/rot_x_inertial/Iyy=1 NodalKernels/rot_x_inertial/Izz=1 NodalKernels/rot_x_inertial/Ixy=1 Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalRotationalInertia: The moment of inertia tensor should be positive definite."
    superlu = true
    requirement = "The NodalRotationalInertia class shall produce an error if the"
                  " user provided nodal inertia is not positive definite."
  [../]
  [./error_4]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_inertia_damping.i'
    cli_args = "NodalKernels/rot_x_inertial/x_orientation='2 0 0' NodalKernels/rot_x_inertial/y_orientation='0 1 0' Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalRotationalInertia: x_orientation and y_orientation must be unit vectors."
    superlu = true
    requirement = "The NodalRotatioanlInertia class shall produce an error if the"
                  " user provided x and y orientations are not unit vectors."
  [../]
  [./error_5]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_inertia_damping.i'
    cli_args = "NodalKernels/rot_x_inertial/x_orientation='1 0 0' NodalKernels/rot_x_inertial/y_orientation='1 0 0' Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalRotationalInertia: x_orientation and y_orientation should be perpendicular to each other."
    superlu = true
    requirement = "The NodalRotatioanlInertia class shall produce an error if the"
                  " user provided x and y orientations are not perpendicular to each"
                  " other."
  [../]
  [./error_6]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_inertia_damping.i'
    cli_args = "NodalKernels/rot_x_inertial/x_orientation='1 0 0' Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalRotationalInertia: Both x_orientation and y_orientation should be provided if x_orientation or y_orientation is different from global x or y direction, respectively."
    superlu = trues
    requirement = "The NodalRotatioanlInertia class shall produce an error if only"
                  " x or y orientation is provided as input by the user."
  [../]
  [./error_7]
    type = 'RunException'
    input = 'dyn_euler_small.i'
    cli_args = "Kernels/inertial_force_x/accelerations='accel_x accel_y' Outputs/csv=false Outputs/exodus=false"
    expect_err = "InertialForceBeam: The number of variables supplied in 'velocities', 'accelerations', 'rotational_velocities' and 'rotational_accelerations' must match the number of displacement variables."

    requirement = "The InertialForceBeam class shall produce an error if the"
                  " number of translational and rotational velocities and accelerations"
                  " provided as input differ from the number of displacement variables."
  [../]
  [./error_8]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_file.i'
    cli_args = "NodalKernels/x_inertial/nodal_mass_file=nodal_mass.csv NodalKernels/x_inertial/mass=2.0 Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalTranslationalInertia: Please provide either mass or nodal_mass_file as input, not both."
    superlu = true
    requirement = "The NodalTranslationalInertia class shall produce an error if"
                  " nodal mass is provided as input both as a constant value"
                  " and also using a csv file."
  [../]
  [./error_9]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_file.i'
    cli_args = "Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalTranslationalInertia: Please provide either mass or nodal_mass_file as input."
    superlu = true
    requirement = "The NodalTranslationalInertia class shall produce an error if"
                  " nodal mass is not provided as input either as a constant value"
                  " or using a csv file."
  [../]
  [./error_10]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_file.i'
    cli_args = "NodalKernels/x_inertial/nodal_mass_file=nodal_mass_col_test.csv Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalTranslationalInertia: The number of columns in"
    superlu = true
    requirement = "The NodalTranslationalInertia class shall produce an error"
                  " if the number of columns in the nodal mass file is not 4."
  [../]
  [./error_11]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_file.i'
    cli_args = "NodalKernels/x_inertial/nodal_mass_file=nodal_mass.csv NodalKernels/x_inertial/boundary='right' Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalTranslationalInertia: Out of 2 nodal positions in"
    superlu = true
    requirement = "The NodalTranslationalInertia class shall produce an error"
                  " if all the nodal positions provided in the nodal mass file"
                  " cannot be found in the given boundary or mesh block."
  [../]
  [./error_12]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_gravity.i'
    cli_args = "NodalKernels/force_y2/nodal_mass_file=nodal_mass.csv NodalKernels/force_y2/mass=2.0 Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalGravity: Please provide either mass or nodal_mass_file as input, not both."
    superlu = true
    requirement = "The NodalGravity class shall produce an error if"
                  " nodal mass is provided as input both as a constant value"
                  " and also using a csv file."
  [../]
  [./error_13]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_gravity.i'
    cli_args = "Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalGravity: Please provide either mass or nodal_mass_file as input."
    superlu = true
    requirement = "The NodalGravity class shall produce an error if"
                  " nodal mass is not provided as input either as a constant value"
                  " or using a csv file."
  [../]
  [./error_14]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_gravity.i'
    cli_args = "NodalKernels/force_y2/nodal_mass_file=nodal_mass_col_test.csv Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalGravity: The number of columns in"
    superlu = true
    requirement = "The NodalGravity class shall produce an error"
                  " if the number of columns in the nodal mass file is not 4."
  [../]
  [./error_15]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_gravity.i'
    cli_args = "NodalKernels/force_y2/nodal_mass_file=nodal_mass.csv NodalKernels/force_y2/boundary='right' Outputs/csv=false Outputs/exodus=false"
    expect_err = "NodalGravity: Out of 2 nodal positions in"
    superlu = true
    requirement = "The NodalGravity class shall produce an error"
                  " if all the nodal positions provided in the nodal mass file"
                  " cannot be found in the given boundary or mesh block."
  [../]
  [./error_16]
    type = 'RunException'
    input = 'dyn_euler_small_rayleigh_hht_action.i'
    cli_args = 'Physics/SolidMechanics/LineElement/QuasiStatic/all/add_dynamic_variables=false Outputs/csv=false Outputs/exodus=false'
    expect_err = "LineElementAction: When using 'dynamic_consistent_inertia', 'dynamic_nodal_rotational_inertia' or '_dynamic_nodal_translational_inertia', the velocity and acceleration AuxVariables and the corresponding AuxKernels are automatically set by"

    requirement = "The LineElementAction class shall produce an error if `add_dynamic_variables`"
                  " option is set to false while `dynamic_consistent_inertia`,"
                  " `dynamic_nodal_rotational_inertia` or `dynamic_nodal_translational_inertia`"
                  " options are set to true."
    design = "C0TimoshenkoBeam.md LineElement/QuasiStatic/index.md"
  [../]
  [./error_17]
    type = 'RunException'
    input = 'dyn_euler_small_added_mass_inertia_damping_action.i'
    cli_args = 'Physics/SolidMechanics/LineElement/QuasiStatic/all/nodal_mass_file=nodal_mass.csv Outputs/csv=false Outputs/exodus=false'
    expect_err = "NodalTranslationalInertia: Please provide either mass or nodal_mass_file as input, not both"
    superlu = true
    requirement = "The NodalTranslationalInertia class shall produce an error if"
                  " nodal mass is provided as input both as constant value and"
                  " also using a csv file."
  [../]
[]
