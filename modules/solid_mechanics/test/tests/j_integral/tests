[Tests]
  design = 'syntax/DomainIntegral/index.md'
  issues = '#2814'
  [j_2d]
    type = 'CSVDiff'
    input = 'j_integral_2d.i'
    csvdiff = 'j_integral_2d_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D.'
    capabilities = 'method!=dbg'
  []
  [j_2d_block_restrict]
    type = 'CSVDiff'
    issues = '#24795'
    input = 'j_integral_2d_block_restrict.i'
    csvdiff = 'j_integral_2d_block_restrict_out.csv'
    requirement = 'The domain integral action shall compute the fracture domain integrals including the J integral for problems in which the fracture domains of interest represent a subset of all the domains in the system.'
    capabilities = 'method!=dbg'
  []
  [j_2d_block_restrict_error]
    type = 'RunException'
    issues = '#24795'
    input = 'j_integral_2d_block_restrict.i'
    cli_args = "DomainIntegral/block='1 2'"
    expect_err = "The 'block' parameter of the object 'EshelbyTensor' must be a subset of the 'block' parameter of the variable 'disp_x'"
    requirement = 'The domain integral action shall error out if the blocks selected do not have the '
                  'adequate material objects.'
  []
  [j_2d_output_vpp]
    type = 'CheckFiles'
    issues = '#25162'
    input = 'j_integral_2d.i'
    check_files = 'j_integral_2d_output_vpp_out.csv'
    check_not_exists = 'j_integral_2d_output_vpp_out_*VPP*.csv'
    cli_args = "DomainIntegral/output_vpp=false Outputs/file_base=j_integral_2d_output_vpp_out"
    requirement = 'The domain integral action shall suppress the vector postprocessor output and stop generating a csv file for each integration ring at each time step.'
    capabilities = 'method!=dbg'
  []
  [j_2d_output_pp]
    type = 'CSVDiff'
    issues = '#25162'
    input = 'j_integral_2d.i'
    csvdiff = 'j_integral_2d_output_pp_out.csv'
    cli_args = "DomainIntegral/output_vpp=false Outputs/file_base=j_integral_2d_output_pp_out"
    requirement = 'The domain integral action shall suppress the vector postprocessor output while the postprocessor outputs are not affected.'
    capabilities = 'method!=dbg'
  []
  [j_2d_small_strain]
    type = 'CSVDiff'
    input = 'j_integral_2d_small_strain.i'
    csvdiff = 'j_integral_2d_small_strain_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D using small strain.'
    capabilities = 'method!=dbg'
  []
  [j_2d_points]
    type = 'CSVDiff'
    input = 'j_integral_2d_points.i'
    csvdiff = 'j_integral_2d_points_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D at specified points.'
    capabilities = 'method!=dbg'
  []
  [j_2d_mouth_dir]
    type = 'CSVDiff'
    input = 'j_integral_2d_mouth_dir.i'
    csvdiff = 'j_integral_2d_mouth_dir_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D given a mouth direction.'
    capabilities = 'method!=dbg'
  []
  [j_2d_topo_q]
    type = 'CSVDiff'
    input = 'j_integral_2d_topo_q_func.i'
    csvdiff = 'j_integral_2d_topo_q_func_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D using the topology type q function.'
    capabilities = 'method!=dbg'
  []
  [j_3d_as_2d]
    type = 'CSVDiff'
    input = 'j_integral_3d_as_2d.i'
    csvdiff = 'j_integral_3d_as_2d_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D evaluated as a 2D problem.'
  []
  [j_3d_as_2d_topo_q]
    type = 'CSVDiff'
    input = 'j_integral_3d_as_2d_topo_q_func.i'
    csvdiff = 'j_integral_3d_as_2d_topo_q_func_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D evaluated as a 2D problem using the topology type q function.'
  []
  [j_3d]
    type = 'CSVDiff'
    input = 'j_integral_3d.i'
    csvdiff = 'j_integral_3d_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D.'
    capabilities = 'method!=dbg'
  []
  [j_3d_noq]
    type = 'CSVDiff'
    input = 'j_integral_3d.i'
    csvdiff = 'j_integral_3d_out.csv'
    prereq = j_3d
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D with the q function turned off.'
    capabilities = 'method!=dbg'
  []
  [j_3d_points]
    type = 'CSVDiff'
    input = 'j_integral_3d_points.i'
    csvdiff = 'j_integral_3d_points_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D with specified points.'
    capabilities = 'method!=dbg'
  []
  [j_3d_mouth_dir]
    type = 'CSVDiff'
    input = 'j_integral_3d_mouth_dir.i'
    csvdiff = 'j_integral_3d_mouth_dir_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D given a crack mouth direction.'
    capabilities = 'method!=dbg'
  []
  [j_3d_mouth_dir_end_dir_vec]
    type = 'CSVDiff'
    input = 'j_integral_3d_mouth_dir_end_dir_vec.i'
    csvdiff = 'j_integral_3d_mouth_dir_end_dir_vec_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D given a crack mouth direction and end direction vector.'
    capabilities = 'method!=dbg'
  []
  [j_3d_topo_q]
    type = 'CSVDiff'
    input = 'j_integral_3d_topo_q_func.i'
    csvdiff = 'j_integral_3d_topo_q_func_out.csv'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D with a topology type q function.'
    capabilities = 'method!=dbg'
  []
  [j_2d_noq]
    type = 'CSVDiff'
    input = 'j_integral_2d.i'
    csvdiff = 'j_integral_2d_out.csv'
    prereq = 'j_2d'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D while supressing the output of the q function values.'
    capabilities = 'method!=dbg'
  []
  [j_2d_chk_q]
    type = 'Exodiff'
    input = 'j_integral_2d.i'
    cli_args = 'DomainIntegral/output_q=true'
    exodiff = 'j_integral_2d_out.e'
    prereq = 'j_2d_noq'
    rel_err = 1e-5
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D while outputting the q function values.'
    capabilities = 'method!=dbg'
  []
  [j_2d_topo_chk_q]
    type = 'Exodiff'
    input = 'j_integral_2d_topo_q_func.i'
    cli_args = 'DomainIntegral/output_q=true'
    exodiff = 'j_integral_2d_topo_q_func_out.e'
    prereq = 'j_2d_topo_q'
    rel_err = 1e-5
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 2D with the topology type q function and outputting the values.'
    capabilities = 'method!=dbg'
  []
  [j_3d_chk_q]
    type = 'Exodiff'
    input = 'j_integral_3d.i'
    cli_args = 'DomainIntegral/output_q=true'
    exodiff = 'j_integral_3d_out.e'
    prereq = 'j_3d_noq'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D while supressing the output of the q values.'
    capabilities = 'method!=dbg'
  []
  [j_3d_topo_chk_q]
    type = 'Exodiff'
    input = 'j_integral_3d_topo_q_func.i'
    cli_args = 'DomainIntegral/output_q=true'
    exodiff = 'j_integral_3d_topo_q_func_out.e'
    prereq = 'j_3d_topo_q'
    requirement = 'The domain integral action shall compute all of the fracture domain integrals including the J integral for problems in 3D with the topology type q function and outputting the values.'
    capabilities = 'method!=dbg'
  []
[]
