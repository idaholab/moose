[Tests]
  [exception]
    design = 'MooseException.md'
    issues = '#9659 #20290'
    requirement = 'The system shall gracefully allow exceptions from the radial return mapping '
                  'algorithm '
    [non]
      type = RunApp
      input = 'nonad_exception.i'
      detail = 'not using automatic differentiation methods.'
      allow_test_objects = true
      expect_out = 'Exceeded maximum iterations in material return mapping iterations.'
    []
    [ad]
      type = RunApp
      input = 'ad_exception.i'
      detail = 'using automatic differentiation methods.'
      allow_test_objects = true
      expect_out = 'Exceeded maximum iterations in material return mapping iterations.'
    []
  []
  [bounds]
    design = 'PowerLawCreepStressUpdate.md'
    requirement = 'The system shall gracefully correct for out of bounds guess from the radial '
                  'return mapping algorithm '
    issues = '#9659 #20290'
    [high]
      type = RunApp
      input = 'nonad_bounds.i'
      detail = 'from the high bound.'
      allow_test_objects = true
      cli_args = 'Executioner/num_steps=1 Materials/creep/initial_guess=100'
      expect_out = 'Scalar greater than maximum'
    []
    [low]
      type = RunApp
      input = 'nonad_bounds.i'
      detail = 'from the low bound.'
      allow_test_objects = true
      cli_args = 'Executioner/num_steps=1 Materials/creep/initial_guess=-100'
      expect_out = 'Scalar less than minimum'
    []
  []
  [nonad]
    issues = '#8642'
    design = 'PowerLawCreepStressUpdate.md'
    requirement = 'The system shall provide a power law creep mechanical constitutive model not using AD '
    [power_law_creep]
      type = 'Exodiff'
      input = 'power_law_creep.i'
      exodiff = 'power_law_creep_out.e'
      detail = 'that works with a finite strain formulation.'
    []
    [cp_power_law_creep]
      type = 'Exodiff'
      input = 'cp_power_law_creep.i'
      exodiff = 'cp_power_law_creep_out.e'
      detail = 'that works with a coupled plasticty model.'
    []
    [restart1]
      type = 'RunApp'
      input = 'restart1.i'
      recover = false
      detail = 'that shall be restartable.'
    []
    [power_law_creep_restart2]
      type = 'Exodiff'
      input = 'restart2.i'
      exodiff = 'restart2_out.e'
      detail = 'that shall be restartable with a response that matches the original run.'
      exodiff_opts = '-TM'
      prereq = nonad/restart1
    []
    [smallstrain]
      type = Exodiff
      input = 'smallstrain.i'
      exodiff = 'smallstrain_out.e'
      detail = 'that works with a small strain formulation.'
    []
    [strain_predictor]
      type = 'CSVDiff'
      input = 'power_law_creep.i'
      cli_args = "Materials/power_law_creep/scale_strain_predictor=1"
      csvdiff = power_law_creep_csv_out.csv
      detail = 'that uses the previous nonlinear solves inelastic strain increment to speed up convergence.'
    []
  []
  [ad]
    issues = '#8642'
    design = 'PowerLawCreepStressUpdate.md'
    requirement = 'The system shall provide a power law creep mechanical constitutive model using AD'
    [power_law_creep]
      type = 'Exodiff'
      input = 'ad_power_law_creep.i'
      exodiff = 'ad_power_law_creep_out.e'
      detail = 'that works with a finite strain formulation.'
      capabilities = 'method!=dbg'
    []
    [restart1]
      type = 'RunApp'
      input = 'ad_restart1.i'
      recover = false
      detail = 'that shall be restartable.'
    []
    [power_law_creep_restart2]
      type = 'Exodiff'
      input = 'ad_restart2.i'
      exodiff = 'ad_restart2_out.e'
      detail = 'that shall be restartable with a response that matches the original run.'
      exodiff_opts = '-TM'
      prereq = ad/restart1
    []
    [smallstrain]
      type = Exodiff
      input = 'ad_smallstrain.i'
      exodiff = 'ad_smallstrain_out.e'
      detail = 'that works with a small strain formulation.'
    []
    [power_law_creep-jac]
      type = 'PetscJacobianTester'
      input = 'ad_power_law_creep.i'
      ratio_tol = 5e-6
      difference_tol = 1e6
      cli_args = 'Executioner/num_steps=2 -snes_test_err 1e-11'
      run_sim = True
      detail = 'calculate a perfect Jacobian'
    []
    [small_strain-jac]
      type = PetscJacobianTester
      input = 'ad_smallstrain.i'
      ratio_tol = 5e-6
      difference_tol = 1e6
      cli_args = 'Executioner/num_steps=2 -snes_test_err 1e-11'
      run_sim = True
      detail = 'calculate a perfect Jacobian with the small strain formulation'
    []
  []
  [composite_power_law_creep]
    type = 'CSVDiff'
    input = 'composite_power_law_creep.i'
    csvdiff = 'composite_power_law_creep_tests_soln_0011.csv'
    design = 'CompositePowerLawCreepStressUpdate.md'
    requirement = "The system shall provide a phase-dependent power law creep that computes the strain with different material properties."
    issues = '#28368'
    capabilities = 'method!=dbg'
  []
  [composite_power_law_creep_single_material]
    type = 'CSVDiff'
    input = 'composite_power_law_creep_single_material.i'
    csvdiff = 'composite_power_law_creep_single_material_tests_soln_0011.csv'
    design = 'CompositePowerLawCreepStressUpdate.md'
    requirement = "The system shall provide a phase-dependent power law creep that gives the same output as power_law_creep.i if given the same materials to all the phases."
    issues = '#28368'
    capabilities = 'method!=dbg'
  []
  [composite_power_law_creep_small_strain]
    type = 'CSVDiff'
    input = 'composite_power_law_creep_small_strain.i'
    csvdiff = 'composite_power_law_creep_small_strain_tests_soln_0011.csv'
    design = 'CompositePowerLawCreepStressUpdate.md'
    requirement = "The system shall provide a phase-dependent power law creep that works with small strain."
    issues = '#28368'
    capabilities = 'method!=dbg'
  []
  [composite_power_law_creep_plasticity]
    type = 'CSVDiff'
    input = 'composite_power_law_creep_plasticity.i'
    csvdiff = 'composite_power_law_creep_plasticity_tests_soln_0011.csv'
    design = 'CompositePowerLawCreepStressUpdate.md'
    requirement = "The system shall provide a phase-dependent power law creep that works with plasticity."
    issues = '#28368'
    capabilities = 'method!=dbg'
  []
  [composite_power_law_creep_onePhaseMulti]
    type = 'CSVDiff'
    input = 'composite_power_law_creep_onePhaseMulti.i'
    csvdiff = 'composite_power_law_creep_onePhaseMulti_tests_soln_0011.csv'
    design = 'CompositePowerLawCreepStressUpdate.md'
    requirement = "The system shall provide a phase-dependent power law creep that works for when one phase has multiple plasticity rule, and another phase does not have plasticity"
    issues = '#28368'
    capabilities = 'method!=dbg'
  []
  [except_composite_power_law_activation_energy]
    type = 'RunException'
    input = 'composite_power_law_creep.i'
    cli_args = "Materials/power_law_creep/activation_energy='3.0e5  3.5e5  4.5e5'"
    prereq = composite_power_law_creep
    design = 'CompositePowerLawCreepStressUpdate.md'
    expect_err = 'activation energy must be equal to the number of swithing functions'
    requirement = "The system shall produce an error"
                  " if the input activation energies are not the same length as the switching functions provided."
    issues = '#28368'
  []
  [except_composite_power_law_coefficient]
    type = 'RunException'
    input = 'composite_power_law_creep.i'
    cli_args = "Materials/power_law_creep/coefficient='1.0e-15 2.0e-18 1.0e-18'"
    prereq = except_composite_power_law_activation_energy
    design = 'CompositePowerLawCreepStressUpdate.md'
    expect_err = 'number of Dorn constant must be equal to the number of switching functions'
    requirement = "The system shall produce an error"
                  " if the input coefficients are not the same length as the switching functions provided."
    issues = '#28368'
  []
  [except_composite_power_law_n_exponent]
    type = 'RunException'
    input = 'composite_power_law_creep.i'
    cli_args = "Materials/power_law_creep/n_exponent='4 5 6'"
    prereq = except_composite_power_law_coefficient
    design = 'CompositePowerLawCreepStressUpdate.md'
    expect_err = 'n exponent must be equal to the number of switching functions'
    requirement = "The system shall produce an error"
                  " if the input n exponents are not the same length as the switching functions provided."
    issues = '#28368'
  []
[]
