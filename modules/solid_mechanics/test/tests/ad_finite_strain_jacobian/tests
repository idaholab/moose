[Tests]
  design = '/ADComputeFiniteStrain.md'
  [bending]
    type = Exodiff
    input = 'bending_jacobian.i'
    exodiff = 'bending_jacobian_out.e'
    issues = '#7228 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   bar bending simulation in 2D using AD and match non-AD methods'
  []
  [bending_Bbar]
    type = Exodiff
    input = 'bending_jacobian.i'
    exodiff = 'bending_jacobian_bbar_out.e'
    cli_args = 'GlobalParams/volumetric_locking_correction=true Outputs/file_base=bending_jacobian_bbar_out'
    prereq = 'bending'
    issues = '#7228 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   bar bending simulation in 2D using a volumetric locking correction using AD and
                   match non-AD methods'
  []
  [3d_bar]
    type = Exodiff
    input = '3d_bar.i'
    exodiff = '3d_bar_out.e'
    issues = '#7228 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   tensile test simulation in 3D using AD and match non-AD methods'
    capabilities = 'method!=dbg'
  []
  [3d_bar_Bbar]
    type = Exodiff
    input = '3d_bar.i'
    exodiff = '3d_bar_out.e'
    cli_args = 'GlobalParams/volumetric_locking_correction=true'
    prereq = '3d_bar'
    issues = '#7228 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   tensile test simulation in 3D using a volumetric locking correction using AD and
                   match non-AD methods'
    capabilities = 'method!=dbg'
  []

  [ad_eigen_sol]
    type = Exodiff
    input = 'eigen_sol.i'
    exodiff = 'eigen_sol_out.e'
    issues = '#30233'
    requirement = 'Finite strain methods with AD shall work with the EigenSolution option for polar decomposition.'
  []

  [bending-jac]
    type = PetscJacobianTester
    input = 'bending_jacobian.i'
    run_sim = 'True'
    prereq = 'bending'
    ratio_tol = 5e-8
    difference_tol = 1
    issues = '#12650 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   bar bending simulation in 2D using AD and calculate perfect Jacobians'
  []
  [bending_Bbar-jac]
    type = PetscJacobianTester
    input = 'bending_jacobian.i'
    cli_args = 'GlobalParams/volumetric_locking_correction=true'
    run_sim = 'True'
    prereq = 'bending_Bbar'
    ratio_tol = 5e-8
    difference_tol = 1
    issues = '#12650 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   bar bending simulation in 2D using a volumetric locking correction using AD and
                   calculate perfect Jacobians'
  []
  [3d_bar-jac]
    type = PetscJacobianTester
    input = '3d_bar.i'
    prereq = '3d_bar'
    run_sim = 'True'
    ratio_tol = 5e-8
    difference_tol = 1
    issues = '#12650 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   tensile test simulation in 3D using AD and calculate perfect Jacobians'
    valgrind = 'none' # too slow especially after #14547
    cli_args = 'Executioner/num_steps=1'
  []
  [3d_bar_Bbar-jac]
    type = PetscJacobianTester
    input = '3d_bar.i'
    cli_args = 'GlobalParams/volumetric_locking_correction=true Executioner/num_steps=1'
    prereq = '3d_bar_Bbar'
    run_sim = 'True'
    ratio_tol = 5e-8
    difference_tol = 1
    issues = '#12650 #13260'
    requirement = 'Finite strain methods in Tensor Mechanics should be able to adequately simulate a
                   tensile test simulation in 3D using a volumetric locking correction using AD and
                   calculate perfect Jacobians'
    valgrind = 'none' # too slow especially after #14547
  []

  [bending_exception]
    type = 'RunException'
    input = bending_jacobian.i
    cli_args = 'BCs/move_y/function="-100*t"'
    expect_err = 'Cannot take square root of a number less than or equal to '
                 'zero in the calculation of C3_test for the Rashid '
                 'approximation for the rotation tensor. This zero or '
                 'negative number may occur when elements become heavily distorted.'
    issues = '#19067'
    requirement = 'Finite strain methods in Tensor Mechanics, using the auto '
                  'differentiation capabilities, shall cut the timestep through '
                  ' a mooseException when the loading conditions deform the '
                  'elements so much as to produce a negative number under the '
                  'square root term in the Rashid approximation for the '
                  'rotation tensor calcuation'
  []
[]
