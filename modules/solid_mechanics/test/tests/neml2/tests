[Tests]
  # The original issue is idaholab/blackbear#333
  issues = '#26450 #26920'
  design = 'CauchyStressFromNEML2.md CauchyStressFromNEML2UO.md CauchyStressFromNEML2Receiver.md'
  [neml2_error]
    type = RunException
    input = 'fem.i'
    cli_args = 'neml2_input=error'
    requirement = 'The system shall be capable of capturing errors occurring during the evaluation of a NEML2 model.'
    expect_err = 'To debug NEML2 related issues'
    collections = 'SYSTEM'
    required_submodule = 'contrib/neml2'
    libtorch = true
    valgrind = none
  []
  [no_neml2]
    type = RunException
    input = 'fem.i'
    cli_args = 'neml2_input=elasticity'
    requirement = 'The system shall throw an error upon instantiation of NEML2 interface objects if NEML2 is not available.'
    expect_err = 'To use this object, you need to have the `NEML2` library installed'
    collections = 'SYSTEM'
    libtorch = false
  []
  [neml2_modular]
    issues = '#27493'
    collections = 'SYSTEM'
    requirement = 'The system shall be capable of modularly interfacing with the NEML2 library to perform constitutive update '
    [elasticity]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=elasticity
                  UserObjects/active='model input_strain'
                  UserObjects/model/gather_uos='input_strain'
                  Materials/active='output_stress_jacobian'"
      exodiff = 'elasticity.e'
      detail = 'to solve an elasticity problem;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [viscoplasticity_perfect]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=viscoplasticity_perfect
                  UserObjects/active='model input_strain input_old_strain input_old_stress'
                  UserObjects/model/gather_uos='input_strain input_old_strain input_old_stress'
                  Materials/active='output_stress_jacobian'"
      exodiff = 'viscoplasticity_perfect.e'
      detail = 'to solve a perfect viscoplasticity problem;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [viscoplasticity_isoharden]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=viscoplasticity_isoharden
                  UserObjects/active='model input_strain input_old_strain input_old_stress input_old_ep'
                  UserObjects/model/gather_uos='input_strain input_old_strain input_old_stress input_old_ep'
                  Materials/active='output_stress_jacobian output_ep'"
      exodiff = 'viscoplasticity_isoharden.e'
      detail = 'to solve a viscoplasticity problem with isotropic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [viscoplasticity_kinharden]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=viscoplasticity_kinharden
                  UserObjects/active='model input_strain input_old_strain input_old_stress input_old_Kp'
                  UserObjects/model/gather_uos='input_strain input_old_strain input_old_stress input_old_Kp'
                  Materials/active='output_stress_jacobian output_Kp'"
      exodiff = 'viscoplasticity_kinharden.e'
      detail = 'to solve a viscoplasticity problem with kinematic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [viscoplasticity_isokinharden]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=viscoplasticity_isokinharden
                  UserObjects/active='model input_strain input_old_strain input_old_stress input_old_ep input_old_Kp'
                  UserObjects/model/gather_uos='input_strain input_old_strain input_old_stress input_old_ep input_old_Kp'
                  Materials/active='output_stress_jacobian output_ep output_Kp'"
      exodiff = 'viscoplasticity_isokinharden.e'
      detail = 'to solve a viscoplasticity problem with both isotropic and kinematic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [viscoplasticity_chaboche]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=viscoplasticity_chaboche
                  UserObjects/active='model input_strain input_old_strain input_old_stress input_old_ep input_old_X1 input_old_X2'
                  UserObjects/model/gather_uos='input_strain input_old_strain input_old_stress input_old_ep input_old_X1 input_old_X2'
                  Materials/active='output_stress_jacobian output_ep output_X1 output_X2'"
      exodiff = 'viscoplasticity_chaboche.e'
      detail = 'to solve a viscoplasticity problem with non-associative Chaboche hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [viscoplasticity_radial_return]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=viscoplasticity_radial_return
                  UserObjects/active='model input_strain input_old_Ep input_old_gamma'
                  UserObjects/model/gather_uos='input_strain input_old_Ep input_old_gamma'
                  Materials/active='output_stress_jacobian output_Ep output_gamma'"
      exodiff = 'viscoplasticity_radial_return.e'
      detail = 'to solve a viscoplasticity problem using radial return;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [rate_independent_plasticity_perfect]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=rate_independent_plasticity_perfect
                  UserObjects/active='model input_strain input_old_Ep'
                  UserObjects/model/gather_uos='input_strain input_old_Ep'
                  Materials/active='output_stress_jacobian output_Ep'"
      exodiff = 'rate_independent_plasticity_perfect.e'
      detail = 'to solve a rate-independent problem with perfect plasticity;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [rate_independent_plasticity_isoharden]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=rate_independent_plasticity_isoharden
                  UserObjects/active='model input_strain input_old_Ep input_old_ep'
                  UserObjects/model/gather_uos='input_strain input_old_Ep input_old_ep'
                  Materials/active='output_stress_jacobian output_Ep output_ep'"
      exodiff = 'rate_independent_plasticity_isoharden.e'
      detail = 'to solve a rate-independent problem with isotropic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [rate_independent_plasticity_kinharden]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=rate_independent_plasticity_kinharden
                  UserObjects/active='model input_strain input_old_Ep input_old_Kp'
                  UserObjects/model/gather_uos='input_strain input_old_Ep input_old_Kp'
                  Materials/active='output_stress_jacobian output_Ep output_Kp'"
      exodiff = 'rate_independent_plasticity_kinharden.e'
      detail = 'to solve a rate-independent problem with kinematic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
    [rate_independent_plasticity_isokinharden]
      type = Exodiff
      input = 'fem_modular.i'
      cli_args = "neml2_input=rate_independent_plasticity_isokinharden
                  UserObjects/active='model input_strain input_old_Ep input_old_ep input_old_Kp'
                  UserObjects/model/gather_uos='input_strain input_old_Ep input_old_ep input_old_Kp'
                  Materials/active='output_stress_jacobian output_Ep output_ep output_Kp'"
      exodiff = 'rate_independent_plasticity_isokinharden.e'
      detail = 'to solve a rate-independent problem with both isotropic and kinematic hardening.'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
  []
  [moose_to_neml2_parameter]
    type = Exodiff
    input = 'moose_to_neml2_parameters.i'
    exodiff = 'moose_to_neml2_parameters_out.e'
    requirement = 'The system shall provide a modular way to transfer variables and/or real material property to NEML2 for use as model parameters.'
    required_submodule = 'contrib/neml2'
    libtorch = true
    recover = false
  []
  [moose_to_neml2_parameter_error]
    type = RunException
    input = 'moose_to_neml2_parameters.i'
    cli_args = 'UserObjects/gather_E/neml2_parameter=p'
    requirement = 'The system shall error out while trying to set a parameter that does not exist.'
    expect_err = 'there is not such parameter in the NEML2 material model.'
    required_submodule = 'contrib/neml2'
    libtorch = true
    recover = false
  []
  [neml2_parameter_derivative]
    type = Exodiff
    input = 'moose_to_neml2_parameters.i'
    exodiff = 'neml2_parameter_derivative_out.e'
    cli_args = "Materials/active='output_stress_jacobian nu_material dstress_dE' Outputs/file_base='neml2_parameter_derivative_out'"
    requirement = 'The system shall provide for a modular way to compute NEML2 output with respect to specific model parameters and save that it as a MOOSE material property.'
    required_submodule = 'contrib/neml2'
    libtorch = true
    recover = false
  []
  [neml2_to_moose_material]
    type = Exodiff
    input = 'neml2_to_moose_material.i'
    exodiff = 'neml2_to_moose_material_out.e'
    requirement = 'The system shall provide for a modular way to transfer NEML2 results to material properties..'
    required_submodule = 'contrib/neml2'
    libtorch = true
    recover = false
  []
  [neml2_legacy]
    collections = 'SYSTEM'
    requirement = 'The system shall be capable of interfacing with the NEML2 library to perform constitutive update '
    [elasticity]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=elasticity'
      exodiff = 'elasticity.e'
      detail = 'to solve an elasticity problem;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [viscoplasticity_perfect]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_perfect'
      exodiff = 'viscoplasticity_perfect.e'
      detail = 'to solve a perfect viscoplasticity problem;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [viscoplasticity_isoharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_isoharden'
      exodiff = 'viscoplasticity_isoharden.e'
      detail = 'to solve a viscoplasticity problem with isotropic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [viscoplasticity_kinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_kinharden'
      exodiff = 'viscoplasticity_kinharden.e'
      detail = 'to solve a viscoplasticity problem with kinematic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [viscoplasticity_isokinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_isokinharden'
      exodiff = 'viscoplasticity_isokinharden.e'
      detail = 'to solve a viscoplasticity problem with both isotropic and kinematic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [viscoplasticity_chaboche]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_chaboche'
      exodiff = 'viscoplasticity_chaboche.e'
      detail = 'to solve a viscoplasticity problem with non-associative Chaboche hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [viscoplasticity_radial_return]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_radial_return'
      exodiff = 'viscoplasticity_radial_return.e'
      detail = 'to solve a viscoplasticity problem using radial return;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [rate_independent_plasticity_perfect]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_perfect'
      exodiff = 'rate_independent_plasticity_perfect.e'
      detail = 'to solve a rate-independent problem with perfect plasticity;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [rate_independent_plasticity_isoharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_isoharden'
      exodiff = 'rate_independent_plasticity_isoharden.e'
      detail = 'to solve a rate-independent problem with isotropic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [rate_independent_plasticity_kinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_kinharden'
      exodiff = 'rate_independent_plasticity_kinharden.e'
      detail = 'to solve a rate-independent problem with kinematic hardening;'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [rate_independent_plasticity_isokinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_isokinharden'
      exodiff = 'rate_independent_plasticity_isokinharden.e'
      detail = 'to solve a rate-independent problem with both isotropic and kinematic hardening.'
      required_submodule = 'contrib/neml2'
      libtorch = true
      valgrind = heavy
    []
    [batched]
      type = Exodiff
      prereq = 'neml2_legacy/viscoplasticity_isokinharden'
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_isokinharden NEML2/mode=ALL'
      exodiff = 'viscoplasticity_isokinharden.e'
      detail = 'in a batched fashion.'
      required_submodule = 'contrib/neml2'
      libtorch = true
      recover = false
      valgrind = heavy
    []
  []
[]
