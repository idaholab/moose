[Tests]
  [rom]
    issues = '#14046 #16520 #17287 #20827'
    design = '/LAROMANCE.md'
    requirement = 'The system shall compute a creep rate based on a reduced order model '
    [3tile_strain]
      type = 'CSVDiff'
      input = '3tile_strain.i'
      csvdiff = '3tile_strain_out.csv'
      cli_args = 'Materials/rom_stress_prediction/finite_difference_width=1e-2'
      detail = 'and evolve over time with an good finite difference width.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []
    [3tile_strain_small_fd]
      type = 'CSVDiff'
      input = '3tile_strain.i'
      csvdiff = '3tile_strain_small_fd_out.csv'
      cli_args = 'Outputs/file_base=3tile_strain_small_fd_out Materials/rom_stress_prediction/finite_difference_width=1e-20'
      detail = 'and evolve over time with an poor finite difference width with more nonlinear iterations than with a good finite difference width.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []

    [3d]
      type = 'CSVDiff'
      input = '3d.i'
      csvdiff = '3d_out.csv'
      detail = 'in 3D.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []

    [3d_MPA]
      type = 'CSVDiff'
      prereq = 'rom/3d'
      input = '3d.i'
      cli_args = 'stress_unit=MPa E=3.3e5 p=1e-1'
      csvdiff = '3d_out.csv'
      detail = 'with units of stress other than Pascal.'
      allow_test_objects = true
    []

    [2drz]
      type = 'CSVDiff'
      input = '2drz.i'
      csvdiff = '2drz_out.csv'
      detail = 'in 2DRz.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []

    [2drz_json]
      type = 'CSVDiff'
      input = '2drz_json.i'
      csvdiff = '2drz_json_out.csv'
      detail = 'in 2DRz with a model loaded from a JSON data file.'
      petsc_version = '>=3.9.0'
    []

    [nonad_verification]
      type = 'CSVDiff'
      input = 'nonad_verification.i'
      csvdiff = 'nonad_verification_out.csv'
      petsc_version = '>=3.9.0'
      max_parallel = 1
      allow_test_objects = true
      detail = 'in isolation (i.e. without a full displacement solve), and match with code-to-code comparison with a small set of input parameters not using AD.'
    []
    [nonad_verification_heavy]
      type = 'CSVDiff'
      input = 'nonad_verification.i'
      csvdiff = 'nonad_verification_heavy_out.csv'
      heavy = true
      max_time = 500
      petsc_version = '>=3.9.0'
      cli_args = 'Executioner/dt=1e-5 Outputs/file_base=nonad_verification_heavy_out Outputs/interval=100'
      max_parallel = 1
      allow_test_objects = true
      detail = 'in isolation (i.e. without a full displacement solve), and match with code-to-code comparison with a large set of input parameters not using AD.'
    []

    [lower_limit]
      type = 'CSVDiff'
      input = lower_limit.i
      csvdiff = lower_limit_out.csv
      allow_test_objects = true
      detail = 'at the lower temperature limit.'
    []
    [lower_limit_extrapolated]
      type = 'CSVDiff'
      input = lower_limit.i
      csvdiff = extrapolated_out.csv
      cli_args = 'temp=500 disp=0.5e6 Outputs/file_base=extrapolated_out'
      allow_test_objects = true
      detail = 'below the lower temperature limit and extrapolate correctly.'
    []
    [lower_limit_error]
      type = 'RunException'
      input = lower_limit.i
      expect_err = "In rom_stress_prediction: temperature input parameter with value \(500\) is out "
                   "of lower global range"
      cli_args = 'temp=500 disp=0.5e6 Materials/rom_stress_prediction/temperature_input_window_low_failure=ERROR'
      allow_test_objects = true
      detail = 'but should error out below the lower temperature limit if requested by the user.'
    []
    [upper_limit_error]
      type = 'RunException'
      input = lower_limit.i
      expect_err = "In rom_stress_prediction: temperature input parameter with value \(2500\) is out "
                   "of upper global range"
      cli_args = 'temp=2500 disp=0.5e6 Materials/rom_stress_prediction/temperature_input_window_low_failure=ERROR'
      allow_test_objects = true
      detail = 'but should error out above the upper temperature limit if requested by the user.'
    []
    [creep_ramp_sub_false]
      type = 'CSVDiff'
      input = creep_ramp_sub_false.i
      csvdiff = creep_ramp_sub_false_out.csv
      allow_test_objects = true
      detail = 'when substepping is off and the time step size does not guarantee the most accurate results.'
    []
    [creep_ramp_sub_false_more_steps]
      type = 'CSVDiff'
      input = creep_ramp_sub_false_more_steps.i
      csvdiff = creep_ramp_sub_false_more_steps_out.csv
      allow_test_objects = true
      detail = 'when substepping is off and the time step size guarantees accurate results.'
    []
    [creep_ramp_sub_true]
      type = 'CSVDiff'
      input = creep_ramp_sub_true.i
      csvdiff = creep_ramp_sub_true_out.csv
      allow_test_objects = true
      allow_warnings = true
      detail = 'when substepping is on and the numerical integration error selected by the user guarantees accurate results.'
    []
    [creep_ramp_sub_true_exception]
      type = 'RunApp'
      input = creep_ramp_sub_true.i
      expect_out = "The number of substeps computed exceeds 'maximum_number_substeps'"
      cli_args = 'Materials/rom_stress_prediction/substep_strain_tolerance=4.0e-6'
      allow_test_objects = true
      allow_warnings = true
      detail = 'when substepping is on and the numerical integration error selected by the user guarantees accurate results but substepping settings require a system-wise time step cut because the computed number of substeps exceeds the maximum_number_substeps parameter.'
    []

    [3tile]
      type = 'CSVDiff'
      input = '3tile.i'
      csvdiff = '3tile_out.csv'
      detail = 'for a variety of overlapping tiles and two overlapping partitions.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []

    [3tile_json]
      type = 'CSVDiff'
      input = '3tile_json.i'
      csvdiff = '3tile_json_out.csv'
      detail = 'for a variety of overlapping tiles and two overlapping partitions with a model loaded from a JSON data file.'
      petsc_version = '>=3.9.0'
    []

    [3tile_json_relative]
      type = 'CSVDiff'
      input = '3tile_json.i'
      csvdiff = '3tile_json_out.csv'
      cli_args = 'Materials/rom_stress_prediction/model=gold/3tile_json_export.json'
      detail = 'for a variety of overlapping tiles and two overlapping partitions with a model loaded from a JSON data file relative to the input.'
      petsc_version = '>=3.9.0'
      # skip test if test is being run out-of-tree. Issue Ref: #25279
      installation_type = in_tree
    []

    [3tile_json_export]
      type = 'JSONDiff'
      input = '3tile.i'
      jsondiff = '3tile_json_export.json'
      detail = 'for a variety of overlapping tiles and two overlapping partitions, and be able to export the model data to a JSON file.'
      petsc_version = '>=3.9.0'
      cli_args = 'Materials/rom_stress_prediction/export_model=3tile_json_export.json'
      allow_test_objects = true
      # skip test if test is being run out-of-tree. Issue Ref: #25279
      installation_type = in_tree
    []
  []
  [ADrom]
    issues = '#14046'
    design = '/LAROMANCE.md'
    requirement = 'The system shall compute a creep rate based on a reduced order model using AD '
    [3d]
      type = 'CSVDiff'
      input = 'AD3d.i'
      csvdiff = '3d_out.csv'
      cli_args = 'Outputs/file_base=3d_out'
      detail = 'in 3D.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []
    [3d_MPA]
      type = 'CSVDiff'
      prereq = 'rom/3d'
      input = 'AD3d.i'
      cli_args = 'stress_unit=MPa E=3.3e5 p=1e-1 Outputs/file_base=3d_out'
      csvdiff = '3d_out.csv'
      detail = 'with units of stress other than Pascal.'
      allow_test_objects = true
    []
    [3d-jac]
      type = 'PetscJacobianTester'
      input = 'AD3d.i'
      prereq = 'ADrom/3d'
      ratio_tol = 5e-7
      method = 'opt'
      cli_args = 'Executioner/num_steps=2'
      difference_tol = 1
      run_sim = True
      detail = 'in 3D and compute a perfect Jacobian.'
      allow_test_objects = true
    []

    [2drz]
      type = 'CSVDiff'
      input = 'AD2drz.i'
      csvdiff = '2drz_out.csv'
      cli_args = 'Outputs/file_base=2drz_out'
      detail = 'in 2DRz.'
      petsc_version = '>=3.9.0'
      allow_test_objects = true
    []
    [2drz-jac]
      type = 'PetscJacobianTester'
      input = 'AD2drz.i'
      method = 'opt'
      prereq = 'ADrom/2drz'
      ratio_tol = 5e-7
      difference_tol = 1
      cli_args = 'Executioner/num_steps=2'
      run_sim = True
      detail = 'in 2DRz and compute a perfect Jacobian.'
      allow_test_objects = true
    []

    [ad_verification]
      type = 'CSVDiff'
      input = 'ad_verification.i'
      csvdiff = 'ad_verification_out.csv'
      petsc_version = '>=3.9.0'
      max_parallel = 1
      allow_test_objects = true
      detail = 'in isolation (i.e. without a full displacement solve), and match with code-to-code comparison with a small set of input parameters using AD.'
    []
    [ad_verification_heavy]
      type = 'CSVDiff'
      input = 'ad_verification.i'
      csvdiff = 'ad_verification_heavy_out.csv'
      heavy = true
      max_time = 500
      petsc_version = '>=3.9.0'
      cli_args = 'Executioner/dt=1e-5 Outputs/file_base=ad_verification_heavy_out Outputs/interval=100'
      max_parallel = 1
      allow_test_objects = true
      detail = 'in isolation (i.e. without a full displacement solve), and match with code-to-code comparison with a large set of input parameters using AD.'
    []

    [lower_limit]
      type = 'CSVDiff'
      input = ADlower_limit.i
      csvdiff = lower_limit_out.csv
      cli_args = 'Outputs/file_base=lower_limit_out'
      allow_test_objects = true
      detail = 'at the lower temperature limit.'
    []
    [lower_limit_extrapolated]
      type = 'CSVDiff'
      input = ADlower_limit.i
      csvdiff = extrapolated_out.csv
      cli_args = 'temp=500 disp=0.5e6 Outputs/file_base=extrapolated_out'
      allow_test_objects = true
      detail = 'below the lower temperature limit and extrapolate correctly.'
    []
  []
[]
