# New Users

Welcome to MOOSE! This page describes some helpful ways to start developing with MOOSE.

!alert! note
If you arrived here directly, be sure to complete one of the "Getting Started" instruction
sets (such as [Linux and MacOS](installation/index.md)).
!alert-end!

## Create an Application id=create-an-app

!style halign=left
MOOSE is designed for building custom applications, therefore to use MOOSE an application is
required. An application is where code and input files are created for a particular problem or set
of problems of interest.

To create an application, run the stork.sh script while sitting outside the MOOSE repository with
a single argument: the name of your application:

```bash
cd {{PATH}}
./moose/scripts/stork.sh YourAppName
```

Running this script will create a folder named "your_app_name" in the projects directory, this
application will automatically link against MOOSE. Obviously, the "YourAppName" should be the
desired name of your application; consider the use of an acronym. Animal names are preferred for
applications, but you are free to choose whatever name suits your needs.

!alert warning title=Execute stork from outside of the MOOSE directory
Do not attempt to run this script while inside the MOOSE repository. Doing so will result in an
error.

## Build and Test id=compile

!style halign=left
Enter your application's directory, build your application and then run tests:

```bash
cd {{PATH}}/your_app_name
make -j 6
./run_tests -j 6
```

If your application is working correctly, the output shows a single passing test. This indicates
that your application is ready to be further developed. Be sure to recompile and test your
application each time you update MOOSE.

### Enable Modules

!style halign=left
To enable use of the various [modules/index.md] available from MOOSE in an application, modify the
section of `{{PATH}}/your_app_name/Makefile` that is shown below.

!listing stork/Makefile.app
         link=False
         language=script
         start=MODULES
         end=XFEM
         include-end=True

Then, to begin using a module's capabilities, recompile the application in the same manner described
in the [#compile] section.

!alert tip title=Only enable modules needed
Each module enabled will increase compilation times, thus it is recommended to enable modules
as-needed.

!! UPDATE=false to load false_update_moose.md page (hack needed for Offline installs)
!! leave empty to load up normal update instructions

!template load file=installation/{{UPDATE}}update_moose.md.template PATH={{PATH}} CONDA_UPDATE={{CONDA_UPDATE}}

## Learn More

!style halign=left
With a working application next consider looking at the [examples_and_tutorials/index.md] page for
a beginning tour of how to use input files and implement custom behavior in an application. The
[first tutorial](tutorial01_app_development/index.md) demonstrates how MOOSE application
development works. If you are interested in contributing to MOOSE please visit
[framework_development/index.md].

## Helpful Software id=helpful-software

!style halign=left
A text editor is necessary for creating application files. There are many options available, so
please feel free to chose an editor that meets your needs. A popular option for application
developers is [VSCode](https://code.visualstudio.com/), which has community developed add-ons
specifically for MOOSE: [VSCode MOOSE](VSCode.md).

A graphical post-processor, particularly one that can read
[ExodusII](https://prod-ng.sandia.gov/techlib-noauth/access-control.cgi/1992/922137.pdf) files, is
also necessary. [!ac](MOOSE) includes a [!ac](GUI): [PEACOCK](python/peacock.md). Another popular
tool is [ParaView](https://www.paraview.org/). Both of these applications are free and will allow
you to visualize and process the results of your simulations.

## Join the Community id=join

- If you haven't already, please sign up for GitHub: [github.com/join](https://github.com/join).
- Visit the [MOOSE Discussion forum](https://github.com/idaholab/moose/discussions) on GitHub for
  technical Q&A.

## Customizing MOOSE id=configure

!style halign=left
MOOSE can be customized by running a `configure` script in
`{{PATH}}/moose`. Note that the `configure` script *must* be invoked from
`{{PATH}}/moose`. Below we summarize the configuration options available:

- `--prefix`: Specify a target installation path. Useful if you plan on running `make install`.

- See [MOOSE Build System](application_development/build_system.md) documentation for in-depth
  information.

### Automatic Differentiation

- `--with-derivative-size=<n>`: Specify the length of the underlying derivative storage array. The
  default is 64. A smaller number may be chosen for increased speed; a larger number may be required
  for 3D problems or problems with coupling between many variables.

!include installation/installation_troubleshooting.md

!content pagination use_title=True
                    previous=installation/{{BACK}}
                    next=examples_and_tutorials/{{PAGE_HEIR}}index.md
