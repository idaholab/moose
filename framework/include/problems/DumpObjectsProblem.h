//* This file is part of the MOOSE framework
//* https://www.mooseframework.org
//*
//* All rights reserved, see COPYRIGHT for full restrictions
//* https://github.com/idaholab/moose/blob/master/COPYRIGHT
//*
//* Licensed under LGPL 2.1, please see LICENSE for details
//* https://www.gnu.org/licenses/lgpl-2.1.html

#pragma once

#include "FEProblemBase.h"

class DumpObjectsNonlinearSystem;

#define captureDump(method_name, path)                                                             \
  void method_name(                                                                                \
      const std::string & type, const std::string & name, InputParameters & parameters) override   \
  {                                                                                                \
    dumpObjectHelper(path, type, name, parameters);                                                \
    FEProblemBase::method_name(type, name, parameters);                                            \
  }

/**
 * Specialization of SubProblem for dumping generated objects as input file syntax
 */
class DumpObjectsProblem : public FEProblemBase
{
public:
  static InputParameters validParams();

  DumpObjectsProblem(const InputParameters & parameters);

  using FEProblemBase::addAuxVariable;
  using FEProblemBase::addVariable;

  /// output input blocks for a given action path
  void dumpGeneratedSyntax(const std::string path);
  /// output input blocks for all paths
  void dumpAllGeneratedSyntax() const;

  /// output data in solve
  virtual void solve(unsigned int nl_sys_num) override;

  virtual void initialSetup() override {}
  virtual void advanceState() override {}
  virtual void timestepSetup() override {}
  virtual void execute(const ExecFlagType & /*exec_type*/) override {}
  virtual void outputStep(ExecFlagType /*type*/) override {}
  virtual void updateActiveObjects() override {}
  virtual void onTimestepEnd() override {}
  virtual void computeIndicators() override {}
  virtual void computeMarkers() override {}
  virtual bool adaptMesh() override { return false; }
  virtual void addLineSearch(const InputParameters & /*parameters*/) override {}

protected:
  void dumpObjectHelper(const std::string & system,
                        const std::string & type,
                        const std::string & name,
                        const InputParameters & parameters);

  void dumpVariableHelper(const std::string & system,
                          const std::string & var_name,
                          FEFamily family,
                          Order order,
                          Real scale_factor,
                          const std::set<SubdomainID> * const active_subdomains);

  /// build a text snippet of the minimal set of parameters that need to be specified
  std::string deduceNecessaryParameters(const std::string & type,
                                        const InputParameters & parameters);

  /// create a string map form parameter names to stringified parameter values
  std::map<std::string, std::string> stringifyParameters(const InputParameters & parameters);

  /// store input syntax to build objects generated by a specific action
  std::map<std::string, std::map<std::string, std::string>> _generated_syntax;

  std::shared_ptr<DumpObjectsNonlinearSystem> _nl_sys;

  /// Whether to include all user-specified parameters in the dump or only parameters that differ from the default value
  const bool _include_all_user_specified_params;

public:
  // clang-format off
  captureDump(addAuxKernel,           "AuxKernels")
  captureDump(addAuxScalarKernel,     "AuxScalarKernels")
  captureDump(addAuxVariable,         "AuxVariables")
  captureDump(addBoundaryCondition,   "BCs")
  captureDump(addFVBC,                "FVBCs")
  captureDump(addConstraint,          "Constraints")
  captureDump(addDamper,              "Dampers")
  captureDump(addDGKernel,            "DGKernels")
  captureDump(addDiracKernel,         "DiracKernels")
  captureDump(addDistribution,        "Distributions")
  captureDump(addFunction,            "Functions")
  captureDump(addFVKernel,            "FVKernels")
  captureDump(addIndicator,           "Adaptivity/Indicators")
  captureDump(addInitialCondition,    "ICs")
  captureDump(addFVInitialCondition,  "FVICs")
  captureDump(addInterfaceKernel,     "InterfaceKernels")
  captureDump(addFVInterfaceKernel,   "FVInterfaceKernels")
  captureDump(addKernel,              "Kernels")
  captureDump(addMarker,              "Adaptivity/Markers")
  captureDump(addMaterial,            "Materials")
  captureDump(addMultiApp,            "MultiApps")
  captureDump(addNodalKernel,         "NodalKernels")
  captureDump(addPostprocessor,       "Postprocessors")
  captureDump(addPredictor,           "Executioner/Predictor")
  captureDump(addSampler,             "Samplers")
  captureDump(addScalarKernel,        "ScalarKernels")
  captureDump(addTransfer,            "Transfers")
  captureDump(addVariable,            "Variables")
  captureDump(addVectorPostprocessor, "VectorPostprocessors")
  // clang-format off
};
