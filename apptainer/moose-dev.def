{#- Required jinja arguments                                                                  -#}
{#- APPTAINER_BOOTSTRAP: The BootStrap to use (typically localimage or oras)                  -#}
{#- APPTAINER_FROM: The From to use (path to an image or an oras URI)                         -#}
{#- MOOSE_DIR: Path on the host to the MOOSE repository                                       -#}
{#- WASP_GIT_SHA: The git SHA to use for WASP                                                 -#}
{#- WASP_GIT_REMOTE: The git remote to use to get WASP                                        -#}

{#- Optional jinja arguments                                                                  -#}
{#- CONDA_ALT_CHANNEL: An alternate channel to add to conda                                   -#}
{#- MOOSE_TOOLS_VERSION: The version to pin moose-tools to (if any)                           -#}
{#- MOOSE_JOBS: Number of jobs to pass to the builds                                          -#}
{#- WITH_LIBTORCH: The libtorch distribution to use (cpu, cu121, etc); default: cpu           -#}
{#- PROFILING: Set to anything to build for profiling (add gperftools)                        -#}

{#- Set WITH_LIBTORCH default if not set                                                      -#}
{%- if WITH_LIBTORCH is not defined %}
{%- set WITH_LIBTORCH = 'cpu' %}
{%- endif %}

{#- The within-container build directory to use                                               -#}
{%- set ROOT_BUILD_DIR = '/root/build' -%}

{#- Location to install miniforge3                                                            -#}
{%- set MOOSE_MINIFORGE = '/opt/miniforge3' -%}

{#- The installation location for wasp                                                        -#}
{%- set WASP_DIR = '/opt/wasp' -%}
{#- The installation location for gperftools                                                  -#}
{%- set GPERF_DIR = '/opt/gperftools' -%}
{#- The installation location for pprof                                                       -#}
{%- set PPROF_DIR = '/opt/pprof' -%}
{#- We need this here because more than one block will use it                                 -#}
{%- set MOOSE_PYTHON_VERSION = '3.11' -%}

{#- The script used to install wasp                                                           -#}
{%- set WASP_BUILD_SCRIPT = 'update_and_rebuild_wasp.sh' -%}

{#- The files directory for this definition                                                   -#}
{%- set FILES_DIR = MOOSE_DIR + '/apptainer/files/moose-dev' -%}

BootStrap: {{ APPTAINER_BOOTSTRAP }}
From: {{ APPTAINER_FROM }}
# MOOSE-NCRC key
Fingerprints: 0CFFCAB55E806363601C442D211817B01E0911DB

%environment
    export PATH={{ MOOSE_MINIFORGE }}/bin:/opt/code-server/bin:$PATH
    source activate {{ MOOSE_MINIFORGE }}

    export WASP_DIR={{ WASP_DIR }}
    export PATH=${WASP_DIR}/bin:$PATH

{%- if WITH_LIBTORCH %}
    # Make libtorch visible to moose
    export LIBTORCH_DIR={{ MOOSE_MINIFORGE }}/lib/python{{ MOOSE_PYTHON_VERSION }}/site-packages/torch
    # Adding this to not get GPU initialization errors from MPICH
    export MPIR_CVAR_ENABLE_GPU=0
{%- endif %}

{% if PROFILING is defined %}
    # For profiling
    export GPERF_DIR={{ GPERF_DIR }}
    export PATH={{ PPROF_DIR }}/bin:$PATH
    export METHOD=oprof
{%- endif %}

%post
    umask 022

    # Load jinja vars
    ROOT_BUILD_DIR={{ ROOT_BUILD_DIR }}
    MOOSE_MINIFORGE={{ MOOSE_MINIFORGE }}
    MOOSE_CONDA_ENV_NAME={{ MOOSE_CONDA_ENV_NAME }}
    MOOSE_TOOLS_VERSION={{ MOOSE_TOOLS_VERSION }}
    CONDA_ALT_CHANNEL={{ CONDA_ALT_CHANNEL }}
    WASP_BUILD_SCRIPT=${ROOT_BUILD_DIR}/{{ WASP_BUILD_SCRIPT }}
    WASP_DIR={{ WASP_DIR }}
    WASP_GIT_SHA={{ WASP_GIT_SHA }}
    WASP_GIT_REMOTE={{ WASP_GIT_REMOTE }}
    export MOOSE_JOBS={{ MOOSE_JOBS }}

    # Pinned versions
    MINIFORGE_VERSION=23.3.1-1
    PYTHON_VERSION={{ MOOSE_PYTHON_VERSION }}
    echo $PYTHON_VERSION
    CODE_SERVER_VERSION=4.92.2

    # Install code-server
    CODE_SERVER_FILE=code-server-${CODE_SERVER_VERSION}-amd64.rpm
    cd ${ROOT_BUILD_DIR}
    curl -fOL https://github.com/coder/code-server/releases/download/v${CODE_SERVER_VERSION}/${CODE_SERVER_FILE}
    rpm -i ${CODE_SERVER_FILE}
    rm ${CODE_SERVER_FILE}

    # Setup directory for code-server extensions. The extensions folder can be
    # filled by other applications as they wish to have extensions auto installed
    # by the "setup-code-server-extensions" script (in PATH)
    mkdir /opt/code-server/extensions
    # Download extensions for code-server, currently just moose language support
    MOOSE_LANGUAGE_SUPPORT_VERSION=1.1.2
    cd /opt/code-server/extensions
    curl -L -O https://github.com/idaholab/moose-language-support/releases/download/v${MOOSE_LANGUAGE_SUPPORT_VERSION}/DanielSchwen.moose-language-support-${MOOSE_LANGUAGE_SUPPORT_VERSION}.vsix

    # Setup permissions for the code server extras
    find /opt/code-server -type d -exec chmod 755 {} +
    chmod 755 /opt/code-server/bin/*
    chmod 644 /opt/code-server/extensions/*

    # Clone WASP
    cd ${ROOT_BUILD_DIR}
    WASP_SRC_DIR=${ROOT_BUILD_DIR}/wasp
    git clone ${WASP_GIT_REMOTE} ${WASP_SRC_DIR}
    cd ${WASP_SRC_DIR}
    git checkout ${WASP_GIT_SHA}
    git submodule update --init --recursive

    # Build and install wasp
    # This is redundant; hopefully we can use the one from conda in the future
    WASP_SRC_DIR=${WASP_SRC_DIR} ${WASP_BUILD_SCRIPT} -D CMAKE_INSTALL_PREFIX:STRING=${WASP_DIR}

    # Install miniforge in MOOSE_MINIFORGE
    MINIFORGE_SCRIPT=${ROOT_BUILD_DIR}/miniforge3.sh
    curl -L https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-x86_64.sh -o ${MINIFORGE_SCRIPT}
    bash ${MINIFORGE_SCRIPT} -b -p ${MOOSE_MINIFORGE}
    rm ${MINIFORGE_SCRIPT}
    PATH=${MOOSE_MINIFORGE}/bin:$PATH
    conda update -yq --all

    # Add moose channels
    conda config --env --add channels https://conda.software.inl.gov/public
    # Add an alt channel if given
    if [ -n "$CONDA_ALT_CHANNEL" ]; then
        conda config --env --add channels ${CONDA_ALT_CHANNEL}
    fi

    # Create list of Conda Packages to install
    MAMBA_PACKAGES="moose-tools=${MOOSE_TOOLS_VERSION}"
    # Install packages
    conda install -yq python=${PYTHON_VERSION} ${MAMBA_PACKAGES}
    # Needed for coverage
    pip3 --no-cache install lcov-cobertura

{%- if WITH_LIBTORCH %}
    # Libtorch-related vars
    LIBTORCH_VER=2.3.0
    LIBTORCH_DISTRIBUTION={{ WITH_LIBTORCH }}

    # Clone pytorch
    cd ${ROOT_BUILD_DIR}
    git clone -b v${LIBTORCH_VER} --recursive https://github.com/pytorch/pytorch
    cd pytorch

    # Install the python requirements
    pip install -r requirements.txt

    # Below a certain version we need to downgrade our numpy
    if { echo ${LIBTORCH_VER}; echo "2.2.0"; } | sort --version-sort --check=quiet; then
      conda install -yq "numpy<2.0"
    fi

    # Fetch the patch that enables the successful compilation on this linux distro
    curl -L https://github.com/pytorch/pytorch/pull/99468.patch > 99468.patch
    git apply 99468.patch

    # We have to diasble some errors considering they emerge as some optimization of the compiler on certain distributuins (sadly on this one to)
    export CFLAGS+=" -Wno-error=maybe-uninitialized -Wno-error=uninitialized -Wno-error=restrict"
    export CXXFLAGS+=" -Wno-error=maybe-uninitialized -Wno-error=uninitialized -Wno-error=restrict"

    # Build and install
    export CMAKE_PREFIX_PATH="${CONDA_PREFIX:-'$(dirname $(which conda))/../'}:${CMAKE_PREFIX_PATH}"
    MAX_JOBS=${MOOSE_JOBS} python setup.py install

{%- if WITH_LIBTORCH.startswith('cu') %}
    # We install CUDA Toolkit if the user wants cuda-based libtorch.
    # Right now this assumes that cuda-based distributions start with -cu-
        dnf -y install epel-release
        CUDA_RPM=${BUILD_DIR}/cuda.rpm
        curl -L https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda-repo-rhel8-11-4-local-11.4.0_470.42.01-1.x86_64.rpm -o ${CUDA_RPM}
        rpm -i ${CUDA_RPM}
        dnf -y install cuda
        rm -rf ${CUDA_RPM}
{%- endif %}
{%- endif %}

    # Install node.js. Requested by dschwen for bison
    dnf install -y nodejs npm

{% if PROFILING is defined %}
    # Install gperftools
    GPERFTOOLS_VERSION=gperftools-2.15
    cd ${ROOT_BUILD_DIR}
    git clone -b ${GPERFTOOLS_VERSION} --single-branch https://github.com/gperftools/gperftools.git
    GPERFTOOLS_SRC=${ROOT_BUILD_DIR}/gperftools
    cd ${GPERFTOOLS_SRC}
    ./autogen.sh
    ./configure --prefix={{ GPERF_DIR }} --enable-frame-pointers
    make -j ${MOOSE_JOBS}
    make install
    cd ~
    rm -rf ${GPERFTOOLS_SRC}

    # Install go for building pprof; to be removed
    GO_VERSION=1.23.1
    GO_TAR=${ROOT_BUILD_DIR}/go.tar.gz
    curl -L https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz -o ${GO_TAR}
    tar -C ${ROOT_BUILD_DIR} -xf ${GO_TAR}
    rm -rf ${GO_TAR}
    export PATH=${ROOT_BUILD_DIR}/go/bin:${PATH}
    export GOPATH=${ROOT_BUILD_DIR}/gopath
    mkdir ${GOPATH}

    # Install pprof
    PPROF_VERSION=a0b0bb1d4134f37be44de6c328680339b0fc13ad
    GOBIN={{ PPROF_DIR }}/bin go install github.com/google/pprof@${PPROF_VERSION}

    # Remove go now that pprof is installed
    go clean -cache -modcache
    rm -rf ${GOPATH} ${ROOT_BUILD_DIR}/go
{%- endif %}

    # Clean up
    conda clean -ya
    dnf clean all
    rm -rf ${ROOT_BUILD_DIR}

%files
    {{ FILES_DIR }}/opt/code-server/bin/code-server-setup-extensions /opt/code-server/bin/code-server-setup-extensions
    {{ FILES_DIR }}/opt/code-server/bin/code-server-start /opt/code-server/bin/code-server-start
    {{ MOOSE_DIR }}/scripts/{{ WASP_BUILD_SCRIPT }} {{ ROOT_BUILD_DIR }}/{{ WASP_BUILD_SCRIPT }}
    {{ MOOSE_DIR }}/scripts/configure_wasp.sh {{ ROOT_BUILD_DIR }}/configure_wasp.sh
