{#- Required jinja arguments                                                                  -#}
{#- APPTAINER_BOOTSTRAP: The BootStrap to use (typically localimage or oras)                  -#}
{#- APPTAINER_FROM: The From to use (path to an image or an oras URI)                         -#}
{#- MOOSE_DIR: Path on the host to the MOOSE repository                                       -#}
{#- NEML2_GIT_SHA: The git SHA to use for neml2                                               -#}
{#- NEML2_GIT_REMOTE: The git remote to use to get neml2                                      -#}
{#- WASP_GIT_SHA: The git SHA to use for WASP                                                 -#}
{#- WASP_GIT_REMOTE: The git remote to use to get WASP                                        -#}

{#- Optional jinja arguments                                                                  -#}
{#- CONDA_ALT_CHANNEL: An alternate channel to add to conda                                   -#}
{#- CONDUIT_GIT_SHA: The git SHA to use for conduit                                           -#}
{#- CONDUIT_GIT_REMOTE: The git remote to use to get conduit                                  -#}
{#- CONDUIT_OPTIONS: Options to pass to conduit build                                         -#}
{#- MFEM_GIT_SHA: The git SHA to use for MFEM                                                 -#}
{#- MFEM_GIT_REMOTE: The git remote to use to get MFEM                                        -#}
{#- MFEM_OPTIONS: Options to pass to mfem build                                               -#}
{#- MOOSE_TOOLS_VERSION: The version to pin moose-tools to (if any)                           -#}
{#- MOOSE_JOBS: Number of jobs to pass to the builds                                          -#}
{#- PROFILING: Set to anything to build for profiling (add gperftools)                        -#}
{#- SKIP_FINGERPRINTS: Set to skip fingerprint verification                                   -#}
{#- WITH_MFEM: Whether or not to build mfem (default: 1 to build, 0 to not build)             -#}
{#- WITHOUT_PYTORCH: Set to anything to not build/download pytorch and neml2                  -#}

{#- Set WITH_MFEM default if not set                                                          -#}
{%- if WITH_MFEM is not defined %}
{%- set WITH_MFEM = '1' %}
{%- endif %}

{#- The within-container build directory to use                                               -#}
{%- set ROOT_BUILD_DIR = '/root/build' -%}

{#- Location to install miniforge3                                                            -#}
{%- set MINIFORGE_DIR = '/opt/miniforge3' -%}
{#- Name of the environment to create in conda                                                -#}
{%- set MOOSE_CONDA_ENV_NAME = 'moose' -%}

{#- The installation location for gperftools                                                  -#}
{%- set GPERF_DIR = '/opt/gperftools' -%}
{#- The installation location for pprof                                                       -#}
{%- set PPROF_DIR = '/opt/pprof' -%}
{#- The installation location for libtorch                                                    -#}
{%- set LIBTORCH_DIR = '/opt/libtorch' -%}
{#- The script used to install conduit                                                        -#}
{%- set CONDUIT_BUILD_SCRIPT = 'update_and_rebuild_conduit.sh' -%}
{#- The installation location for conduit                                                     -#}
{%- set CONDUIT_DIR = '/opt/conduit' -%}
{#- The script used to install mfem                                                           -#}
{%- set MFEM_BUILD_SCRIPT = 'update_and_rebuild_mfem.sh' -%}
{#- The installation location for mfem                                                        -#}
{%- set MFEM_DIR = '/opt/mfem' -%}
{#- The script used to install wasp                                                           -#}
{%- set WASP_BUILD_SCRIPT = 'update_and_rebuild_wasp.sh' -%}
{#- The installation location for wasp                                                        -#}
{%- set WASP_DIR = '/opt/wasp' -%}
{#- The script used to install neml2                                                          -#}
{%- set NEML2_BUILD_SCRIPT = 'update_and_rebuild_neml2.sh' -%}
{#- The installation location for neml2                                                       -#}
{%- set NEML2_DIR = '/opt/neml2' -%}

{#- The files directory for this definition                                                   -#}
{%- set FILES_DIR = MOOSE_DIR + '/apptainer/files/moose-dev' -%}

BootStrap: {{ APPTAINER_BOOTSTRAP }}
From: {{ APPTAINER_FROM }}
{%- if SKIP_FINGERPRINTS is not defined %}
# MOOSE-NCRC key
Fingerprints: 0CFFCAB55E806363601C442D211817B01E0911DB
{%- endif %}

%environment
    if [ -d "{{ MINIFORGE_DIR }}" ]; then
        export PATH={{ MINIFORGE_DIR }}/bin:$PATH
    fi
    if [ -d "{{ MINIFORGE_DIR }}/envs/{{ MOOSE_CONDA_ENV_NAME }}" ]; then
        source activate {{ MINIFORGE_DIR }}/envs/{{ MOOSE_CONDA_ENV_NAME }}
    fi

    export PATH=/opt/code-server/bin:$PATH

    export WASP_DIR={{ WASP_DIR }}
    export PATH=${WASP_DIR}/bin:$PATH

{%- if WITH_MFEM %}
    if [ -d "{{ CONDUIT_DIR }}" ]; then
        export CONDUIT_DIR={{ CONDUIT_DIR }}
    fi
    if [ -d "{{ MFEM_DIR }}" ]; then
        export MFEM_DIR={{ MFEM_DIR }}
    fi
{%- endif %}

{% if WITHOUT_PYTORCH is not defined %}
    if [ -d "{{ LIBTORCH_DIR }}" ]; then
        export LIBTORCH_DIR={{ LIBTORCH_DIR }}
    fi
    if [ -d "{{ NEML2_DIR }}" ]; then
        export NEML2_DIR={{ NEML2_DIR }}
    fi
{%- endif %}

{% if PROFILING is defined %}
    # For profiling
    export GPERF_DIR={{ GPERF_DIR }}
    export PATH={{ PPROF_DIR }}/bin:$PATH
    export METHOD=oprof
{%- endif %}

%post
    umask 022

    # So that piping things to tee fails
    set -o pipefail

    # Load jinja vars
    ROOT_BUILD_DIR={{ ROOT_BUILD_DIR }}
    MINIFORGE_DIR={{ MINIFORGE_DIR }}
    MOOSE_CONDA_ENV_NAME={{ MOOSE_CONDA_ENV_NAME }}
    MOOSE_TOOLS_VERSION={{ MOOSE_TOOLS_VERSION }}
    CONDA_ALT_CHANNEL={{ CONDA_ALT_CHANNEL }}
    WASP_BUILD_SCRIPT=${ROOT_BUILD_DIR}/{{ WASP_BUILD_SCRIPT }}
    WASP_DIR={{ WASP_DIR }}
    WASP_GIT_SHA={{ WASP_GIT_SHA }}
    WASP_GIT_REMOTE={{ WASP_GIT_REMOTE }}
    export MOOSE_JOBS={{ MOOSE_JOBS }}

    # Pinned versions
    CODE_SERVER_VERSION=4.104.0
{% if PROFILING is defined %}
    GPERFTOOLS_VERSION=2.15
    GO_VERSION=1.23.1
{%- endif %}
    MINIFORGE_VERSION=25.3.1-0
    PYTHON_VERSION=3.13
    PYTORCH_VERSION=2.7.1

    # Special runtime setup for OpenMPI
    if which ompi_info &> /dev/null; then
        # MFEM (and maybe other things?) use mpirun. In the case of openmpi,
        # we need to have a clean tmpdir for it to store state (which,
        # for some reason, /tmp doesn't work for this in fakeroot?)
        export TMPDIR=${ROOT_BUILD_DIR}/tmpdir
        mkdir $TMPDIR
    # Special runtime setup for MPICH
    else
        # Required at configure time for MFEM checking petsc
        export MPIR_CVAR_ENABLE_GPU=0
    fi

    # Install code-server
    CODE_SERVER_FILE=code-server-${CODE_SERVER_VERSION}-amd64.rpm
    cd ${ROOT_BUILD_DIR}
    curl -fOL https://github.com/coder/code-server/releases/download/v${CODE_SERVER_VERSION}/${CODE_SERVER_FILE}
    rpm -i ${CODE_SERVER_FILE}
    rm ${CODE_SERVER_FILE}

    # Setup directory for code-server extensions. The extensions folder can be
    # filled by other applications as they wish to have extensions auto installed
    # by the "setup-code-server-extensions" script (in PATH)
    mkdir /opt/code-server/extensions
    # Download extensions for code-server, currently just moose language support
    MOOSE_LANGUAGE_SUPPORT_VERSION=1.5.2
    cd /opt/code-server/extensions
    curl -L -O https://github.com/idaholab/moose-language-support/releases/download/v${MOOSE_LANGUAGE_SUPPORT_VERSION}/moose-language-support-${MOOSE_LANGUAGE_SUPPORT_VERSION}.vsix

    # Setup permissions for the code server extras
    find /opt/code-server -type d -exec chmod 755 {} +
    chmod 755 /opt/code-server/bin/*
    chmod 644 /opt/code-server/extensions/*

    # Need to expose cuda compat libs when using mpich with cuda to run mpicc
    if [ -n "$CUDA_DIR" ] && ! which ompi_info &> /dev/null; then
        export LD_LIBRARY_PATH=${CUDA_DIR}/compat:${LD_LIBRARY_PATH}
    fi

    # Build and install wasp
    # This is redundant; hopefully we can use the one from conda in the future
    cd ${ROOT_BUILD_DIR}
    mkdir -p ${WASP_DIR}/logs
    WASP_SRC_DIR=${ROOT_BUILD_DIR}/wasp
    git clone ${WASP_GIT_REMOTE} ${WASP_SRC_DIR}
    cd ${WASP_SRC_DIR}
    git checkout ${WASP_GIT_SHA}
    git submodule update --init --recursive
    WASP_SRC_DIR=${WASP_SRC_DIR} ${WASP_BUILD_SCRIPT} -D CMAKE_INSTALL_PREFIX:STRING=${WASP_DIR} 2>&1 | tee ${WASP_DIR}/logs/build.log
    rm -rf ${WASP_SRC_DIR}
    export WASP_DIR

    # Install miniforge in MINIFORGE_DIR
    cd ${ROOT_BUILD_DIR}
    MINIFORGE_SCRIPT=${ROOT_BUILD_DIR}/miniforge3.sh
    curl -L https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-x86_64.sh -o ${MINIFORGE_SCRIPT}
    bash ${MINIFORGE_SCRIPT} -b -p ${MINIFORGE_DIR}
    rm ${MINIFORGE_SCRIPT}
    export PATH=${MINIFORGE_DIR}/bin:$PATH
    conda update -yq --all

{% if WITHOUT_PYTORCH is not defined %}
    # Make ninja available for neml2 and libtorch builds
    dnf install -y ninja-build

    # Figure out compiler and version to see if we build torch or use prebuilt torch
    COMPILER=$(mpicxx -show | awk '{ print $1 }')
    # Explicitly silence all warnings because the build is loud (>5MB of output...)
    BUILD_PYTORCH_CCXXFLAGS=("-w")
    BUILD_PYTORCH_FLAGS=()
    if [ "$COMPILER" == "g++" ]; then
        BUILD_PYTORCH_CCXXFLAGS+=("-Wno-error=maybe-uninitialized" "-Wno-error=uninitialized" "-Wno-error=restrict")
        if [[ $(gcc --version) =~ [0-9]+.[0-9]+(.[0-9]+?) ]]; then
            GCC_VERSION="${BASH_REMATCH[0]}"
        else
            echo "Failed to parse GCC version"
            exit 1
        fi
    elif [ "$COMPILER" == "clang++" ]; then
        # FBGEMM requires AVX512, which we don't get with clang
        BUILD_PYTORCH_FLAGS+=("-DUSE_FBGEMM:BOOL=OFF")
    else
        echo "Unknown compiler $COMPILER"
        exit 1
    fi

    LIBTORCH_DIR={{ LIBTORCH_DIR }}
    # Clone pytorch for build
    cd ${ROOT_BUILD_DIR}
    git clone --branch v${PYTORCH_VERSION} --single-branch --recursive https://github.com/pytorch/pytorch
    PYTORCH_DIR=${ROOT_BUILD_DIR}/pytorch

    # Create a temporary python environment for building pytorch
    PYTORCH_CONDA_ENV=pytorch_build
    conda create -yq -n ${PYTORCH_CONDA_ENV} python=3.12
    source activate ${MINIFORGE_DIR}/envs/${PYTORCH_CONDA_ENV}
    pip3 install --no-cache -r ${PYTORCH_DIR}/requirements.txt

    # Need BLAS and LAPACK libs for torch in neml2
    dnf install -y openblas-devel

    # Require CUDA if we have cuda available
    if [ -n "$CUDA_DIR" ]; then
        # 7.0 V100 (sawtooth), 8.0 A100 (hoodoo), 8.6 A2 (milangpubuild), 8.9 L4 (rod, cone)
        export TORCH_CUDA_ARCH_LIST="7.0;8.0;8.6;8.9"
        BUILD_PYTORCH_FLAGS+=("-DUSA_CUDA:BOOL=ON" "-DCUDA_TOOLKIT_ROOT_DIR=${CUDA_DIR}")
    else
        BUILD_PYTORCH_FLAGS+=("-DUSA_CUDA:BOOL=OFF")
    fi
    # Build and install pytorch
    mkdir -p $LIBTORCH_DIR/logs
    PYTORCH_BUILD_DIR=${ROOT_BUILD_DIR}/pytorch_build
    mkdir ${PYTORCH_BUILD_DIR} && cd ${PYTORCH_BUILD_DIR}
    CC= CXX= F77= F90= FC= CFLAGS="${BUILD_PYTORCH_CCXXFLAGS[*]}" CXXFLAGS="${BUILD_PYTORCH_CCXXFLAGS[*]}" cmake \
        -GNinja \
        -DBUILD_SHARED_LIBS:BOOL=ON \
        -DCMAKE_BUILD_TYPE:STRING=Release \
        -DCMAKE_INSTALL_PREFIX:PATH=${LIBTORCH_DIR} \
        -DBUILD_PYTHON:BOOL=OFF \
        -DUSE_BLAS:BOOL=ON \
        -DBLAS:STRING=OpenBLAS \
        -DUSE_LAPACK:BOOL=ON \
        -DUSE_MPI:BOOL=OFF \
        -DUSE_SYSTEM_NCCL:BOOL=ON \
        "${BUILD_PYTORCH_FLAGS[@]}" \
        ${PYTORCH_DIR} 2>&1 | tee ${LIBTORCH_DIR}/logs/cmake.log
    cmake --build . --target install -- -j ${MOOSE_JOBS} 2>&1 | tee ${LIBTORCH_DIR}/logs/build.log

    # Cleanup the python build environment
    source deactivate
    conda env remove -y -n ${PYTORCH_CONDA_ENV}
    rm -rf ${PYTORCH_DIR} ${PYTORCH_BUILD_DIR}

    export LIBTORCH_DIR
    cd ${ROOT_BUILD_DIR}

    # TODO: Use a separate WITH_NEML2 for this stuff, or something like that
    # neml2 variables
    NEML2_GIT_SHA={{ NEML2_GIT_SHA }}
    NEML2_GIT_REMOTE={{ NEML2_GIT_REMOTE }}
    NEML2_DIR={{ NEML2_DIR }}
    NEML2_BUILD_SCRIPT=${ROOT_BUILD_DIR}/{{ NEML2_BUILD_SCRIPT }}

    # Build and install neml2
    cd ${ROOT_BUILD_DIR}
    mkdir -p ${NEML2_DIR}/logs
    NEML2_SRC_DIR=${ROOT_BUILD_DIR}/neml2
    git clone ${NEML2_GIT_REMOTE} ${NEML2_SRC_DIR}
    cd ${NEML2_SRC_DIR}
    git checkout ${NEML2_GIT_SHA}
    git submodule update --init --recursive
{% if PROFILING is defined %}
    METHODS="oprof"
{%- else %}
    METHODS="opt devel dbg"
{%- endif %}
    METHODS="$METHODS" NEML2_SRC_DIR=${NEML2_SRC_DIR} NEML2_DIR=${NEML2_DIR} ${NEML2_BUILD_SCRIPT} --skip-submodule-update 2>&1 | tee ${NEML2_DIR}/logs/build.log
    rm -rf ${NEML2_SRC_DIR}
{%- endif %}

{%- if WITH_MFEM %}
    # Load MFEM jinja variables
    CONDUIT_GIT_SHA={{ CONDUIT_GIT_SHA }}
    CONDUIT_GIT_REMOTE={{ CONDUIT_GIT_REMOTE }}
    CONDUIT_BUILD_SCRIPT=${ROOT_BUILD_DIR}/{{ CONDUIT_BUILD_SCRIPT }}
    CONDUIT_DIR={{ CONDUIT_DIR }}
    MFEM_BUILD_SCRIPT=${ROOT_BUILD_DIR}/{{ MFEM_BUILD_SCRIPT }}
    MFEM_DIR={{ MFEM_DIR }}
    MFEM_GIT_SHA={{ MFEM_GIT_SHA }}
    MFEM_GIT_REMOTE={{ MFEM_GIT_REMOTE }}

    # Clone conduit
    cd ${ROOT_BUILD_DIR}
    git clone $CONDUIT_GIT_REMOTE
    CONDUIT_SRC_DIR=${ROOT_BUILD_DIR}/conduit
    cd ${CONDUIT_SRC_DIR}
    git checkout $CONDUIT_GIT_SHA
    git submodule update --init

    # Clone MFEM
    cd ${ROOT_BUILD_DIR}
    git clone $MFEM_GIT_REMOTE
    MFEM_SRC_DIR=${ROOT_BUILD_DIR}/mfem
    cd ${MFEM_SRC_DIR}
    git checkout $MFEM_GIT_SHA

    # Install conduit
    mkdir -p ${CONDUIT_DIR}/logs
    CONDUIT_DIR=${CONDUIT_DIR} CONDUIT_SRC_DIR=${CONDUIT_SRC_DIR} ${CONDUIT_BUILD_SCRIPT} {{ CONDUIT_OPTIONS }} 2>&1 | tee ${CONDUIT_DIR}/logs/build.log

    # Load mfem options, split by word so that globbing works correctly
    IFS=' ' read -r -a MFEM_OPTIONS <<< "{{ MFEM_OPTIONS }}"
    if [ -n "$CUDA_DIR" ]; then
        # Additional options with cuda
        MFEM_OPTIONS+=("-DMFEM_USE_CUDA=ON" "-DSuperLUDist_VERSION_OK=YES" "-DCUDA_ARCH=sm_80")
        # Expose the compat libraries if we haven't already
        if [[ "$LD_LIBRARY_PATH" != *"${CUDA_DIR}/compat"* ]]; then
            export LD_LIBRARY_PATH=${CUDA_DIR}/compat:${LD_LIBRARY_PATH}
        fi
    fi

    # Install MFEM
    mkdir -p ${MFEM_DIR}/logs
    MFEM_DIR=${MFEM_DIR} MFEM_SRC_DIR=${MFEM_SRC_DIR} CONDUIT_DIR=${CONDUIT_DIR} ${MFEM_BUILD_SCRIPT} "${MFEM_OPTIONS[@]}" 2>&1 | tee ${MFEM_DIR}/logs/build.log

{%- endif %}

    # Add moose channels
    conda config --env --add channels https://conda.software.inl.gov/public
    # Add an alt channel if given
    if [ -n "$CONDA_ALT_CHANNEL" ]; then
        conda config --env --add channels ${CONDA_ALT_CHANNEL}
    fi
    # Create list of Conda Packages to install
    CONDA_PACKAGES="moose-tools=${MOOSE_TOOLS_VERSION}"
    # Install packages
    conda create -yq -n moose python=${PYTHON_VERSION} ${CONDA_PACKAGES}
    # Needed for coverage
    source activate moose
    pip3 --no-cache install lcov-cobertura

    # Install node.js. Requested by dschwen for bison
    dnf install -y nodejs npm

{% if PROFILING is defined %}
    # Install gperftools
    GPERF_DIR={{ GPERF_DIR }}
    cd ${ROOT_BUILD_DIR}
    mkdir -p ${GPERF_DIR}/logs
    git clone -b gperftools-${GPERFTOOLS_VERSION} --single-branch https://github.com/gperftools/gperftools.git
    GPERFTOOLS_SRC=${ROOT_BUILD_DIR}/gperftools
    cd ${GPERFTOOLS_SRC}
    ./autogen.sh 2>&1 | tee ${GPERF_DIR}/logs/autogen.log
    ./configure --prefix=${GPERF_DIR} --enable-frame-pointers 2>&1 | tee ${GPERF_DIR}/logs/configure.log
    make -j ${MOOSE_JOBS} 2>&1 | tee ${GPERF_DIR}/logs/build.log
    make install 2>&1 | tee ${GPERF_DIR}/logs/install.log
    cd ~
    rm -rf ${GPERFTOOLS_SRC}

    # Install go for building pprof; to be removed
    GO_TAR=${ROOT_BUILD_DIR}/go.tar.gz
    curl -L https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz -o ${GO_TAR}
    tar -C ${ROOT_BUILD_DIR} -xf ${GO_TAR}
    rm -rf ${GO_TAR}
    export PATH=${ROOT_BUILD_DIR}/go/bin:${PATH}
    export GOPATH=${ROOT_BUILD_DIR}/gopath
    mkdir ${GOPATH}

    # Install pprof
    PPROF_VERSION=a0b0bb1d4134f37be44de6c328680339b0fc13ad
    PPROF_DIR={{ PPROF_DIR }}
    mkdir -p ${PPROF_DIR}/logs
    GOBIN=${PPROF_DIR}/bin go install github.com/google/pprof@${PPROF_VERSION} | tee ${PPROF_DIR}/logs/configure.log

    # Remove go now that pprof is installed
    go clean -cache -modcache
    rm -rf ${GOPATH} ${ROOT_BUILD_DIR}/go
{%- endif %}

    cd ${ROOT_BUILD_DIR}
    git clone https://github.com/NTNU-IHB/PythonFMU.git
    cd PythonFMU/
    bash build_unix.sh
    cd ${ROOT_BUILD_DIR}/PythonFMU
    pip install .

    # Clean up
    conda clean -ya
    dnf clean all
    rm -rf ${ROOT_BUILD_DIR}

%files
    # code-server helpers
    {{ FILES_DIR }}/opt/code-server/bin/code-server-setup-extensions /opt/code-server/bin/code-server-setup-extensions
    {{ FILES_DIR }}/opt/code-server/bin/code-server-start /opt/code-server/bin/code-server-start
    # wasp
    {{ MOOSE_DIR }}/scripts/{{ WASP_BUILD_SCRIPT }} {{ ROOT_BUILD_DIR }}/{{ WASP_BUILD_SCRIPT }}
    {{ MOOSE_DIR }}/scripts/configure_wasp.sh {{ ROOT_BUILD_DIR }}/configure_wasp.sh
    # mfem
    {{ MOOSE_DIR }}/scripts/{{ MFEM_BUILD_SCRIPT }} {{ ROOT_BUILD_DIR }}/{{ MFEM_BUILD_SCRIPT }}
    {{ MOOSE_DIR }}/scripts/{{ CONDUIT_BUILD_SCRIPT }} {{ ROOT_BUILD_DIR }}/{{ CONDUIT_BUILD_SCRIPT }}
{% if WITHOUT_PYTORCH is not defined %}
    # neml2
    {{ MOOSE_DIR }}/scripts/configure_neml2.sh {{ ROOT_BUILD_DIR }}/configure_neml2.sh
    {{ MOOSE_DIR }}/scripts/{{ NEML2_BUILD_SCRIPT }} {{ ROOT_BUILD_DIR }}/{{ NEML2_BUILD_SCRIPT }}
{%- endif %}
