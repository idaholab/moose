{#- Required jinja arguments                                                                  -#}
{#- APPTAINER_BOOTSTRAP: The BootStrap to use (typically localimage or oras)                  -#}
{#- APPTAINER_FROM: The From to use (path to an image or an oras URI)                         -#}
{#- LIBMESH_GIT_SHA: The git SHA to use for libmesh                                           -#}
{#- LIBMESH_GIT_REMOTE: The git remote to use to get libmesh                                  -#}
{#- MOOSE_DIR: Path on the host to the MOOSE repository                                       -#}
{#- vtk_url: URL to download VTK                                                              -#}
{#- vtk_sha256: The shasum for downloaded file                                                -#}
{#- vtk_vtk_friendly_version: The short version name. vtk_vtk_ is not a typo                  -#}

{#- Optional jinja arguments                                                                  -#}
{#- LIBMESH_OPTIONS: Options to pass to the libMesh build script                              -#}
{#- MOOSE_JOBS: Number of jobs to pass to the libMesh build script                            -#}
{#- METHODS: Methods to build (defaults to all methods)                                       -#}

{#- The within-container build directory to use                                               -#}
{%- set ROOT_BUILD_DIR = '/root/build' -%}

{#- The installation location for libMesh                                                     -#}
{%- set LIBMESH_DIR = '/opt/libmesh' -%}

{#- The installation location for VTK                                                         -#}
{%- set VTK_DIR = '/opt/vtk' -%}

{#- The script used to install libmesh                                                        -#}
{%- set LIBMESH_BUILD_SCRIPT = 'update_and_rebuild_libmesh.sh' -%}

BootStrap: {{ APPTAINER_BOOTSTRAP }}
From: {{ APPTAINER_FROM }}
# MOOSE-NCRC key
Fingerprints: 0CFFCAB55E806363601C442D211817B01E0911DB

%environment
    # From moose-libmesh
    export LIBMESH_DIR={{ LIBMESH_DIR }}
    if ! $CC --version | grep --quiet "clang version 16"; then
      export VTKINCLUDE_DIR={{ VTK_DIR }}/include/vtk-{{ vtk_vtk_friendly_version }}
      export VTKLIB_DIR={{ VTK_DIR }}/lib
    fi

%post
    # Load jinja vars
    ROOT_BUILD_DIR={{ ROOT_BUILD_DIR }}
    LIBMESH_DIR={{ LIBMESH_DIR }}
    LIBMESH_GIT_SHA={{ LIBMESH_GIT_SHA }}
    LIBMESH_GIT_REMOTE={{ LIBMESH_GIT_REMOTE }}
    MOOSE_JOBS={{ MOOSE_JOBS }}
    VTK_DIR={{ VTK_DIR }}
    VTK_URL={{ vtk_url }}
    VTK_SHA256={{ vtk_sha256 }}
    VTKINCLUDE_DIR={{ VTK_DIR }}/include/vtk-{{ vtk_vtk_friendly_version }}
    VTKLIB_DIR={{ VTK_DIR }}/lib

    # Don't build VTK for clang 16; 9.2.6 currently doesn't build for clang 16.
    # VTK 9.3 does build for clang 16, but it diffs horribly due to a few bugs
    if ! $CC --version | grep --quiet "clang version 16"; then
        # Obtain VTK
        cd ${ROOT_BUILD_DIR}
        curl -L -O {{vtk_url}} || exit 1
        if [[ `sha256sum $(basename ${VTK_URL}) | cut -d\  -f1` != "${VTK_SHA256}" ]]; then exit 1; fi
        tar -xf $(basename ${VTK_URL})

        # Build VTK
        cd ${ROOT_BUILD_DIR}/$(basename ${VTK_URL} .tar.gz)

        mkdir -p build; cd build
        cmake .. \
            -Wno-dev \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH:PATH=${VTK_DIR} \
            -DCMAKE_INSTALL_PREFIX:PATH=${VTK_DIR} \
            -DCMAKE_INSTALL_RPATH:PATH=${VTK_DIR}/lib \
            -DCMAKE_INSTALL_LIBDIR=lib \
            -DVTK_BUILD_DOCUMENTATION:BOOL=OFF \
            -DVTK_BUILD_TESTING:BOOL=OFF \
            -DVTK_BUILD_EXAMPLES:BOOL=OFF \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DVTK_USE_MPI:BOOL=ON \
            -DVTK_GROUP_ENABLE_Rendering:STRING=DONT_WANT \
            -DVTK_GROUP_ENABLE_Qt::STRING=NO \
            -DVTK_GROUP_ENABLE_Views:STRING=NO \
            -DVTK_GROUP_ENABLE_Web:STRING=NO
        make install -j ${MOOSE_JOBS}
        export VTKINCLUDE_DIR
        export VTKLIB_DIR
    fi

    # Clone libmesh
    LIBMESH_SRC_DIR=${ROOT_BUILD_DIR}/libmesh
    git clone ${LIBMESH_GIT_REMOTE} ${LIBMESH_SRC_DIR}
    cd ${LIBMESH_SRC_DIR}
    git checkout ${LIBMESH_GIT_SHA}
    git submodule update --init --recursive

    # Build libMesh
    umask 022
    cd ${ROOT_BUILD_DIR}
    METHODS="{{ METHODS or "opt dbg oprof devel" }}"
    LIBMESH_SRC_DIR=${LIBMESH_SRC_DIR} LIBMESH_DIR=${LIBMESH_DIR} MOOSE_JOBS=${MOOSE_JOBS} METHODS=${METHODS} ./scripts/{{ LIBMESH_BUILD_SCRIPT }} {{ LIBMESH_OPTIONS }} --skip-submodule-update

    # Fix possibly bad permissions
    chmod -R o=u-w,g=u-w ${LIBMESH_DIR}

    # Clean Up
    rm -rf ${ROOT_BUILD_DIR}
    dnf clean all

%files
    {{ MOOSE_DIR }}/scripts/{{ LIBMESH_BUILD_SCRIPT }} {{ ROOT_BUILD_DIR }}/scripts/{{ LIBMESH_BUILD_SCRIPT }}
    {{ MOOSE_DIR }}/scripts/configure_libmesh.sh {{ ROOT_BUILD_DIR }}/scripts/configure_libmesh.sh
