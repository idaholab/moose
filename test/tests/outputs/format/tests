[Tests]
  parallel_scheduling = True

  [nemesis_out_test]
    type = 'CheckFiles'
    input = 'output_test_nemesis.i'
    check_files = 'out.e.1.0'
    # If you run on more processors, it changes the output filename to
    # e.g. out.e.2.0 and out.e.2.1, so this test will only pass if you
    # run it on one processor.
    max_parallel = 1
    min_parallel = 1
    issues = '#920'
    design = 'Nemesis.md'
    requirement = 'The system shall support Nemesis output.'
  []

  [gmv_out_test]
    type = 'CheckFiles'
    input = 'output_test_gmv.i'
    check_files = 'output_test_gmv_out_0000.gmv'
    recover = false
    issues = '#920'
    design = 'GMVOutput.md'
    requirement = 'The system shall support GMV output.'
  []

  [tecplot_out_test]
    type = 'CheckFiles'
    input = 'output_test_tecplot.i'
    check_files = 'output_test_tecplot_out_0000.dat'
    design = 'Tecplot.md'
    requirement = 'The system shall support Tecplot output.'
    issues = '#920'
  []

  [tecplot_bin_test]
    type = 'CheckFiles'
    input = 'output_test_tecplot_binary.i'
    check_files = 'output_test_tecplot_binary_out_0000.plt'
    capabilities = 'tecplot'
    issues = '#3403'
    design = 'Tecplot.md'
    requirement = 'The system shall support Tecplot output given in Tecplot binary format if the Tecplot API is available.'
  []

  [tecplot_bin_test_override]
    type = 'CheckFiles'
    input = 'output_test_tecplot_binary.i'
    check_files = 'output_test_tecplot_binary_out_0000.dat'
    capabilities = '!tecplot'
    allow_warnings = true
    design = 'Tecplot.md'
    issues = '#3403'
    requirement = 'The system shall support Tecplot output given in ASCII format if the Tecplot API is not available.'
  []

  [gnuplot_ps_out_test]
    type = 'CheckFiles'
    input = 'output_test_gnuplot_ps.i'
    check_files = 'output_test_gnuplot_ps_out.gp output_test_gnuplot_ps_out.dat'
    issues = '#920'
    design = 'Gnuplot.md'
    requirement = 'The system shall be able to generate gnuplot PostScript output.'
  []

  [gnuplot_png_out_test]
    type = 'CheckFiles'
    input = 'output_test_gnuplot.i'
    check_files = 'output_test_gnuplot_out.gp output_test_gnuplot_out.dat'
    issues = '#920'
    design = 'Gnuplot.md'
    requirement = 'The system shall be able to generate gnuplot PNG output.'
  []

  [gnuplot_gif_out_test]
    type = 'CheckFiles'
    input = 'output_test_gnuplot_gif.i'
    check_files = 'output_test_gnuplot_gif_out.gp output_test_gnuplot_gif_out.dat'
    issues = '#920'
    design = 'Gnuplot.md'
    requirement = 'The system shall be able to generate gnuplot GIF output.'
  []

  [pps_screen_out_warn_test]
    type = 'RunApp'
    input = 'pps_screen_out_warn.i'
    expect_out = "The post-processor 'avg_block' has requested to be output by the 'console' output, but post-processor output is disabled for that output object"
    allow_warnings = true
    max_parallel = 1 # warning can mix on multiple processes
    issues = '#1426'
    design = 'syntax/Outputs/index.md'
    requirement = 'The system shall warn the user if a postprocessor utilizes the "outputs" parameter but postprocessor output is disabled for the console object.'
  []

  [show_input_test]
    type = 'RunApp'
    input = 'output_test_gmv.i'
    expect_out = 'type\s*=\s*GeneratedMesh'
    cli_args = '--show-input'
    prereq = 'gmv_out_test'
    issues = '#1404 #1131'
    design = 'MooseApp.md'
    requirement = 'The system shall print parameters when the `--show-input` flag is used on the command line.'
  []

  [sln_out_test]
    type = 'CheckFiles'
    input = 'output_test_sln.i'
    check_files = 'output_test_sln_out.slh'
    design = 'SolutionHistory.md'
    requirement = 'The system shall support solution history output.'
    issues = '#920'
  []

  [xdr_output]
    type = 'CheckFiles'
    input = 'output_test_xdr.i'
    check_files = 'output_test_xdr_out_0001.xdr output_test_xdr_out_0001_mesh.xdr'
    design = 'XDA.md'
    issues = '#2243'
    requirement = 'The system shall support XDR output.'
  []

  [json_full]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestFull"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md MooseApp.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall be able to dump input file syntax in JSON format.'
  []

  [json_no_test_objects]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestNoTestObjects"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md MooseApp.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall be able to dump input file syntax in JSON format and exclude test object syntax.'
    prereq = 'json_full' # added to avoid race condition on JSON dump created
  []

  [json_search]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestSearch"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md MooseApp.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall be able to dump a subset of JSON formatted syntax.'
    prereq = 'json_no_test_objects' # added to avoid race condition on JSON dump created
  []

  [json_line_info]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestLineInfo"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md MooseApp.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall dump line information along with JSON formatted syntax.'
    prereq = 'json_search' # added to avoid race condition on JSON dump created
  []

  [json_no_template]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestNoTemplate"
    max_buffer_size = -1
    issues = '#12960'
    design = 'JsonInputFileFormatter.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall not include RESIDUAL and JACOBIAN template arguments in the JSON syntax format.'
    prereq = 'json_line_info' # added to avoid race condition on JSON dump created
  []

  [hit]
    type = 'PythonUnitTest'
    input = 'test_hit_output.py'
    test_case = 'TestInputFileFormat'
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md MooseApp.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall be able to dump input file (HIT) syntax.'
  []

  [hit_search]
    type = 'PythonUnitTest'
    input = 'test_hit_output.py'
    test_case = 'TestInputFileFormatSearch'
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md MooseApp.md'
    installation_type = in_tree # see #26480
    requirement = 'The system shall be able to dump a subset of input file (HIT) syntax.'
  []
[]
