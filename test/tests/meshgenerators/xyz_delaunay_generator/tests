[Tests]
  design = 'meshgenerators/XYZDelaunayGenerator.md'
  issues = '#28297 #29718 #30154'
  [xyzdelaunay]
    requirement = "The system shall have the capability of tetrahedralizing a triangulated boundary"
    [basic_3d]
      type = 'CSVDiff'
      input = 'xyzdelaunay_mesh_generator_3d.i'
      csvdiff = 'xyzdelaunay_mesh_generator_out.csv'
      recover = false
      detail = "within an input boundary mesh containing volume elements"
      capabilities = 'netgen'
    []
    [basic_2d]
      type = 'CSVDiff'
      input = 'xyzdelaunay_mesh_generator_2d.i'
      csvdiff = 'xyzdelaunay_mesh_generator_out.csv'
      recover = false
      detail = "within an input boundary mesh containing surface elements"
      capabilities = 'netgen'
    []
    [with_holes]
      type = 'CSVDiff'
      input = 'xyzdelaunay_with_holes_3d.i'
      csvdiff = 'xyzdelaunay_with_holes_out.csv'
      recover = false
      detail = "respecting any specified interior 'hole' meshes that contain volume elements"
      capabilities = 'netgen'
    []
    [stitching]
      type = 'CSVDiff'
      input = 'xyzdelaunay_stitching.i'
      cli_args = 'Mesh/final_generator=triang'
      csvdiff = 'xyzdelaunay_stitching_out.csv'
      recover = false
      detail = "selectively stitching 'hole' meshes into the final mesh"
      capabilities = 'netgen'
    []
    [convert_and_stitch]
      type = 'CSVDiff'
      input = 'xyzdelaunay_stitching.i'
      cli_args = 'Mesh/gmg/elem_type=HEX8
                  Mesh/triang/convert_holes_for_stitching=true
                  Mesh/final_generator=triang'
      csvdiff = 'xyzdelaunay_stitching_out.csv'
      recover = false
      detail = "selectively stitching 'hole' meshes into the final mesh after converting non-TET4 meshes"
      capabilities = 'netgen'
    []
    [nested]
      type = 'CSVDiff'
      input = 'xyzdelaunay_nested.i'
      csvdiff = 'xyzdelaunay_nested_out.csv'
      recover = false
      detail = "allowing deep nesting of tetrahedralizations within tetrahedralizations"
      # see 29718
      valgrind = none
      capabilities = 'netgen'
    []
    [smoothed]
      type = 'CSVDiff'
      input = 'xyzdelaunay_smoothed.i'
      csvdiff = 'xyzdelaunay_smoothed_out.csv'
      recover = false
      detail = "with optional Laplacian mesh smoothing."
      # see 29718
      valgrind = none
      capabilities = 'netgen'
    []
    [bcid_no_stitch]
      type = 'CSVDiff'
      input = 'xyzdelaunay_bcid.i'
      csvdiff = 'xyzdelaunay_bcid_csv.csv'
      recover = false
      detail = "with specified boundary names assigned without stitching the hole meshes."
      capabilities = 'netgen'
    []
    [bcid_stitch]
      type = 'CSVDiff'
      input = 'xyzdelaunay_bcid.i'
      cli_args = 'bcid_shift=26
                  Mesh/triang/stitch_holes="true true"'
      csvdiff = 'xyzdelaunay_bcid_csv.csv'
      recover = false
      detail = "with specified boundary names assigned with the hole meshes stitched."
      capabilities = 'netgen'
    []
    [bcid_numeric]
      type = 'CSVDiff'
      input = 'xyzdelaunay_bcid.i'
      cli_args = 'bcid_shift=36
                  Mesh/triang/output_boundary=36
                  Mesh/triang/hole_boundaries="37 38"
                  Postprocessors/ext_area_name/boundary="36"
                  Postprocessors/h1_area_name/boundary="37"
                  Postprocessors/h2_area_name/boundary="38"'
      csvdiff = 'xyzdelaunay_bcid_csv.csv'
      recover = false
      detail = "with specified boundary ids assigned."
      capabilities = 'netgen'
    []
  []
  [errors]
    requirement = "The system shall throw an error when tetrahedralizing a triangulated boundary"
    [conflicting_name_map]
      type = RunException
      input = 'xyzdelaunay_stitching.i'
      cli_args = '--mesh-only err.e
                  Mesh/triang/stitch_holes="true true"
                  Mesh/triang/holes="hole_1_name hole_2_name_2"'
      expect_err = "The hole meshes contain subdomain name maps with conflicts."
      detail = "if the input hole meshes contain subdomain name maps with conflicts"
      # see 29718
      valgrind = none
      capabilities = 'netgen'
    []
    [2d_holes]
      type = RunException
      input = 'xyzdelaunay_with_holes_2d.i'
      cli_args = '--mesh-only err.e'
      expect_err = "2D hole meshes are currently not supported."
      detail = "if a hole mesh contains 2D surface elements"
      capabilities = 'netgen'
    []
    [1d_holes]
      type = RunException
      input = 'xyzdelaunay_with_holes_1d.i'
      cli_args = '--mesh-only err.e'
      expect_err = "All elements in a hole mesh must 3D."
      detail = "if a hole mesh contains elements that are neither 2D nor 3D"
      capabilities = 'netgen'
    []
    [inconsistent_stitch_num]
      type = RunException
      input = 'xyzdelaunay_stitching.i'
      cli_args = 'Mesh/final_generator=triang
                  Mesh/triang/stitch_holes="true true true"'
      expect_err = "Need one stitch_holes entry per hole"
      detail = "if the number of hole meshes does not match the number of hole stitching flags"
      capabilities = 'netgen'
    []
    [inconsistent_bdry_num]
      type = RunException
      input = 'xyzdelaunay_bcid.i'
      cli_args = 'Mesh/triang/hole_boundaries="h1"'
      expect_err = "Need one hole_boundaries entry per hole"
      detail = "if the number of hole meshes does not match the number of assigned boundary names"
      capabilities = 'netgen'
    []
    [hole_mesh_mixed_dim]
      type = RunException
      input = 'err_xyzdelaunay_with_holes_mix.i'
      cli_args = '--mesh-only err.e'
      expect_err = "All elements in a hole mesh must have the same dimension"
      detail = "if a hole mesh contains elements of mixed dimensions"
      capabilities = 'netgen'
    []
    [convert_not_allowed]
      type = RunException
      input = 'xyzdelaunay_stitching.i'
      cli_args = 'Mesh/gmg/elem_type=HEX8
                  Mesh/final_generator=triang'
      expect_err = "3D hole meshes with non-TRI3 surface elements cannot be stitched"
      detail = "if a hole mesh to be stitched contains non-TRI3 surface elements but is not allowed to be converted"
      capabilities = 'netgen'
    []
  []
[]
