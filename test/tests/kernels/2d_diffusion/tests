[Tests]
  [test_jacobian]
    type = 'PetscJacobianTester'
    input = 'dirichletbc.i'
    cli_args = 'Outputs/exodus=false'
    recover = false
    requirement = 'The system shall provide a tester that checks hand-coded Jacobian against finite difference Jacobian using -snes_type=test option.'
    issues = '#2337'
    design = 'framework_stp.md'
  []
  [force_iteration]
    type = 'Exodiff'
    input = 'dirichletbc.i'
    exodiff = 'dirichletbc_out.e'
    cli_args = 'Executioner/nl_abs_tol=1e+1 Executioner/petsc_options_iname=-snes_force_iteration Executioner/petsc_options_value=1'
    petsc_version = '>=3.8.4'
    prereq = dirichletbc/nonad
    requirement = 'The system shall force the solver to take at least one iteration regardless of the initial residual norm when the snes_force_iteration option is specified.'
    issues = '#10594'
    design = 'Transient.md'
  []
  [actual_linear_solver]
    type = RunApp
    input = 'dirichletbc.i'
    cli_args = 'Executioner/solve_type=linear Outputs/exodus=false'
    absent_out = 'Nonlinear \|R\|'
    requirement = 'The system shall not compute an extra residual if the linear solver is used.'
    issues = '#11760'
    design = 'FEProblem.md'
  []


  [dirichletbc]
    requirement = 'The system shall provide an ability to solve a 2D diffusion problem with Dirichlet '
                  'boundary conditions using'
    design = '/ADDirichletBC.md /DirichletBC.md'
    [nonad]
      type = 'Exodiff'
      input = 'dirichletbc.i'
      exodiff = 'dirichletbc_out.e'
      scale_refine = 5
      detail = 'without automatic differentiation, '
      issues = '#6397'
    []
    [ad]
      type = 'Exodiff'
      input = 'dirichletbc.i'
      exodiff = 'ad_dirichletbc_out.e'
      scale_refine = 5
      detail = "with automatic differentiation, and"
      cli_args = 'AD=AD Outputs/file_base=ad_dirichletbc_out'
      issues = '#13260'
    []
    [ad-jac]
      type = 'PetscJacobianTester'
      input = 'dirichletbc.i'
      scale_refine = 5
      difference_tol = 1e-7
      detail = "compute the correct Jacobian matrix."
      cli_args = 'AD=AD Outputs/exodus=false'
      issues = '#13260'
    []
  []

  [neumannbc]
    requirement = 'The system shall provide an ability to solve a 2D diffusion problem Neumann boundary '
                  'conditions using'
    design = '/NeumannBC.md /ADNeumannBC.md'
    [nonad]
      type = 'Exodiff'
      input = 'neumannbc.i'
      exodiff = 'neumannbc_out.e'
      scale_refine = 5
      detail = 'without automatic differentiation, '
      issues = '#1410'
    []
    [ad]
      type = 'Exodiff'
      input = 'neumannbc.i'
      exodiff = 'ad_neumannbc_out.e'
      scale_refine = 5
      detail = "with automatic differentiation, and"
      cli_args = 'AD=AD Outputs/file_base=ad_neumannbc_out'
      issues = '#12903'
    []
    [ad-jac]
      type = 'PetscJacobianTester'
      input = 'neumannbc.i'
      scale_refine = 5
      difference_tol = 1e-7
      detail = "compute the correct Jacobian matrix."
      cli_args = 'AD=AD Outputs/exodus=false'
      issues = '#12903'
    []
  []
  [bodyforce]
    requirement = 'The system shall provide an ability to solve a 2D diffusion problem including a '
                  'volumetric source term using'
    design = '/BodyForce.md /ADBodyForce.md'
    [nonad]
      type = 'Exodiff'
      input = 'bodyforce.i'
      exodiff = 'bodyforce_out.e'
      scale_refine = 5
      detail = 'without automatic differentiation, '
      issues = '#6136'
    []
    [ad]
      type = 'Exodiff'
      input = 'bodyforce.i'
      exodiff = 'ad_bodyforce_out.e'
      scale_refine = 5
      detail = "with automatic differentiation, and"
      cli_args = 'AD=AD Outputs/file_base=ad_bodyforce_out'
      issues = '#13260'
    []
    [ad-jac]
      type = 'PetscJacobianTester'
      input = 'bodyforce.i'
      scale_refine = 5
      detail = "compute the correct Jacobian matrix."
      cli_args = 'AD=AD Outputs/exodus=false'
      issues = '#13260'
    []
  []
  [matdiffusion]
    requirement = 'The system shall provide a diffusion kernel that obtains the diffusion coefficient from a material property'
    design = '/MatDiffusion.md /ADMatDiffusion.md'
    [nonad]
      type = 'Exodiff'
      input = 'matdiffusion.i'
      exodiff = 'matdiffusion_out.e'
      detail = 'without automatic differentiation, '
      issues = '#12074'
    []
    [ad]
      type = 'Exodiff'
      input = 'matdiffusion.i'
      exodiff = 'ad_matdiffusion_out.e'
      scale_refine = 5
      detail = "with automatic differentiation, and"
      cli_args = 'AD=AD Outputs/file_base=ad_matdiffusion_out'
      issues = '#13260'
    []
  []
  [matdiffusion_coupled]
    requirement = 'The system shall provide a diffusion kernel that obtains the diffusion coefficient from a material property coupled with two variables'
    [nonad]
      type = 'Exodiff'
      input = 'matdiffusion_coupled.i'
      exodiff = 'matdiffusion_coupled_out.e'
      detail = 'without automatic differentiation, '
      cli_args = 'Kernels/u_diff/args=v Kernels/v_diff/args=u'
      issues = '#12074'
    []
    [ad]
      type = 'Exodiff'
      input = 'matdiffusion_coupled.i'
      exodiff = 'ad_matdiffusion_coupled_out.e'
      scale_refine = 5
      detail = "with automatic differentiation, and"
      cli_args = 'AD=AD Outputs/file_base=ad_matdiffusion_coupled_out'
      issues = '#13260'
    []
  []
[]
