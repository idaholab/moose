[Tests]
  design = 'ConservativeAdvection.md'
  issues = '#11852'

  [error]
    requirement = 'The system shall handle unique cases when trying to compute conservative advection '
    [no_velocity]
      type = RunException
      input = no_upwinding_1D.i
      detail = 'by throwing an error when no velocity is given,'
      expect_err = "Either velocity_variable or velocity_material must be specified"
    []
    [ad_no_velocity]
      type = RunException
      input = ad_no_upwinding_1D.i
      detail = 'by throwing an error when no velocity is given when using AD,'
      expect_err = "Either velocity_variable or velocity_material must be specified"
    []
    [deprecated_velocity]
      type = RunException
      input = no_upwinding_1D.i
      detail = 'by throwing a deprecation warning when no velocity is given when using AD,'
      cli_args = "Kernels/advection/velocity='1 0 0'"
      allow_deprecated = False
      expect_err = "'velocity' has been deprecated and will be removed on 12/31/2025. Please use 'velocity_variable' instead."
    []
    [ad_deprecated_velocity]
      type = RunException
      input = ad_no_upwinding_1D.i
      detail = 'by throwing a deprecation warning when velocity is given when using AD,'
      cli_args = "Kernels/advection/velocity=v Materials/v/type=ADGenericConstantVectorMaterial Materials/v/prop_names=v Materials/v/prop_values='1 0 0'"
      allow_deprecated = False
      expect_err = "'velocity' has been deprecated and will be removed on 12/31/2025. Please use 'velocity_material' instead."
    []
  []

  [upwinding]
    requirement = 'The system shall include the ability to compute the residual contribution from '
                  'the conservative form of the advection operator'

    [no_upwinding_jacobian]
      type = PetscJacobianTester
      input = no_upwinding_jacobian.i
      ratio_tol = 1E-7
      difference_tol = 1E-7
      detail = 'and compute a perfect jacobian without upwinding in 3D,'
    []
    [full_upwinding_jacobian]
      type = PetscJacobianTester
      input = full_upwinding_jacobian.i
      ratio_tol = 1E-7
      difference_tol = 1E-7
      detail = 'and compute a perfect jacobian with upwinding in 3D,'
    []
    [no_upwinding_1D]
      type = Exodiff
      input = no_upwinding_1D.i
      exodiff = no_upwinding_1D_out.e
      abs_zero = 1E-7
      cli_args = "Kernels/advection/velocity_variable='1 0 0'"
      detail = 'without upwinding in 1D, with velocity given as a variable,'
    []
    [no_upwinding_1D_mat]
      type = Exodiff
      input = no_upwinding_1D.i
      prereq = upwinding/no_upwinding_1D
      exodiff = no_upwinding_1D_mat_out.e
      abs_zero = 1E-7
      cli_args = "Outputs/file_base=no_upwinding_1D_mat_out Kernels/advection/velocity_material=v Materials/v/type=GenericConstantVectorMaterial Materials/v/prop_names=v Materials/v/prop_values='1 0 0'"
      detail = 'without upwinding in 1D, with velocity given as a material,'
    []
    [ad_no_upwinding_1D]
      type = Exodiff
      input = ad_no_upwinding_1D.i
      exodiff = ad_no_upwinding_1D_out.e
      abs_zero = 1E-7
      cli_args = "Kernels/advection/velocity_variable='1 0 0'"
      detail = 'without upwinding in 1D, with velocity given as a variable, using AD,'
    []
    [ad_no_upwinding_1D_mat]
      type = Exodiff
      input = ad_no_upwinding_1D.i
      prereq = upwinding/ad_no_upwinding_1D
      exodiff = ad_no_upwinding_1D_mat_out.e
      abs_zero = 1E-7
      cli_args = "Outputs/file_base=ad_no_upwinding_1D_mat_out Kernels/advection/velocity_material=v Materials/v/type=ADGenericConstantVectorMaterial Materials/v/prop_names=v Materials/v/prop_values='1 0 0'"
      detail = 'without upwinding in 1D, with velocity given as a material, using AD,'
    []
    [full_upwinding_1D]
      type = Exodiff
      input = full_upwinding_1D.i
      exodiff = full_upwinding_1D_out.e
      abs_zero = 1E-7
      detail = 'with upwinding in 1D,'
    []
    [no_upwinding_2D]
      type = Exodiff
      input = no_upwinding_2D.i
      exodiff = no_upwinding_2D_out.e
      abs_zero = 1E-7
      detail = 'without upwinding in 2D,'
    []
    [full_upwinding_2D]
      type = Exodiff
      input = full_upwinding_2D.i
      exodiff = full_upwinding_2D_out.e
      abs_zero = 1E-7
      detail = 'with upwinding in 2D,'
    []
    [none_in_all_out]
      type = Exodiff
      input = none_in_all_out.i
      exodiff = none_in_all_out_out.e
      abs_zero = 1E-7
      detail = 'with upwinding and an outflow boundary condition, and'
    []
    [none_in_none_out]
      type = CSVDiff
      input = none_in_none_out.i
      csvdiff = none_in_none_out_out.csv
      abs_zero = 1E-7
      detail = 'without any outflow boundary conditions.'
    []
  []
[]
