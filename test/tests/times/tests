[Tests]
  issues = '#24696 #25352'
  design = 'syntax/Times/index.md'

  [test]
    requirement = "The system shall be able to gather times from"

    [input]
      type = 'JSONDiff'
      input = 'input_times.i'
      jsondiff = 'input_times_out.json'
      detail = 'a parameter in the input file,'
    []
    [time_interval_with_end]
      type = 'JSONDiff'
      input = 'time_interval_times.i'
      jsondiff = 'time_interval_with_end.json'
      recover = False # recover modifies end time for first half
      detail = 'a fixed time interval between the transient start and end times, including the end time,'
    []
    [time_interval_without_end]
      type = 'JSONDiff'
      input = 'time_interval_times.i'
      cli_args = "
        Times/times/always_include_end_time=false
        Outputs/file_base=time_interval_without_end"
      jsondiff = 'time_interval_without_end.json'
      recover = False # recover modifies end time for first half
      detail = 'a fixed time interval between the transient start and end times, excluding the end time,'
    []
    [time_interval_custom]
      type = 'JSONDiff'
      input = 'time_interval_times.i'
      cli_args = "
        Times/times/start_time=20.0
        Times/times/end_time=24.0
        Outputs/file_base=time_interval_custom"
      jsondiff = 'time_interval_custom.json'
      detail = 'a fixed time interval between custom start and end times,'
    []
    [functors]
      type = 'JSONDiff'
      input = 'functor_times.i'
      jsondiff = 'functor_times_out.json'
      detail = 'a functor evaluated at the element containing the origin,'
      # Needs to be able to find the element containing the origin
      mesh_mode = replicated
    []
    [csv]
      type = 'JSONDiff'
      input = 'csv_times.i'
      jsondiff = 'csv_times_out.json'
      detail = 'a CSV file,'
    []
    [exodus]
      type = 'JSONDiff'
      input = 'exodus_times.i'
      jsondiff = 'exodus_times_out.json'
      detail = 'multiple exodus files,'
    []
    [reporter]
      type = 'JSONDiff'
      input = 'reporter_times.i'
      jsondiff = 'reporter_times_out.json'
      detail = 'a reporter with data in the expected floating point vector format, and'
    []
    [simulation]
      type = 'JSONDiff'
      input = 'simulation_times.i'
      jsondiff = 'simulation_times_out.json'
      detail = 'the time steps taken by the simulation.'
    []
  []

  [error_reporting]
    requirement = 'The system shall report an error when'

    [time_interval_steady_no_times]
      type = 'RunException'
      input = 'time_interval_times.i'
      cli_args = '
        Executioner/type=Steady'
      expect_err = "If the parameter 'start_time' is not provided, the executioner type must be 'Transient'"
      detail = 'times are gathered with a fixed time interval with no start and end times provided, while using a steady executioner, '
    []
    [default_times_unsorted]
      type = RunException
      input = simulation_times.i
      cli_args = 'Executioner/TimeStepper/time_sequence="0.2 0.9 0.4"'
      expect_err = 'Times are not sorted:\n\s*\{0.2, 0.9, 0.4\}'
      detail = 'a input-defined sequence of times is unsorted, '
    []
    [no_object]
      type = RunException
      input = simulation_times.i
      cli_args = 'Executioner/TimeStepper/time_sequence=foo'
      expect_err = 'Could not find times object foo.'
      detail = 'the specified time-defining object does not exist, '
    []
    [not_times]
      type = RunException
      input = simulation_times.i
      cli_args = 'UserObjects/foo/type=UserObjectInterfaceTest Executioner/TimeStepper/time_sequence=foo'
      expect_err = 'foo is not a Times object.'
      detail = 'or the specified time-defining object is not the proper object type.'
    []
  []
[]
