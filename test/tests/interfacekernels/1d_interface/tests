[Tests]
  [interface_diffusion]
    type = 'Exodiff'
    input = 'coupled_value_coupled_flux.i'
    exodiff = 'coupled_value_coupled_flux_out.e'
    requirement = "Interface kernels shall provide integrated conditions between subdomains,"
                  " and shall work with boundary restricted materials with stateful properties."
    issues = '#11258 #869'
    design = 'InterfaceKernels/index.md'
  []
  [interface_diffusion_penalty]
    requirement = "The interface diffusion penalty method should reproduce the analytic solution"
    design = 'InterfaceKernels/index.md'
    issues = '#11765'
    [hand-coded]
      type = 'Exodiff'
      input = 'coupled_value_coupled_flux.i'
      cli_args = "InterfaceKernels/active='penalty_interface' BCs/active='left right' Outputs/file_base=coupled_value_coupled_flux_penalty_out"
      exodiff = 'coupled_value_coupled_flux_penalty_out.e'
      prereq = 'interface_diffusion'
      detail = 'using a hand-coded Jacobian'
    []
    [ad]
      type = 'Exodiff'
      input = 'ad-coupled-value-coupled-flux.i'
      exodiff = 'ad-coupled-value-coupled-flux_out.e'
      detail = 'using a Jacobian computed via automatic differentiation'
    []
  []
  [interface_diffusion_penalty_with_jump_material]
    type = 'Exodiff'
    input = 'coupled_value_coupled_flux_with_jump_material.i'
    exodiff = 'coupled_value_coupled_flux_with_jump_material_out.e'
    design = 'InterfaceKernels/index.md'
    issues = '#12066'
    requirement = "The InterfaceKernel system shall use with interface material in 1D."
    prereq = 'interface_diffusion'
  []
  # This test ensures that shape functions for the NEIGHBORING variable are used in test_neighbor
  # and phi_neighbor; this is relevant when _var and _neighbor_var use a different space of shape
  # functions
  [mixed_shapes_test]
    type = 'Exodiff'
    input = 'mixed_shapes.i'
    exodiff = 'mixed_shapes_out.e'
    issues = '#13232'
    requirement = "The system shall support the evaluation of neighboring quantities on "
                   "elements containing different shape functions."
    design = 'InterfaceKernels/index.md'
  []
  [jacobian_test]
    type = AnalyzeJacobian
    input = coupled_value_coupled_flux.i
    expect_out = '\nNo errors detected. :-\)\n'
    recover = false
    petsc_version = '<3.9.0 || >=3.9.4'
    cli_args = 'Outputs/exodus=false'
    issues = '#13232'
    requirement = "The system shall produce correct Jacobians for coupled flux on an interface."
    design = 'InterfaceKernels/index.md'
  []
  [mixed_shapes_jacobian_test]
    type = AnalyzeJacobian
    input = mixed_shapes.i
    expect_out = '\nNo errors detected. :-\)\n'
    recover = false
    petsc_version = '<3.9.0 || >=3.9.4'
    cli_args = 'Outputs/exodus=false'
    issues = '#13232'
    requirement = "The system shall support produce correct Jacobians when "
                   "evaluating neighboring quantities on elements containing different shape functions."
    design = 'InterfaceKernels/index.md'
  []

  [single_variable_jacobian_test]
    type = AnalyzeJacobian
    input = single_variable_coupled_flux.i
    expect_out = '\nNo errors detected. :-\)\n'
    recover = false
    petsc_version = '<3.9.0 || >=3.9.4'
    issues = '#13232'
    requirement = "The system shall produce correct Jacobians for single variable coupled flux on an interface."
    design = 'InterfaceKernels/index.md'
  []

  [ik_save_in]
    type = Exodiff
    input = 'ik_save_in_test.i'
    exodiff = 'ik_save_in_test_out.e'
    issues = '#9854'
    requirement = "Save-in shall record the correct residuals and Jacobians representing the interface kernel. "
                  "This applies the DirichletBC to side a (block 0) of the interface."
    design = 'InterfaceKernels/index.md'
  []
  [ik_save_in_other_side]
    type = Exodiff
    input = 'ik_save_in_test.i'
    exodiff = 'ik_save_in_other_side_out.e'
    cli_args = 'BCs/middle/variable=u BCs/middle/v=v BCs/middle/save_in=primary_resid Outputs/file_base=ik_save_in_other_side_out'
    issues = '#13232'
    requirement = "Save-in shall record the correct residuals and Jacobians representing the interface kernel. "
                  "This applies the DirichletBC to side b (block 1) of the interface."
    design = 'InterfaceKernels/index.md'
  []

  [reaction_1D_steady_CSVDiff]
    type = CSVDiff
    input = 'reaction_1D_steady.i'
    csvdiff = 'reaction_1D_steady_out.csv'
    issues = '#13365'
    requirement = "The interface reaction kernel should reproduce the analytic solution"
    design = 'InterfaceReaction.md'
  []
  [reaction_1D_steady_ExoDiff]
    type = Exodiff
    input = 'reaction_1D_steady.i'
    exodiff = 'reaction_1D_steady_out.e'
    issues = '#13365'
    requirement = "The interface reaction kernel should work with interface diffusion kernel"
    design = 'InterfaceReaction.md'

    # Checking both Exodus and CSVDiff from this single input
    should_execute = false
    delete_output_before_running = false
    prereq = 'reaction_1D_steady_CSVDiff'
  []
  [matreaction_1D_steady_CSVDiff]
    type = CSVDiff
    input = 'ADMatreaction_1D_steady.i'
    csvdiff = 'ADMatreaction_1D_steady_out.csv'
    issues = '#27736'
    requirement = "The result of an interface reaction kernel computed using automatic differentiation shall match the analytic solution in a steady-state simulation"
    design = 'ADMatInterfaceReaction.md'
  []
  [matreaction_1D_transient_CSVDiff]
    type = Exodiff
    input = 'ADMatreaction_1D_transient.i'
    exodiff = 'ADMatreaction_1D_transient_out.e'
    issues = '#27736'
    requirement = "The result of an interface reaction kernel computed using automatic differentiation shall be consistent with the results of the non-AD transient interface reaction test."
    design = 'ADMatInterfaceReaction.md'
  []
  [reaction_1D_transient]
    type = Exodiff
    input = 'reaction_1D_transient.i'
    exodiff = 'reaction_1D_transient_out.e'
    issues = '#13365'
    requirement = "The solution should be discontinued at the interface due to the reaction taking place"
    design = 'InterfaceReaction.md'
  []
  [reaction_1D_transient_Jac]
    type = PetscJacobianTester
    input = 'reaction_1D_transient.i'
    cli_args = 'Outputs/exodus=false Executioner/num_steps=3'
    run_sim = True
    ratio_tol = 1e-8
    difference_tol = 1e-6
    issues = '#13365'
    requirement = "The Jacobian from InterfaceReaction shall be perfect"
    design = 'InterfaceReaction.md'
  []

  [sort_interface_materials]
    type = Exodiff
    input = 'sorted-interface-materials.i'
    exodiff = 'sorted-interface-materials_out.e'
    requirement = 'The system shall ensure that interfacial materials are sorted such that consumers execute after producers.'
    issues = '#17171'
    design = 'Materials/index.md'
  []

  [no_failed_point_inversions]
    type = Exodiff
    input = no-failed-point-inversions.i
    exodiff = no-failed-point-inversions_out.e
    requirement = 'The system shall not try to reinit a displaced interface, leading to failed point inversions, if a displaced interface kernel has not been added to the simulation.'
    design = 'InterfaceKernels/index.md'
    issues = '#18175'
    mesh_mode = 'replicated' # BreakMeshByBlock doesn't work with distributed mesh
    absent_out = 'inverse_map of physical point.*is not on element'
  []
[]
