[Tests]
  design = 'syntax/Problem/index.md'
  issues = '#29632'
  [MFEMCurlCurl]
    type = XMLDiff
    input = curlcurl.i
    xmldiff = 'OutputData/CurlCurl/Run0/Run0.pvd
                OutputData/CurlCurl/Run0/Cycle000001/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a definite Maxwell problem with Nedelec elements of the first kind using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu' # schemadiff with cuda
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    max_threads = 1
    platform = 'linux'
  []
  [MFEMDiffusion]
    type = XMLDiff
    input = diffusion.i
    xmldiff = 'OutputData/Diffusion/Run0/Run0.pvd
                OutputData/Diffusion/Run0/Cycle000001/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a diffusion problem using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    expect_out = 'Parallel Type:.*distributed.*Mesh Dimension.*3.*Spatial Dimension.*3.*Elems.*2476.*Num Subdomains.*1.*Solver.*MFEMHypreGMRES'
  []
  [MFEMDiffusionPartial]
    type = XMLDiff
    input = diffusion.i
    xmldiff = 'OutputData/Diffusion/Run0/Run0.pvd '
              'OutputData/Diffusion/Run0/Cycle000001/proc000000.vtu'
    cli_args = 'Solver/type=MFEMCGSolver Solver/preconditioner=jacobi '
               'Executioner/assembly_level=partial'
    requirement = 'The system shall have the ability to solve a diffusion problem with partial assembly using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
  []
  [MFEMDiffusionMatFree]
    type = XMLDiff
    input = diffusion.i
    xmldiff = 'OutputData/Diffusion/Run0/Run0.pvd '
              'OutputData/Diffusion/Run0/Cycle000001/proc000000.vtu'
    cli_args = 'Solver/type=MFEMCGSolver Solver/preconditioner=jacobi '
               'Executioner/device=ceed-cpu '
               'Executioner/assembly_level=none'
    compute_devices = 'ceed-cpu'
    requirement = 'The system shall have the ability to solve a diffusion problem with matrix-free assembly using MFEM.'
    capabilities = 'mfem'
    max_parallel = 1
    recover = false
  []
  [MFEMGradDiv]
    type = XMLDiff
    input = graddiv.i
    xmldiff = 'OutputData/GradDiv/Run0/Run0.pvd
                OutputData/GradDiv/Run0/Cycle000001/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a grad-div problem with Raviart-Thomas elements using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    errors = 'foobarbaz' # allow cuda errors I guess?
  []
  [MFEMHeatConduction]
    type = XMLDiff
    input = heattransfer.i
    xmldiff = 'OutputData/HeatConduction/Run0/Run0.pvd '
              'OutputData/HeatConduction/Run0/Cycle000001/proc000000.vtu '
              'OutputData/HeatConduction/Run0/Cycle000004/proc000000.vtu'
    cli_args = 'BCs/active="bottom top_dirichlet" '
               'Executioner/dt=0.25 Executioner/end_time=1.0 '
               'Outputs/ParaViewDataCollection/file_base=OutputData/HeatConduction'
    requirement = 'The system shall have the ability to solve a transient heat conduction problem using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    restep = false
  []
  [MFEMHeatConductionElement]
    type = XMLDiff
    input = heattransfer.i
    xmldiff = 'OutputData/HeatConduction/Run0/Run0.pvd '
              'OutputData/HeatConduction/Run0/Cycle000001/proc000000.vtu '
              'OutputData/HeatConduction/Run0/Cycle000004/proc000000.vtu'
    cli_args = 'BCs/active="bottom top_dirichlet" '
               'Executioner/dt=0.25 Executioner/end_time=1.0 '
               'Outputs/ParaViewDataCollection/file_base=OutputData/HeatConduction '
               'Solver/type=MFEMCGSolver Solver/preconditioner=jacobi '
               'Executioner/assembly_level=element'
    requirement = 'The system shall have the ability to solve a transient heat conduction problem with element assembly using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    valgrind = none
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    restep = false
  []
  [MFEMHeatConductionMatFree]
    type = XMLDiff
    input = heattransfer.i
    xmldiff = 'OutputData/HeatConduction/Run0/Run0.pvd '
              'OutputData/HeatConduction/Run0/Cycle000001/proc000000.vtu '
              'OutputData/HeatConduction/Run0/Cycle000004/proc000000.vtu'
    cli_args = 'BCs/active="bottom top_dirichlet" '
               'Executioner/dt=0.25 Executioner/end_time=1.0 '
               'Outputs/ParaViewDataCollection/file_base=OutputData/HeatConduction '
               'Solver/type=MFEMCGSolver Solver/preconditioner=jacobi '
               'Executioner/assembly_level=none '
               'Executioner/device=ceed-cpu'
    compute_devices = 'ceed-cpu'
    requirement = 'The system shall have the ability to solve a transient heat conduction problem with matrix-free assembly using MFEM.'
    capabilities = 'mfem'
    valgrind = none
    max_parallel = 1
    recover = false
    restep = false
  []
  [MFEMHeatTransfer]
    type = XMLDiff
    input = heattransfer.i
    xmldiff = 'OutputData/HeatTransfer/Run0/Run0.pvd
                OutputData/HeatTransfer/Run0/Cycle000003/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a transient heat conduction problem with a heat transfer coefficient on one boundary using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    restep = false
  []
  [MFEMMixedHeatTransfer]
    type = XMLDiff
    input = mixed_heattransfer.i
    xmldiff = 'OutputData/MixedHeatTransfer/Run0/Run0.pvd
                OutputData/MixedHeatTransfer/Run0/Cycle000003/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a transient heat conduction problem solved using the mixed form of the heat equation using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu' # schemadiff with cuda
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    restep = false
  []  
  [MFEMLinearElasticity]
    type = XMLDiff
    input = linearelasticity.i
    xmldiff = 'OutputData/LinearElasticity/Run0/Run0.pvd
                OutputData/LinearElasticity/Run0/Cycle000001/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a linear elasticity problem using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
  []
  [MFEMGravity]
    type = XMLDiff
    input = gravity.i
    xmldiff = 'OutputData/Gravity/Run0/Run0.pvd
                OutputData/Gravity/Run0/Cycle000001/proc000000.vtu'
    requirement = 'The system shall have the ability to solve a linear elasticity problem for a beam deformed under gravitational loads using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu' # schemadiff with cuda
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    max_threads = 1
    platform = 'linux'
  []
  [MFEMIrrotational]
    type = CSVDiff
    input = irrotational.i
    csvdiff = 'OutputData/Irrotational.csv'
    requirement = 'The system shall have the ability to solve for an irrotational vortex in two dimensions using MFEM.'
    abs_zero = 1e-6
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    recover = false
  []
  [MFEMDarcy]
    type = CSVDiff
    input = darcy.i
    csvdiff = 'OutputData/Darcy.csv'
    requirement = 'The system shall have the ability to solve a mixed Darcy problem in two dimensions using MFEM.'
    abs_zero = 1e-6
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    recover = false
  []  
  [MFEMDiffusionParsedSource]
    type = XMLDiff
    input = diffusion_parsed_source.i
    xmldiff = 'OutputData/DiffusionParsedSource/Run0/Run0.pvd
                OutputData/DiffusionParsedSource/Run0/Cycle000001/proc000000.vtu'
    requirement = 'The system shall have the ability to parse functions of non-linear variables'
    capabilities = 'mfem'
  []
[]
