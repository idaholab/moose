[Tests]
  design = 'syntax/Problem/index.md'
  issues = '#29632'
  [MFEMCurlCurl]
    type = XMLDiff
    input = curlcurl.i
    xmldiff = 'OutputData/CurlCurl/Run0/Run0.pvd
                OutputData/CurlCurl/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a definite Maxwell problem with Nedelec elements of the first kind and produce results consistent with MFEM Example 3'
    mfem = true
    max_parallel = 1
    recover = false
    max_threads = 1
    platform = 'linux'
  []
  [MFEMDiffusion]
    type = XMLDiff
    input = diffusion.i
    xmldiff = 'OutputData/Diffusion/Run0/Run0.pvd
                OutputData/Diffusion/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a diffusion problem set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMDiffusionPartial]
    type = XMLDiff
    input = diffusion_partial.i
    xmldiff = 'OutputData/DiffusionPartial/Run0/Run0.pvd
                OutputData/DiffusionPartial/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a diffusion problem with partial assembly set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMDiffusionLOR]
    type = XMLDiff
    input = diffusion_lor.i
    xmldiff = 'OutputData/DiffusionLOR/Run0/Run0.pvd
                OutputData/DiffusionLOR/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a diffusion problem with Low-Order-Refined preconditioning set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
    abs_zero = 1e-6
  []
  [MFEMGradDiv]
    type = XMLDiff
    input = graddiv.i
    xmldiff = 'OutputData/GradDiv/Run0/Run0.pvd
                OutputData/GradDiv/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a grad-div problem with Raviart-Thomas elements set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMHeatConduction]
    type = XMLDiff
    input = heatconduction.i
    xmldiff = 'OutputData/HeatConduction/Run0/Run0.pvd
                OutputData/HeatConduction/Run0/Cycle000001/proc000000.vtu
                OutputData/HeatConduction/Run0/Cycle000004/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a transient heat conduction problem set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMHeatConductionElement]
    type = XMLDiff
    input = heatconduction_element.i
    xmldiff = 'OutputData/HeatConductionElement/Run0/Run0.pvd
                OutputData/HeatConductionElement/Run0/Cycle000001/proc000000.vtu
                OutputData/HeatConductionElement/Run0/Cycle000004/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a transient heat conduction problem with element assembly set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMHeatConductionLOR]
    type = XMLDiff
    input = heatconduction_lor.i
    xmldiff = 'OutputData/HeatConductionLOR/Run0/Run0.pvd
                OutputData/HeatConductionLOR/Run0/Cycle000001/proc000000.vtu
                OutputData/HeatConductionLOR/Run0/Cycle000004/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a transient heat conduction problem with Low-Order-Refined preconditioning set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMHeatTransfer]
    type = XMLDiff
    input = heattransfer.i
    xmldiff = 'OutputData/HeatTransfer/Run0/Run0.pvd
                OutputData/HeatTransfer/Run0/Cycle000003/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a transient heat conduction problem with a heat transfer coefficient on one boundary set up from MOOSE.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMLinearElasticity]
    type = XMLDiff
    input = linearelasticity.i
    xmldiff = 'OutputData/LinearElasticity/Run0/Run0.pvd
                OutputData/LinearElasticity/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a linear elasticity problem set up from MOOSE and produce the same result as a native run.'
    mfem = true
    max_parallel = 1
    recover = false
  []
  [MFEMGravity]
    type = XMLDiff
    input = gravity.i
    xmldiff = 'OutputData/Gravity/Run0/Run0.pvd
                OutputData/Gravity/Run0/Cycle000001/proc000000.vtu'
    requirement = 'MOOSE shall have the ability to solve a linear elasticity problem for a beam deformed under gravitational loads.'
    mfem = true
    max_parallel = 1
    recover = false
    max_threads = 1
    platform = 'linux'
  []
  [MFEMIrrotational]
    type = CSVDiff
    input = irrotational.i
    csvdiff = 'OutputData/Irrotational.csv'
    requirement = 'MOOSE shall have the ability to solve for an irrotational vortext in two dimensions.'
    abs_zero = 1e-6
    mfem = true
    recover = false
  []
[]
