[Tests]
  design = 'MFEMSolverBase.md'
  issues = '#30591'
  [MFEMCurlCurlLOR]
    type = XMLDiff
    input = ../kernels/curlcurl.i
    xmldiff = 'OutputData/CurlCurlLOR/Run0/Run0.pvd
                OutputData/CurlCurlLOR/Run0/Cycle000001/proc000000.vtu'
    cli_args = 'FESpaces/HCurlFESpace/fec_order=THIRD '
               'FESpaces/HCurlFESpace/closed_basis=GaussLobatto '
               'FESpaces/HCurlFESpace/open_basis=IntegratedGLL '
               'Solver/type=MFEMGMRESSolver Solver/l_tol=1e-14 '
               'Preconditioner/ams/low_order_refined=true '
               'Outputs/ParaViewDataCollection/file_base=OutputData/CurlCurlLOR'
    requirement = 'The system shall have the ability to solve a LOR definite Maxwell problem with Nedelec elements of the first kind using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    valgrind = heavy
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    max_threads = 1
    platform = 'linux'
    abs_zero = 1e-6
  []
  [MFEMDiffusionLOR]
    type = XMLDiff
    input = ../kernels/diffusion.i
    xmldiff = 'OutputData/DiffusionLOR/Run0/Run0.pvd '
              'OutputData/DiffusionLOR/Run0/Cycle000001/proc000000.vtu'
    cli_args = 'FESpaces/H1FESpace/fec_order=SECOND '
               'Solver/type=MFEMCGSolver Solver/preconditioner=jacobi '
               'Preconditioner/jacobi/low_order_refined=true '
               'Outputs/ParaViewDataCollection/file_base=OutputData/DiffusionLOR'
    requirement = 'The system shall have the ability to solve a diffusion problem with Low-Order-Refined preconditioning set up from MOOSE and produce the same result as a native MFEM run.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    abs_zero = 1e-6
  []
  [MFEMGradDivLOR]
    type = XMLDiff
    input = ../kernels/graddiv.i
    xmldiff = 'OutputData/GradDivLOR/Run0/Run0.pvd
                OutputData/GradDivLOR/Run0/Cycle000001/proc000000.vtu'
    cli_args = 'Mesh/file=../mesh/beam-hex.mesh FESpaces/HDivFESpace/fec_order=THIRD '
               'FESpaces/HDivFESpace/closed_basis=GaussLobatto '
               'FESpaces/HDivFESpace/open_basis=IntegratedGLL '
               'Preconditioner/ADS/low_order_refined=true '
               'Outputs/ParaViewDataCollection/file_base=OutputData/GradDivLOR'
    requirement = 'The system shall have the ability to solve a LOR grad-div problem with Raviart-Thomas elements using MFEM.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    valgrind = heavy
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    abs_zero = 1e-6
  []
  [MFEMHeatConductionLOR]
    type = XMLDiff
    input = ../kernels/heattransfer.i
    xmldiff = 'OutputData/HeatConductionLOR/Run0/Run0.pvd
                OutputData/HeatConductionLOR/Run0/Cycle000001/proc000000.vtu
                OutputData/HeatConductionLOR/Run0/Cycle000004/proc000000.vtu'
    cli_args = 'BCs/active="bottom top_dirichlet" '
               'Executioner/dt=0.25 Executioner/end_time=1.0 '
               'FESpaces/H1FESpace/fec_order=SECOND '
               'Solver/type=MFEMCGSolver Solver/preconditioner=jacobi '
               'Preconditioner/jacobi/low_order_refined=true '
               'Outputs/ParaViewDataCollection/file_base=OutputData/HeatConductionLOR'
    requirement = 'The system shall have the ability to solve a transient heat conduction problem with Low-Order-Refined preconditioning set up from MOOSE and produce the same result as a native MFEM run.'
    capabilities = 'mfem'
    compute_devices = 'cpu cuda'
    max_parallel = 1 # schemadiff with multiple ranks
    recover = false
    restep = false
  []
[]
