[Tests]
  issues = '#9698 #6353 #6795 #24868 #27240 #31279'
  design = 'TimeSequenceStepper.md'

  [time_sequence]
    requirement = 'The system shall support the ability to choose time step sizes based on a '
                  'sequence of increasing numbers:'

    [timesequence_no_start_time]
      type = 'Exodiff'
      input = 'timesequence.i'
      exodiff = 'timesequence_no_start_time.e'
      cli_args = 'Outputs/file_base=timesequence_no_start_time'

      detail = 'beginning at the default start time,'
    []
    [timesequence_earlier_start_time]
      type = 'Exodiff'
      input = 'timesequence.i'
      exodiff = 'timesequence_earlier_start_time.e'
      cli_args = 'Executioner/start_time=-1.0
                  Outputs/file_base=timesequence_earlier_start_time'

      detail = 'beginning at an earlier time than the sequence numbers,'
    []
    [timesequence_later_start_time]
      type = 'Exodiff'
      input = 'timesequence.i'
      exodiff = 'timesequence_later_start_time.e'
      cli_args = 'Executioner/start_time=1.1
                  Outputs/file_base=timesequence_later_start_time'

      detail = 'beginning at a time somewhere in-between existing sequence numbers, and'
    []

    [exodustimesequence]
      type = 'Exodiff'
      prereq = 'time_sequence/timesequence_no_start_time'
      input = 'exodustimesequence.i'
      exodiff = 'exodustimesequence_out.e'

      detail = 'when reading the sequence from an ExodusII formatted input file.'
    []

    [not_sorted]
      type = 'RunException'
      input = 'timesequence.i'
      expect_err = 'Time points must be in strictly ascending order.'
      cli_args = 'Executioner/TimeStepper/time_sequence="3 2 1 8 0"'
      detail = 'that must be sorted in ascending order,'
    []
    [not_sorted_strictly]
      type = 'RunException'
      input = 'timesequence.i'
      expect_err = 'Time points must be in strictly ascending order.'
      cli_args = 'Executioner/TimeStepper/time_sequence="0 1 2 2 3 4"'
      detail = 'that must be sorted in strictly ascending order,'
    []

    [csvtimesequence]
      type = 'Exodiff'
      prereq = 'time_sequence/timesequence_no_start_time'
      input = 'csvtimesequence.i'
      exodiff = 'csvtimesequence_out.e'

      detail = 'when reading the sequence from a comma-separated input file, and'
    []

    [use_last_dt]
      type = CSVDiff
      input = 'timesequence_last_dt.i'
      csvdiff = 'timesequence_last_dt_out.csv'

      detail = 'allowing the last time step size to be used past the final time in the sequence, and'
    []

    [use_last_t_for_end_time]
      type = CSVDiff
      input = timesequence.i
      csvdiff = timesequence_out.csv
      # end_time will be ignored since the last time in the sequence will be used
      # we have to specify the number of steps for a reasonable mid-step in 'restep' mode
      # Note that we specify the exact number of 'sync steps' to be sure to test for setting the end time
      cli_args = "Executioner/TimeStepper/use_last_t_for_end_time=true
                  Executioner/end_time=99
                  Executioner/num_steps=7
                  Postprocessors/dt/type=TimestepSize Outputs/csv=true"

      detail = 'use the final time in the sequence as the simulation end time.'
    []

    [use_last_t_for_end_time_last_value_matches]
      type = CSVDiff
      input = timesequence.i
      csvdiff = timesequence_out.csv
      # end_time will be ignored since the last time in the sequence will be used
      # we have to specify the number of steps for a reasonable mid-step in 'restep' mode
      # Note that we specify the exact number of 'sync steps' to be sure to test for setting the end time
      prereq = time_sequence/use_last_t_for_end_time
      cli_args = "Executioner/TimeStepper/use_last_t_for_end_time=true
                  Executioner/end_time=4
                  Executioner/num_steps=7
                  Postprocessors/dt/type=TimestepSize Outputs/csv=true"

      detail = 'use the final time in the sequence as the simulation end time, even when the end_time is set to the last value in the sequence.'
    []
[]

  [timesequence_failed]
    type = 'Exodiff'
    input = 'timesequence_failed_solve.i'
    exodiff = 'timesequence_failed_solve.e'
    max_threads = 1
    max_parallel = 1

    requirement = 'The system shall support the ability to override time sequence time step sizes '
                  'when solves fail.'
  []

  [restart_from_timesequence]
    requirement = 'The system shall support the ability to run a calculation for the purpose of '
                  'creating a time sequence restart file:'
    [timesequence_restart1]
      type = 'Exodiff'
      input = 'timesequence_restart1.i'
      exodiff = 'timesequence_restart1.e'
      cli_args = 'Outputs/file_base=timesequence_restart1'
      recover = false

      detail = 'when writing the checkpoint file,'
    []

    [timesequence_restart2]
      type = 'Exodiff'
      input = 'timesequence_restart2.i'
      exodiff = 'timesequence_restart2.e'
      cli_args = 'Outputs/file_base=timesequence_restart2'
      recover = false
      prereq = 'restart_from_timesequence/timesequence_restart1'

      detail = 'when restarting where the time sequence is identical, and'
    []

    [timesequence_restart3]
      type = 'Exodiff'
      input = 'timesequence_restart3.i'
      exodiff = 'timesequence_restart3.e'
      cli_args = 'Outputs/file_base=timesequence_restart3'
      recover = false
      prereq = 'restart_from_timesequence/timesequence_restart1'

      detail = 'when restarting where the time sequence is different after the point of the '
               'checkpoint.'
    []
  []

  [general_restart]
    requirement = 'The system shall support the ability to'
    [steady_for_restart]
      type = 'RunApp'
      input = 'steady_for_restart.i'
      recover = false

      detail = 'run a non-transient simulation for later restart with time sequence, '
    []

    [restart_from_steady]
      type = 'RunApp'
      input = 'restart_from_steady.i'
      cli_args = 'Outputs/file_base=timesequence_restart1'
      recover = false
      prereq = 'general_restart/steady_for_restart'   

      detail = 'restart from a non-transient into a transient simulation with sequence time stepper'
    []
  []

  [restart_failure]
    requirement = 'The system shall support the ability to run a calculation for the purpose of '
                  'creating a time sequence restart file suitable for failure:'

    [timesequence_restart_failure_1]
      type = 'Exodiff'
      input = 'timesequence_restart1.i'
      exodiff = 'timesequence_restart_failure1.e'
      cli_args = 'Outputs/file_base=timesequence_restart_failure1'
      recover = false
      max_threads = 1
      max_parallel = 1
      detail = 'when writing the checkpoint file,'
    []

    [timesequence_restart_failure2]
      type = 'RunException'
      input = 'timesequence_restart_failure.i'
      expect_err = "The timesequence provided in the restart file must be identical"
      recover = false
      prereq = 'restart_failure/timesequence_restart_failure_1'
      max_threads = 1
      max_parallel = 1
      detail = 'when restarting where the time sequence is different prior to the failure.'
    []
    
    [restart_too_few_values_in_sequence]
      type = 'RunException'
      input = 'timesequence_restart_failure.i'
      cli_args = "Executioner/TimeStepper/time_sequence='0   0.85'"
      expect_err= "The timesequence provided in the restart file must be identical"
      recover = false
      prereq = 'restart_failure/timesequence_restart_failure_1'
      max_threads = 1
      max_parallel = 1
      detail = 'when restarting where the time sequence has fewer values than the restarted input'
    []
    
  []
[]
