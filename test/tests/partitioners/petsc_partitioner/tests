[Tests]
  issues = '#11628 #27240'
  design = '/PetscExternalPartitioner.md'
  # 'cmp' file is used for each test, so that we can easily adjust tolerance for each variable
  # At this point, we test against min, max, average, sum
  # Hopefully these measurements are good enough and also platform independent

  [./ptscotch]
    requirement = 'Make MOOSE support ptscotch via PETSc'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_ptscotch_out.csv'
    cli_args = 'Mesh/Partitioner/part_package=ptscotch Outputs/file_base=petsc_partitioner_ptscotch_out Outputs/exodus=false'
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    ptscotch = true
    petsc_version = '>=3.10.0'
    min_parallel = 4
    max_parallel = 4
    # PTScotch is not valgrind clean
    valgrind = none
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1e-1'
  [../]

  [./ptscotch_weight_elment]
    requirement = 'ptscotch shall support element-weighted graphs for balancing workload'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_ptscotch_weight_element_out.csv'
    cli_args = 'Mesh/Partitioner/part_package=ptscotch  Mesh/Partitioner/type=PartitionerWeightTest Mesh/Partitioner/apply_element_weight=true Outputs/file_base=petsc_partitioner_ptscotch_weight_element_out Outputs/exodus=false'
    ptscotch = true
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    petsc_version = '>=3.10.0'
    min_parallel = 4
    max_parallel = 4
   # PTScotch is not valgrind clean
    valgrind = none
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1e-1'
  [../]

  [./ptscotch_weight_side]
    requirement = 'ptscotch shall support side-weighted graphs for minimizing communication'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_ptscotch_weight_side_out.csv'
    cli_args = 'Mesh/Partitioner/part_package=ptscotch Mesh/Partitioner/type=PartitionerWeightTest Mesh/Partitioner/apply_side_weight=true Outputs/file_base=petsc_partitioner_ptscotch_weight_side_out Outputs/exodus=false'
    ptscotch = true
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    petsc_version = '>=3.10.0'
    min_parallel = 4
    max_parallel = 4
   # PTScotch is not valgrind clean
    valgrind = none
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1e-1'
  [../]

  [./ptscotch_weight_both]
    requirement = 'ptscotch shall take both side weights and element weights into consideration'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_ptscotch_weight_both_out.csv'
    cli_args = 'Mesh/Partitioner/part_package=ptscotch Mesh/Partitioner/type=PartitionerWeightTest Mesh/Partitioner/apply_side_weight=true Mesh/Partitioner/apply_element_weight=true Outputs/file_base=petsc_partitioner_ptscotch_weight_both_out Outputs/exodus=false'
    ptscotch = true
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    petsc_version = '>=3.10.0'
    min_parallel = 4
    max_parallel = 4
  # PTScotch is not valgrind clean
    valgrind = none
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1.5e-1'
  [../]

  [./parmetis]
    requirement = 'Make MOOSE support parmetis via PETSc'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_parmetis_out.csv'
    # Make the mesh big enough to use parmetis (ptscotch is used for <28 elems per processor)
    cli_args = "Mesh/nx=20
                Mesh/Partitioner/part_package=parmetis
                Outputs/file_base=petsc_partitioner_parmetis_out
                Outputs/exodus=false"
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    parmetis = true
    min_parallel = 4
    max_parallel = 4
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1e-1'
  [../]

  [./parmetis_weight_element]
    requirement = 'Parmetis shall support element-weighted graphs for balancing workload'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_parmetis_weight_element_out.csv'
    cli_args = "Mesh/nx=20
                Mesh/Partitioner/part_package=parmetis
                Mesh/Partitioner/type=PartitionerWeightTest
                Mesh/Partitioner/apply_element_weight=true
                Outputs/file_base=petsc_partitioner_parmetis_weight_element_out
                Outputs/exodus=false"
    parmetis = true
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    petsc_version = '>=3.9.3'
    min_parallel = 4
    max_parallel = 4
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1e-1'
  [../]

  [./parmetis_weight_side]
    requirement = 'Parmetis shall support side-weighted graphs for minimizing communication'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_parmetis_weight_side_out.csv'
    cli_args = "Mesh/nx=20
                Mesh/Partitioner/part_package=parmetis
                Mesh/Partitioner/type=PartitionerWeightTest
                Mesh/Partitioner/apply_side_weight=true
                Outputs/file_base=petsc_partitioner_parmetis_weight_side_out
                Outputs/exodus=false"
    parmetis = true
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    petsc_version = '>=3.9.3'
    min_parallel = 4
    max_parallel = 4
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '1e-1'
  [../]

  [./parmetis_weight_both]
    requirement = 'Parmetis shall take side weights and element weights into consideration'
    type = 'CSVDiff'
    input = 'petsc_partitioner.i'
    csvdiff = 'petsc_partitioner_parmetis_weight_both_out.csv'
    cli_args = "Mesh/nx=20
                Mesh/Partitioner/part_package=parmetis
                Mesh/Partitioner/type=PartitionerWeightTest
                Mesh/Partitioner/apply_element_weight=true
                Mesh/Partitioner/apply_side_weight=true
                Outputs/file_base=petsc_partitioner_parmetis_weight_both_out
                Outputs/exodus=false"
    parmetis = true
    # Want to insure the partitioned mesh can be used by solver
    expect_out = 'Solve Converged!'
    petsc_version = '>=3.9.3'
    min_parallel = 4
    max_parallel = 4
    # Do not need a high tolerance because mesh is small and parititioner is not accurate
    rel_err = '2e-1'
  [../]

  [./parmetis_presplit_mesh]
    requirement = 'Parmetis shall support presplit'
    type = 'CheckFiles'
    input = 'petsc_partitioner.i'
    cli_args = 'Mesh/Partitioner/part_package=parmetis Mesh/Partitioner/type=PartitionerWeightTest Mesh/parallel_type=replicated --split-file petsc_partitioner_parmetis_presplit --split-mesh 4,8'
    check_files = 'petsc_partitioner_parmetis_presplit.cpa.gz/4/header.gz petsc_partitioner_parmetis_presplit.cpa.gz/4/split-4-0.gz petsc_partitioner_parmetis_presplit.cpa.gz/4/split-4-3.gz petsc_partitioner_parmetis_presplit.cpa.gz/8/header.gz petsc_partitioner_parmetis_presplit.cpa.gz/8/split-8-0.gz petsc_partitioner_parmetis_presplit.cpa.gz/8/split-8-7.gz'
    recover = false

    parmetis = true
    petsc_version = '>=3.9.3'
    min_parallel = 2
    max_parallel = 2
  [../]

  [./chaco]
    requirement = 'The system shall support a serial partitioner Chaco'
    type = 'Exodiff'
    input = 'petsc_partitioner.i'
    exodiff = 'petsc_partitioner_chaco_out.e'
    cli_args = 'Mesh/Partitioner/part_package=chaco Mesh/uniform_refine=0 Outputs/file_base=petsc_partitioner_chaco_out'
    chaco = true
    petsc_version = '>=3.9.0'
    # chaco uses rand so that it is platform dependent
    platform = DARWIN
    # work with 32-bit integers only
    dof_id_bytes = 4
    min_parallel = 4
    max_parallel = 4
  [../]

  [./party]
    requirement = 'The system shall support a serial partitioner party'
    type = 'Exodiff'
    input = 'petsc_partitioner.i'
    exodiff = 'petsc_partitioner_party_out.e'
    cli_args = 'Mesh/Partitioner/part_package=party Mesh/uniform_refine=0 Outputs/file_base=petsc_partitioner_party_out'
    party = true
    petsc_version = '>=3.9.3'
    min_parallel = 4
    max_parallel = 4
  [../]
[]
