[Tests]
  issues = '#23359 #27909'
  design = 'syntax/Controls/index.md source/controls/WebServerControl.md'

  # Not really sure if all of these prereqs are required as I can't guarantee
  # if we'll get unique ports if we call them all at once

  [control]
    requirement = 'The system shall support controlling a parameter via a REST API with a parameter type of a'
    [bool]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_bool.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_bool
                  Reporters/test/bool_value=true'
      command_proxy = 'control_reporter.py bool_value'
      required_python_packages = requests
      recover = false
      detail = 'boolean'
    []
    [real]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_real.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_real
                  Reporters/test/real_value=1234'
      command_proxy = 'control_reporter.py real_value'
      required_python_packages = requests
      recover = false
      detail = 'double precision number'
    []
    [int]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_int.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_int
                  Reporters/test/int_value=-1234'
      command_proxy = 'control_reporter.py int_value'
      required_python_packages = requests
      recover = false
      detail = 'integer'
    []
    [string]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_string.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_string
                  Reporters/test/string_value=abcd'
      command_proxy = 'control_reporter.py string_value'
      required_python_packages = requests
      recover = false
      detail = 'string'
    []
    [vec_real]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_vec_real.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_vec_real
                  Reporters/test/vec_real_value="999 0 100"'
      command_proxy = 'control_reporter.py vec_real_value'
      required_python_packages = requests
      recover = false
      detail = 'vector of double precision numbers'
    []
    [vec_int]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_vec_int.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_vec_int
                  Reporters/test/vec_int_value="0 -100 12345"'
      command_proxy = 'control_reporter.py vec_int_value'
      required_python_packages = requests
      recover = false
      detail = 'vector of integers'
    []
    [vec_string]
      type = JSONDiff
      input = control_reporter.i
      jsondiff = 'control_reporter_vec_string.json'
      skip_keys = 'number_of_parts part'
      cli_args = 'Outputs/json/file_base=control_reporter_vec_string
                  Reporters/test/vec_string_value="m o o s e"'
      command_proxy = 'control_reporter.py vec_string_value'
      required_python_packages = requests
      recover = false
      detail = 'vector of strings'
    []
  []

  [get_postprocessor]
    type = CSVDiff
    input = get_postprocessor.i
    csvdiff = get_postprocessor_out.csv
    command_proxy = get_postprocessor.py
    required_python_packages = requests
    recover = false
    requirement = 'The system shall support retreiving a postprocessor value via a REST API'
  []

  [connect_port]
    type = RunApp
    input = wait_initial.i
    command_proxy = use_port.py
    required_python_packages = requests
    recover = False
    requirement = 'The system shall support connecting to a REST API via a port'
  []

  [parallel_consistent]
    type = JSONDiff
    input = control_reporter.i
    jsondiff = 'parallel_consistent.json parallel_consistent.json.1'
    cli_args = 'Outputs/json/file_base=parallel_consistent
                Reporters/test/bool_value=true'
    command_proxy = 'control_reporter.py bool_value'
    required_python_packages = requests
    recover = false
    requirement = 'The system shall support changing controllable parameters via a REST API in a manner that is parallel consistent'
    min_parallel = 2
    max_parallel = 2
  []

  # We cannot run these tests with valgrind because they come from the python script, which will terminate
  # the MOOSE process early and therefore we won't receieve and of the valgrind summary output
  [errors]
    requirement = 'The system shall report a reasonable error when interacting with the REST API when'
    [set_controllable_no_exist]
      type = RunException
      input = 'wait_initial.i'
      command_proxy = 'errors.py set_controllable_no_exist'
      required_python_packages = requests
      expect_err = "WebServerControl error: The controllable parameter 'no_exist' was not found"
      detail = 'setting a controllable parameter that does not exist'
      valgrind = none
    []
    [postprocessor_no_exist]
      type = RunException
      input = 'wait_initial.i'
      command_proxy = 'errors.py postprocessor_no_exist'
      required_python_packages = requests
      expect_err = "WebServerControl error: The postprocessor 'no_exist' was not found"
      detail = 'getting a postprocessor that does not exist'
      valgrind = none
    []
    [set_controllable_unregistered_type]
      type = RunException
      input = 'wait_initial.i'
      command_proxy = 'errors.py set_controllable_unregistered_type'
      required_python_packages = requests
      expect_err = "WebServerControl error: The type 'BadType' is not registered for setting a controllable parameter"
      detail = 'setting a controllable parameter whose type is not supported'
      valgrind = none
    []
    [set_controllable_bad_convert_json]
      type = RunException
      input = 'wait_initial.i'
      command_proxy = 'errors.py set_controllable_bad_convert'
      required_python_packages = requests
      cli_args = 'Outputs/json/type=JSON'
      expect_err = 'The value "foo" of JSON type string is not of the expected JSON type bool'
      detail = 'setting a controllable parameter with an incompatible JSON type'
      valgrind = none
    []
    [set_controllable_vector_non_array]
      type = RunException
      input = 'control_reporter.i'
      command_proxy = 'errors.py set_controllable_vector_non_array'
      required_python_packages = requests
      cli_args = 'Reporters/test/type=WebServerControlTestReporter
                  Reporters/test/vec_real_value=0'
      expect_err = 'The value \'1234\' of type number is not an array'
      detail = 'setting a controllable parameter with a type that does not match'
      valgrind = none
    []
  []

  [param_errors]
    requirement = 'The system that supports controlling parameters via a REST API should report a reasonable error when'
    [no_port_and_socket]
      type = RunException
      input = 'wait_initial.i'
      expect_err = "You must provide either the parameter 'port' or 'file_socket'"
      detail = 'a parameter was not provided that specifies where the server should listen'
    []
    [port_and_socket]
      type = RunException
      input = 'wait_initial.i'
      cli_args = 'Controls/web_server/port=1234 Controls/web_server/file_socket=foo'
      expect_err = "Cannot provide both 'port' and 'file_socket'"
      detail = 'both a port and a file were specified to listen on'
    []
  []
[]
