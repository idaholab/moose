[Tests]
  design = 'HDGKernels/index.md'
  issues = '#30038'
  [simple_diffusion]
    requirement = 'The system shall be able to solve a two dimensional diffusion problem using a hybridizable interior penalty discontinuous Galerkin discretization'
    [noncondensed]
      type = Exodiff
      input = simple_ip_hdg_diffusion.i
      exodiff = simple_ip_hdg_diffusion_out.e
      detail = 'in which the matrix is uncondensed, and'
      cli_args = '-pc_type lu -pc_factor_shift_type NONZERO'
    []
    [condensed]
      type = Exodiff
      input = simple_ip_hdg_diffusion.i
      exodiff = simple_ip_hdg_diffusion_out.e
      prereq = 'simple_diffusion/noncondensed'
      detail = 'in which the matrix is statically condensed.'
      cli_args = '--nl0-static-condensation -nl0_condensed_pc_type hypre -ksp_type preonly -nl0_condensed_ksp_view_pmat binary Outputs/print_linear_residuals=false Postprocessors/symmetric/mat=binaryoutput'
      max_threads = 1
    []
  []
  [mms]
    requirement = 'The system shall show second order convergence in the L2 norm for advection-diffusion with a first order basis using a hybridizable interior penalty discontinuous Galerkin discretization on'
    [monomial_tri]
      type = PythonUnitTest
      input = test.py
      test_case = TestMonomialTri
      method = "!dbg"
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'simplex elements with a monomial basis for the interior variable,'
    []
    [monomial_quad]
      type = PythonUnitTest
      input = test.py
      test_case = TestMonomialQuad
      method = "!dbg"
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'tensor-product elements with a monomial basis for the interior variable,'
    []
    [lagrange_tri]
      type = PythonUnitTest
      input = test.py
      test_case = TestLagrangeTri
      method = "!dbg"
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'simplex elements with a L2 lagrange basis for the interior variable,'
    []
    [lagrange_quad]
      type = PythonUnitTest
      input = test.py
      test_case = TestLagrangeQuad
      method = "!dbg"
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'tensor-product elements with a L2 lagrange basis for the interior variable,'
    []
    [hierarchic_tri]
      type = PythonUnitTest
      input = test.py
      test_case = TestHierarchicTri
      method = "!dbg"
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'simplex elements with a L2 hierarchic basis for the interior variable, and'
    []
    [hierarchic_quad]
      type = PythonUnitTest
      input = test.py
      test_case = TestHierarchicQuad
      method = "!dbg"
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'tensor-product elements with a L2 hierarchic basis for the interior variable.'
    []
  []
  [simple_advection]
    requirement = 'The system shall be able to solve a one dimensional advection problem using a hybridizable interior penalty (no gradient variable) discontinuous Galerkin discretization.'
    type = CSVDiff
    input = simple_ip_hdg_advection.i
    csvdiff = simple_ip_hdg_advection_out.csv
  []
[]
