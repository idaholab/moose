[Tests]
  design = 'MooseStaticCondensationPreconditioner.md'
  issues = '#30133'
  [test]
    requirement = 'The system shall be able to solve a diffusion problem with penalty boundary conditions using a second order Lagrange basis'
    [regular]
      type = Exodiff
      exodiff = test_out.e
      input = test.i
      cli_args = "Preconditioning/active='' -ksp_type gmres -ksp_norm_type preconditioned"
      detail = 'using an iterative preconditioner applied to all the degrees of freedom, and'
      absent_out = '[Oo]ption left'
    []
    [sc]
      type = Exodiff
      exodiff = test_out.e
      input = test.i
      prereq = 'test/regular'
      detail = 'using an iterative preconditioner applied to only degrees of freedom remaining after static condensation.'
      max_threads = 1
      absent_out = '[Oo]ption left'
    []
  []
  [test_option_left]
    type = RunApp
    expect_out = '[Oo]ption left'
    input = test.i
    prereq = 'test/sc'
    max_threads = 1
    cli_args = '-nl0_condensed_snes_type anderson'
    requirement = 'The system shall warn of solver options not used.'
  []
  [mms]
    requirement = 'The system shall show the expected cubic rate of convergence in the L2 norm for a quadratic Lagrange basis when using static condensation preconditioning.'
    type = PythonUnitTest
    input = test.py
    test_case = TestStaticCondensation
    capabilities = "method!=dbg"
    required_python_packages = 'pandas matplotlib'
    installation_type = in_tree
    valgrind = 'none'
    max_threads = 1
  []
  [dont_condense]
    requirement = 'The system shall be able to not condense user-specified variables when peforming static condensation.'
    input = dont-condense-test.i
    exodiff = 'dont-condense-test_out.e'
    type = Exodiff
    absent_out = 'Option left'
    max_threads = 1
  []
[]
