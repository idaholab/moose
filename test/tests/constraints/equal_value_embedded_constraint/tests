[Tests]
  [kinematic]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall support embedded constraints using a "
                  "kinematic formulation between "
    issues = '#11722'
    [1D_2D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/1D_2D.e Constraints/equal/formulation=kinematic '
                 'Outputs/file_base=1D_2D_kinematic_out'
      exodiff = '1D_2D_kinematic_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "1D and 2D;"
    []
    [1D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/1D_3D.e Constraints/equal/formulation=kinematic '
                 'Outputs/file_base=1D_3D_kinematic_out'
      exodiff = '1D_3D_kinematic_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED

      detail = "1D and 3D;"
    []
    [2D_2D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/2D_2D.e Constraints/equal/formulation=kinematic '
                 'Outputs/file_base=2D_2D_kinematic_out'
      exodiff = '2D_2D_kinematic_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "2D;"
    []
    [2D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/2D_3D.e Constraints/equal/formulation=kinematic '
                 'Outputs/file_base=2D_3D_kinematic_out'
      exodiff = '2D_3D_kinematic_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "2D and 3D; and"
    []
    [3D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/3D_3D.e Constraints/equal/formulation=kinematic '
                 'Outputs/file_base=3D_3D_kinematic_out'
      exodiff = '3D_3D_kinematic_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "3D subdomains."
    []
  []

  [penalty]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall support embedded constraints using a "
                  "penalty formulation between "
    issues = '#11722'
    [1D_2D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/1D_2D.e Constraints/equal/formulation=penalty '
                 'Outputs/file_base=1D_2D_penalty_out'
      exodiff = '1D_2D_penalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "1D and 2D;"
    []
    [1D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/1D_3D.e Constraints/equal/formulation=penalty '
                 'Outputs/file_base=1D_3D_penalty_out'
      exodiff = '1D_3D_penalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "1D and 3D;"
    []
    [2D_2D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/2D_2D.e Constraints/equal/formulation=penalty '
                 'Outputs/file_base=2D_2D_penalty_out'
      exodiff = '2D_2D_penalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "2D;"
    []
    [2D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/2D_3D.e Constraints/equal/formulation=penalty '
                 'Outputs/file_base=2D_3D_penalty_out'
      exodiff = '2D_3D_penalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "2D and 3D; and"
    []
    [3D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/3D_3D.e Constraints/equal/formulation=penalty '
                 'Outputs/file_base=3D_3D_penalty_out'
      exodiff = '3D_3D_penalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "3D subdomains."
    []
  []

  [penalty_AD]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall support embedded constraints with "
                  "automatic differentiation using a penalty formulation between "
    issues = '#30499'
    [1D_2D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/1D_2D.e Constraints/equal/formulation=penalty '
                 'Constraints/equal/type=ADEqualValueEmbeddedConstraint Outputs/file_base=1D_2D_ADpenalty_out'
      exodiff = '1D_2D_ADpenalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "1D and 2D;"
    []
    [1D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/1D_3D.e Constraints/equal/formulation=penalty '
                 'Constraints/equal/type=ADEqualValueEmbeddedConstraint Outputs/file_base=1D_3D_ADpenalty_out'
      exodiff = '1D_3D_ADpenalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "1D and 3D;"
    []
    [2D_2D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/2D_2D.e Constraints/equal/formulation=penalty '
                 'Constraints/equal/type=ADEqualValueEmbeddedConstraint Outputs/file_base=2D_2D_ADpenalty_out'
      exodiff = '2D_2D_ADpenalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "2D;"
    []
    [2D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/2D_3D.e Constraints/equal/formulation=penalty '
                 'Constraints/equal/type=ADEqualValueEmbeddedConstraint Outputs/file_base=2D_3D_ADpenalty_out'
      exodiff = '2D_3D_ADpenalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "2D and 3D; and"
    []
    [3D_3D]
      type = 'Exodiff'
      input = 'embedded_constraint.i'
      cli_args = 'Mesh/file=gold/3D_3D.e Constraints/equal/formulation=penalty '
                 'Constraints/equal/type=ADEqualValueEmbeddedConstraint Outputs/file_base=3D_3D_ADpenalty_out'
      exodiff = '3D_3D_ADpenalty_out.e'
      abs_zero = 1e-9
      mesh_mode = REPLICATED
      detail = "3D subdomains."
    []
  []
  [error_kinematic_AD]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall error when kinematic constraints are used with automatic differentiation."
    issues = '#30499'
    type = RunException
    input = 'embedded_constraint.i'
    cli_args = 'Mesh/file=gold/1D_2D.e Constraints/equal/formulation=kinematic '
               'Constraints/equal/type=ADEqualValueEmbeddedConstraint Executioner/solve_type=NEWTON'
    expect_err = "AD constraints cannot be used with KINEMATIC formulation."
    mesh_mode = REPLICATED
  []
  [two_var_AD]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall couple two different variables using automatic "
                  "differentiation and penalty constraint and it will produce the same "
                  "results as a single variable simulation."
    issues = '#30499'
    type = RunApp
    input = 'two_var_embedded_constraint.i'
    mesh_mode = REPLICATED
  []
  [two_var_nonAD]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall couple two different variables using a hand-coded "
                  "Jacobian and penalty constraint and it will produce the same "
                  "results as a single variable simulation."
    issues = '#30499 #30530'
    type = RunApp
    input = 'two_var_embedded_constraint.i'
    cli_args = 'Constraints/equal_phi1_phi2/type=EqualValueEmbeddedConstraint'
    mesh_mode = REPLICATED
  []
  [writeble_var]
    design = 'source/constraints/EqualValueEmbeddedConstraint.md'
    requirement = "The system shall couple allow the node element constraints to write out to a variable."
    issues = '#30582'
    allow_test_objects = true
    type = 'CSVDiff'
    input = 'writeable_var.i'
    csvdiff = 'writeable_var_out_output_var_0002.csv'
    mesh_mode = REPLICATED
  []
[]
