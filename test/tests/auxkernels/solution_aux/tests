[Tests]
  issues = '#1891'
  design = 'source/auxkernels/SolutionAux.md source/userobjects/SolutionUserObject.md'
  [aux]
    requirement = "The system shall be capable of initializing an auxiliary variable from an "
                  "existing solution"
    [build]
      # Builds the solution for: test, direct, solution_aux_scale. output_error
      type = 'Exodiff'
      input = 'build.i'
      exodiff = 'build_out.e'

      detail = "from data generated by a simulation"
    []

    [test]
      type = 'Exodiff'
      input = 'solution_aux.i'
      exodiff = 'solution_aux_out.e'
      prereq = 'aux/build'

      detail = "and loaded using location,"
    []

    [direct]
      type = 'Exodiff'
      input = 'solution_aux_direct.i'
      exodiff = 'solution_aux_direct_out.e'
      prereq = 'aux/build'

      detail = "using a direct degree-of-freedom copy for identical meshes,"
    []

    [solution_aux_scale]
      type = 'Exodiff'
      input = 'solution_aux_scale.i'
      exodiff = 'solution_aux_scale_out.e'
      prereq = 'aux/build'

      detail = "with scaling the supplied data,"
    []

    [output_error]
      type = 'RunException'
      input = 'output_error.i'
      expect_err = "Failed to access the data for variable 'u' at point"
      prereq = 'aux/build'
      # This test throws an error from a threaded region. Rather than lock the error region,
      # we'll just avoid running it with multiple threads.
      max_threads = 1

      detail = "and that errors if data for the supplied variable is not found."
    []
  []
  [exodus]
    type = 'Exodiff'
    input = 'solution_aux_exodus.i'
    exodiff = 'solution_aux_exodus_out.e'
    requirement = "The SolutionAux object shall be capable of populating an auxiliary variable from "
                  "an ExodusII file."
  []

  [exodus_file_extension]
    type = 'Exodiff'
    input = 'solution_aux_exodus_file_extension.i'
    exodiff = 'solution_aux_exodus_file_extension_out.e'
    requirement = "The SolutionAux object shall be capable of populating an auxiliary variable from "
                  "an ExodusII file with a custom extension (e.g., *.e-s003)."
  []

  [exodus_elem_map]
    type = 'Exodiff'
    input = 'solution_aux_exodus_elem_map.i'
    exodiff = 'solution_aux_exodus_elem_map_out.e'
    requirement = "The SolutionAux object shall be capable of reading elemental data for the largest "
                  "timestep."
  []

  [exodus_elemental]
    type = 'Exodiff'
    input = 'solution_aux_exodus_elemental.i'
    exodiff = 'solution_aux_exodus_elemental_out.e'
    requirement = "The SolutionAux object shall be capable of reading elemental data for a specific "
                  "timestep."
  []

  [exodus_elemental_only]
    # Tests using a single variable from a file containing multiple variables
    type = 'Exodiff'
    input = 'solution_aux_exodus_elemental_only.i'
    exodiff = 'solution_aux_exodus_elemental_only_out.e'
    requirement = "The SolutionAux object shall be capable of restricting reading to a single "
                  "elemental variable."
  []

  [exodus_direct]
    type = 'Exodiff'
    input = 'solution_aux_exodus_direct.i'
    exodiff = 'solution_aux_exodus_direct_out.e'
    requirement = "The SolutionAux object shall be capable of initializing an auxiliary variable "
                  "from an existing ExodusII file using a direct degree-of-freedom copy for "
                  "identical meshes."
  []

  [exodus_interp]
    type = 'Exodiff'
    input = 'solution_aux_exodus_interp.i'
    exodiff = 'solution_aux_exodus_interp_out.e'
    requirement = "The SolutionAux object shall be capable of setting an auxiliary variable with "
                  "temporal interpolation."
  []

  [exodus_interp_restart]
    requirement = "The system shall be capable of initializing an auxiliary variable from an "
                  "existing solution that"

    [part1]
      type = 'Exodiff'
      input = 'solution_aux_exodus_interp_restart1.i'
      exodiff = 'solution_aux_exodus_interp_restart1_out.e'

      detail = "is created in a simulation and"
    []

    [part2]
      type = 'Exodiff'
      input = 'solution_aux_exodus_interp_restart2.i'
      exodiff = 'solution_aux_exodus_interp_restart2_out.e'
      prereq = exodus_interp_restart/part1
      recover = false

      detail = "used to restart another."
    []
  []

  [exodus_interp_direct]
    type = 'Exodiff'
    input = 'solution_aux_exodus_interp_direct.i'
    exodiff = 'solution_aux_exodus_interp_direct_out.e'
    requirement = "The SolutionAux object shall be capable of setting an auxiliary variable with "
                  "temporal interpolation using a direct degree-of-freedom copy for identical "
                  "meshes."
  []

  [multiple_input]
    type = 'Exodiff'
    input = 'solution_aux_multi_var.i'
    exodiff = 'solution_aux_multi_var_out.e'
    requirement = "The SolutionAux object shall be capable of accessing specific variables from a "
                  "SolutionUserObject."
  []

  [multiple_input_error]
    type = 'RunException'
    input = 'solution_aux_multi_err.i'
    expect_err = 'The SolutionUserObject contains multiple variables, \w+'
    requirement = "The SolutionAux object shall produce an error if the 'from_variable' parameter is "
                  "not set and the supplied UserObject has multiple variables."

  []

  [aux_nonlinear_solution]
    requirement = "The systems object shall be capable of setting values using an auxiliary variable"

    [build]
      # This builds the XDA and XDR files for the 'aux_nonlinear_solution_from_xda/r' tests below
      type = Exodiff
      input = 'aux_nonlinear_solution.i'
      exodiff = 'aux_nonlinear_solution_out.e'
      detail = "from a simulation using"
      xdr = true
    []

    [from_xda]
      type = Exodiff
      input = 'aux_nonlinear_solution_xda.i'
      exodiff = 'aux_nonlinear_solution_xda_out.e'
      prereq = aux_nonlinear_solution/build

      detail = "an ASCII file and"
    []

    [from_xdr]
      type = Exodiff
      input = 'aux_nonlinear_solution_xdr.i'
      exodiff = 'aux_nonlinear_solution_xdr_out.e'
      prereq = aux_nonlinear_solution/build
      detail = "a binary file."

      # This test reads a binary file that was written with 4-byte dof
      # ids.  At this time, it is only possible to read it back in with
      # a libmesh that also uses 4-byte dof ids.
      dof_id_bytes = 4
    []
  []

  [aux_nonlinear_solution_adapt]
    requirement = "The system shall be capable of setting values using an auxiliary variable"

    [build]
      # This builds the XDA file for the 'aux_nonlinear_solution_adapt_from_xda' test below
      type = RunApp
      input = 'aux_nonlinear_solution_adapt.i'

      detail = "create4d from a simulation with adaptivity"
    []

    [from_xda]
      type = Exodiff
      input = 'aux_nonlinear_solution_adapt_xda.i'
      exodiff = 'aux_nonlinear_solution_adapt_xda_out.e'
      prereq = aux_nonlinear_solution_adapt/build

      detail = "from an ASCII file"
    []

    [thread_test]
      type = CSVDiff
      input = 'thread_xda.i'
      csvdiff = 'thread_xda_out.csv'
      min_threads = 2
      prereq = aux_nonlinear_solution/from_xda

      detail = "with multiple threads."
    []
  []
[]
